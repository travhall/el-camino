---
// src/pages/shop/all.astro - Rebuilt using existing component architecture with working availability filter
import ProductFilters from "@/components/ProductFilters.astro";
import AppliedFilters from "@/components/AppliedFilters.astro";
import ProductGrid from "@/components/ProductGrid.astro";
import Layout from "@/layouts/Layout.astro";
import { fetchProducts } from "@/lib/square/client";
import { parseFiltersFromURL, extractFilterOptions } from "@/lib/square/filterUtils";
import type { Product, ProductFilters as ProductFiltersType, FilterOptions } from "@/lib/square/types";

// === PARSE URL PARAMETERS FOR FILTERING ===
const filters = parseFiltersFromURL(Astro.url.searchParams);

// Phase 4: Enhanced Server-Side Caching
// Smart cache headers based on filters
const hasFilters = Object.values(filters).some(f => 
  Array.isArray(f) ? f.length > 0 : f === true
);

const cacheControl = hasFilters
  ? "public, max-age=60, s-maxage=120, stale-while-revalidate=300" // Shorter cache for filtered results
  : "public, max-age=180, s-maxage=300, stale-while-revalidate=600"; // Longer cache for unfiltered

// Set cache headers for this response
Astro.response.headers.set("Cache-Control", cacheControl);
Astro.response.headers.set("Netlify-CDN-Cache-Control", 
  hasFilters 
    ? "public, s-maxage=120, stale-while-revalidate=600"
    : "public, s-maxage=300, stale-while-revalidate=1800"
);

// Add cache debugging header
Astro.response.headers.set("X-Cache-Strategy", 
  hasFilters ? "filtered-content" : "base-catalog"
);

// === FETCH ALL PRODUCTS ===
let allProducts: Product[] = [];
let filterOptions: FilterOptions = { brands: [] };

try {
  allProducts = await fetchProducts();
  
  // Extract filter options from all products
  filterOptions = extractFilterOptions(allProducts);

  // CLIENT-SIDE FILTERING: Let the client handle all filtering and infinite scroll
  // No server-side filtering for shop/all - matches category page behavior

} catch (error) {
  console.error("Error fetching products:", error);
  allProducts = [];
}

// === PAGE METADATA ===
const pageTitle = "Shop All | El Camino";

// Preload critical images (first 8 products)
const preloadImages = allProducts
  .slice(0, 8)
  .map((p) => p.image)
  .filter((img) => !img.includes("placeholder"));

// Current path for filter URLs
const categoryPath = "/shop/all";

// Check for active filters (for display purposes)
const hasActiveFilters = filters.brands.length > 0 || filters.availability === true;
---

<Layout title={pageTitle}>
  {preloadImages.map((img) => <link rel="preload" href={img} as="image" />)}

  <!-- Responsive Grid Layout -->
  <div class="min-h-screen bg-(--surface-primary)">

    <!-- Shop All Header -->
    <div class="p-4 pb-0">
      <div class="flex flex-col lg:flex-row justify-between gap-4 items-baseline">
        <div class="flex flex-row w-full lg:w-auto justify-between gap-4 items-baseline">
          <h1 class="font-display font-black text-6xl lg:text-7xl xl:text-8xl 2xl:text-9xl leading-[0.8] text-(--content-heading)">
            Shop All
          </h1>
        </div>
      </div>
    </div>

    <!-- Page Body -->
    <div class="grid grid-cols-1 lg:grid-cols-4 xl:grid-cols-5 gap-1 p-1 pb-0">

      <!-- Filter Sidebar -->
      <aside class="lg:col-span-1">
        <ProductFilters
          filterOptions={filterOptions}
          totalProducts={allProducts.length}
          filteredCount={allProducts.length}
          categoryPath={categoryPath}
        />
      </aside>

      <!-- Main Content -->
      <main class="lg:col-span-3 xl:col-span-4">

        <!-- Applied Filters Above Product Grid -->
        <AppliedFilters categoryPath={categoryPath} classes="hidden lg:block" />

        <!-- Products -->
        {
          allProducts.length > 0 ? (
            <>
              <!-- Products Grid - Client-side filtering enabled -->
              <ProductGrid
                products={allProducts}
                allProducts={allProducts}
                categoryPath={categoryPath}
              />
            </>
          ) : (
            <div class="text-center py-16">
              <div class="text-6xl mb-4 opacity-20">
                {hasActiveFilters ? "üîç" : "üõπ"}
              </div>
              <h2 class="text-2xl font-display font-bold text-(--content-heading) mb-2">
                {hasActiveFilters ? "No products match your filters" : "No products found"}
              </h2>
              <p class="text-(--content-meta) mb-6 max-w-md mx-auto">
                {hasActiveFilters
                  ? "Try adjusting your filters or browse all products."
                  : "Check back soon for new products!"
                }
              </p>
              {hasActiveFilters ? (
                <a
                  href={categoryPath}
                  class="font-sans font-semibold text-sm text-center lg:text-base py-2 px-3 lg:py-2 lg:px-4 border-2 rounded-[4px] text-(--ui-button-text) bg-(--ui-button-surface) border-(--ui-button-border) hover:bg-(--ui-button-surface)/75 outline-0 focus-visible:ring focus-visible:ring-offset-2 focus-visible:ring-(--ui-button-ring) transition-all ease-in-out duration-300"
                >
                  Clear Filters
                </a>
              ) : (
                <a
                  href="/"
                  class="font-sans font-semibold text-sm text-center lg:text-base py-2 px-3 lg:py-2 lg:px-4 border-2 rounded-[4px] text-(--ui-button-text) bg-(--ui-button-surface) border-(--ui-button-border) hover:bg-(--ui-button-surface)/75 outline-0 focus-visible:ring focus-visible:ring-offset-2 focus-visible:ring-(--ui-button-ring) transition-all ease-in-out duration-300"
                >
                  Go Home
                </a>
              )}
            </div>
          )
        }
      </main>
    </div>
  </div>
</Layout>
    }
  });
</script>