---
// src/pages/shop/all.astro - Rebuilt using existing component architecture with working availability filter and sorting
import ProductFilters from "@/components/ProductFilters.astro";
import AppliedFilters from "@/components/AppliedFilters.astro";
import FilterableProductGrid from "@/components/FilterableProductGrid.astro";
import PaginationControls from "@/components/PaginationControls.astro";
import Layout from "@/layouts/Layout.astro";
import { fetchProducts } from "@/lib/square/client";
import { parseURLParams, filterProducts, extractFilterOptions } from "@/lib/square/filterUtils";
import { calculatePaginationMeta } from "@/lib/square/types";
import type { Product, ProductFilters as ProductFiltersType, FilterOptions } from "@/lib/square/types";

// === PARSE URL PARAMETERS FOR PAGINATION + FILTERING + SORTING ===
const urlParams = parseURLParams(Astro.url.searchParams);
const { filters, page, pageSize } = urlParams;
const sortBy = Astro.url.searchParams.get("sort") || "name-asc";

// === FETCH ALL PRODUCTS ===
let allProducts: Product[] = [];
let filteredProducts: Product[] = [];
let filterOptions: FilterOptions = { brands: [] };

try {
  allProducts = await fetchProducts();
  
  // Extract filter options from all products
  filterOptions = extractFilterOptions(allProducts);

  // === APPLY FILTERS (now async due to availability filtering) ===
  filteredProducts = await filterProducts(allProducts, filters);

  // === APPLY SORTING ===
  filteredProducts.sort((a, b) => {
    switch (sortBy) {
      case 'name-asc':
        return a.title.localeCompare(b.title);
      case 'name-desc':
        return b.title.localeCompare(a.title);
      case 'price-asc':
        return a.price - b.price;
      case 'price-desc':
        return b.price - a.price;
      case 'newest':
        // Assuming newer products have higher IDs or you have a date field
        return b.id.localeCompare(a.id);
      default:
        return 0;
    }
  });

} catch (error) {
  console.error("Error fetching products:", error);
  filteredProducts = [];
}

// === PAGINATION LOGIC ===
const totalProducts = filteredProducts.length;
const startIndex = (page - 1) * pageSize;
const endIndex = startIndex + pageSize;
const paginatedProducts = filteredProducts.slice(startIndex, endIndex);

// Calculate pagination metadata
const pagination = calculatePaginationMeta(
  page,
  pageSize,
  paginatedProducts.length,
  endIndex < totalProducts,
  totalProducts
);

// === PAGE METADATA ===
const pageTitle = page > 1 
  ? `Shop All - Page ${page} | El Camino`
  : "Shop All | El Camino";

// Preload critical images (first 8 products)
const preloadImages = paginatedProducts
  .slice(0, 8)
  .map((p) => p.image)
  .filter((img) => !img.includes("placeholder"));

// Current path for pagination URLs
const categoryPath = "/shop/all";

// Check for active filters
const hasActiveFilters = filters.brands.length > 0 || filters.availability === true;
---

<Layout title={pageTitle}>
  {preloadImages.map((img) => <link rel="preload" href={img} as="image" />)}

  <!-- Responsive Grid Layout -->
  <div class="min-h-screen bg-(--surface-primary)">

    <!-- Shop All Header -->
    <div class="p-4 pb-0">
      <div class="flex flex-col lg:flex-row justify-between gap-4 items-baseline">
        <div class="flex flex-row w-full lg:w-auto justify-between gap-4 items-baseline">
          <h1 class="font-display font-black text-6xl lg:text-7xl xl:text-8xl 2xl:text-9xl leading-[0.8] text-(--content-heading)">
            Shop All
          </h1>
          <!-- Page indicator for non-first pages -->
          {page > 1 && (
            <p class="text-(--content-meta) text-sm mt-2">
              Page {page} of {pagination.totalPages}
            </p>
          )}
        </div>
        
        <!-- Sort Controls -->
        <div class="flex flex-wrap gap-2 mb-1.5">
          <div class="flex items-center space-x-2">
            <label for="sort-select" class="text-sm font-medium text-(--content-heading) hidden sm:block">
              Sort by:
            </label>
            <select
              id="sort-select"
              class="border border-(--ui-input-border) bg-(--ui-input-surface) text-(--ui-input-text) px-3 py-2 rounded-sm focus:ring-2 focus:ring-(--ui-focus) focus:border-transparent"
            >
              <option value="name-asc" selected={sortBy === "name-asc"}>Name: A-Z</option>
              <option value="name-desc" selected={sortBy === "name-desc"}>Name: Z-A</option>
              <option value="price-asc" selected={sortBy === "price-asc"}>Price: Low to High</option>
              <option value="price-desc" selected={sortBy === "price-desc"}>Price: High to Low</option>
              <option value="newest" selected={sortBy === "newest"}>Newest First</option>
            </select>
          </div>
        </div>
      </div>
    </div>

    <!-- Page Body -->
    <div class="grid grid-cols-1 lg:grid-cols-4 xl:grid-cols-5 gap-1 p-1">

      <!-- Filter Sidebar -->
      <aside class="lg:col-span-1">
        <ProductFilters
          filterOptions={filterOptions}
          totalProducts={allProducts.length}
          filteredCount={totalProducts}
          categoryPath={categoryPath}
        />
      </aside>

      <!-- Main Content -->
      <main class="lg:col-span-3 xl:col-span-4">

        <!-- Applied Filters Above Product Grid -->
        <AppliedFilters categoryPath={categoryPath} classes="hidden lg:block" />

        <!-- Products -->
        {
          paginatedProducts.length > 0 ? (
            <>
              <!-- Products Grid -->
              <FilterableProductGrid
                products={paginatedProducts}
                paginationMode={true}
                categoryPath={categoryPath}
              />

              <!-- Pagination Controls -->
              <PaginationControls
                pagination={pagination}
                basePath={categoryPath}
                filters={filters}
                pageSize={pageSize}
              />
            </>
          ) : (
            <div class="text-center py-16">
              <div class="text-6xl mb-4 opacity-20">
                {hasActiveFilters ? "üîç" : "üõπ"}
              </div>
              <h2 class="text-2xl font-display font-bold text-(--content-heading) mb-2">
                {hasActiveFilters ? "No products match your filters" : "No products found"}
              </h2>
              <p class="text-(--content-meta) mb-6 max-w-md mx-auto">
                {hasActiveFilters
                  ? "Try adjusting your filters or browse all products."
                  : "Check back soon for new products!"
                }
              </p>
              {hasActiveFilters ? (
                <a
                  href={categoryPath}
                  class="font-sans font-semibold text-sm text-center lg:text-base py-2 px-3 lg:py-2 lg:px-4 border-2 rounded-[4px] text-(--ui-button-text) bg-(--ui-button-surface) border-(--ui-button-border) hover:bg-(--ui-button-surface)/75 outline-0 focus-visible:ring focus-visible:ring-offset-2 focus-visible:ring-(--ui-button-ring) transition-all ease-in-out duration-300"
                >
                  Clear Filters
                </a>
              ) : (
                <a
                  href="/"
                  class="font-sans font-semibold text-sm text-center lg:text-base py-2 px-3 lg:py-2 lg:px-4 border-2 rounded-[4px] text-(--ui-button-text) bg-(--ui-button-surface) border-(--ui-button-border) hover:bg-(--ui-button-surface)/75 outline-0 focus-visible:ring focus-visible:ring-offset-2 focus-visible:ring-(--ui-button-ring) transition-all ease-in-out duration-300"
                >
                  Go Home
                </a>
              )}
            </div>
          )
        }
      </main>
    </div>
  </div>
</Layout>

<script>
  // Handle sort dropdown changes
  document.addEventListener('astro:page-load', () => {
    const sortSelect = document.getElementById('sort-select') as HTMLSelectElement;
    
    if (sortSelect) {
      sortSelect.addEventListener('change', (e) => {
        const target = e.target as HTMLSelectElement;
        const newSort = target.value;

        // Get current URL parameters
        const currentParams = new URLSearchParams(window.location.search);
        // Update sort parameter
        if (newSort && newSort !== 'name-asc') {
          currentParams.set('sort', newSort);
        } else {
          currentParams.delete('sort'); // Remove if default
        }
        // Reset to page 1 when sorting changes
        currentParams.delete('page');
        // Build new URL
        const queryString = currentParams.toString();
        const newUrl = `${window.location.pathname}${queryString ? '?' + queryString : ''}`;
        // Add loading state
        const grid = document.getElementById('filterable-product-grid');
        if (grid) grid.style.opacity = '0.5';
        // Navigate
        setTimeout(() => {
          window.location.href = newUrl;
        }, 150);
      });
    }
  });
</script>