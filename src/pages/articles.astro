---
import Layout from "@/layouts/Layout.astro";
import ArticleGrid from "@/components/ArticleGrid.astro";
import { fetchGraphQL } from "@/lib/graphql";
import { GET_ALL_ARTICLES } from "@/lib/queries";
import type { ArticlesResponse } from "@/lib/types/content";

// Get pagination params from URL
const currentPage = Number(Astro.url.searchParams.get("page")) || 1;
const pageSize = 12;

// Preserve existing sort functionality
const sortDirection = Astro.url.searchParams.get("sort") || "publishedAt:desc";

// Preserve existing category filter
const categorySlug = Astro.url.searchParams.get("category");

// Keep existing filters structure
const filters: Record<string, any> = {
  publishedAt: { notNull: true },
};

if (categorySlug) {
  filters.category = { slug: { eq: categorySlug } };
}

// Fetch articles with pagination
const response = await fetchGraphQL<ArticlesResponse>(GET_ALL_ARTICLES, {
  page: currentPage,
  pageSize,
  sort: [sortDirection],
  filters,
});

const { articles } = response;

// For now, we'll implement simple prev/next pagination
const hasArticles = articles.length > 0;
---

<Layout title="Articles">
  <main class="container mx-auto px-4 py-8">
    <div class="mb-8">
      <h1 class="text-4xl font-bold text-gray-900 mb-4">Articles</h1>

      <div class="flex justify-end mb-6">
        <select
          class="bg-white border border-gray-300 rounded-md px-4 py-2"
          onchange="window.location.href = this.value"
        >
          <option
            value="?sort=publishedAt:desc"
            selected={sortDirection === "publishedAt:desc"}
          >
            Most Recent
          </option>
          <option
            value="?sort=publishedAt:asc"
            selected={sortDirection === "publishedAt:asc"}
          >
            Oldest First
          </option>
          <option
            value="?sort=title:asc"
            selected={sortDirection === "title:asc"}
          >
            Title A-Z
          </option>
          <option
            value="?sort=title:desc"
            selected={sortDirection === "title:desc"}
          >
            Title Z-A
          </option>
        </select>
      </div>
    </div>

    <ArticleGrid articles={articles} />

    {
      hasArticles && (
        <nav class="mt-8 flex justify-center gap-2" aria-label="Pagination">
          {currentPage > 1 && (
            <a
              href={`?page=${currentPage - 1}&sort=${sortDirection}`}
              class="px-4 py-2 text-sm border rounded-md hover:bg-gray-50"
              aria-label="Previous page"
            >
              Previous
            </a>
          )}

          {articles.length === pageSize && (
            <a
              href={`?page=${currentPage + 1}&sort=${sortDirection}`}
              class="px-4 py-2 text-sm border rounded-md hover:bg-gray-50"
              aria-label="Next page"
            >
              Next
            </a>
          )}
        </nav>
      )
    }
  </main>
</Layout>
