---
// Enhanced SKU Reference page with improved UX
import Layout from "@/layouts/Layout.astro";
import { generateSkuReference } from "@/utils/generateSkuReference";
import type { SkuReference } from "@/utils/generateSkuReference";

// Generate SKU reference at build time
const { success, skus, categorized, error } = await generateSkuReference();

const pageTitle = "Product SKU Reference - Content Creator Guide";

// Build filter options for client-side filtering with hierarchical categories
const filterOptions = {
  categories: Object.keys(categorized)
    .sort((a, b) => {
      // Sort top-level categories first, then subcategories
      const aIsSubcat = a.includes(' > ');
      const bIsSubcat = b.includes(' > ');
      if (aIsSubcat !== bIsSubcat) {
        return aIsSubcat ? 1 : -1; // Top-level first
      }
      return a.localeCompare(b);
    })
    .map(cat => ({
      name: cat,
      slug: cat.toLowerCase().replace(/\s+/g, '-').replace(/>/g, ''),
      count: categorized[cat].length,
      isSubcategory: cat.includes(' > '),
      parentCategory: cat.includes(' > ') ? cat.split(' > ')[0] : null,
      subcategoryName: cat.includes(' > ') ? cat.split(' > ')[1] : null
    })),
  brands: [...new Set(skus.map(s => s.brand).filter(Boolean))].map(brand => ({
    name: brand!,
    slug: brand!.toLowerCase().replace(/\s+/g, '-'),
    count: skus.filter(s => s.brand === brand).length
  })),
  priceRanges: [
    { name: "Under $25", min: 0, max: 25, count: skus.filter(s => s.price < 25).length },
    { name: "$25 - $50", min: 25, max: 50, count: skus.filter(s => s.price >= 25 && s.price < 50).length },
    { name: "$50 - $75", min: 50, max: 75, count: skus.filter(s => s.price >= 50 && s.price < 75).length },
    { name: "$75+", min: 75, max: 999, count: skus.filter(s => s.price >= 75).length }
  ]
};
---

<Layout title={pageTitle}>
  <div class="px-4 sm:px-6 lg:px-8 py-12 relative">
    
    <!-- Header -->
    <div class="mb-8">
      <h1 class="text-4xl font-bold text-(--content-heading) mb-4">
        Product SKU Reference
      </h1>
      <p class="text-lg text-(--content-body) mb-6">
        Use these human-readable SKUs in your WordPress product showcases. 
        Search, filter, and copy the SKU codes you need for your blog posts.
      </p>
    </div>

    {error && (
      <div class="bg-(--state-error-surface) text-(--state-error-text) p-6 rounded-sm mb-8">
        <h2 class="text-xl font-semibold mb-2">Error Loading Products</h2>
        <p>{error}</p>
      </div>
    )}

    {success && (
      <div>
        <!-- Search and Controls Bar -->
        <div class="bg-(--surface-secondary) p-4 rounded-sm mb-6">
          <div class="flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between">
            <!-- Search Bar -->
            <div class="flex-1 max-w-md">
              <div class="relative">
                <input
                  type="text"
                  id="search-input"
                  placeholder="Search SKUs, products, or brands..."
                  class="w-full px-4 py-2 pr-10 text-sm border border-(--ui-input-border) rounded bg-(--ui-input-surface) text-(--ui-input-text) focus:ring-2 focus:ring-(--ui-accent) focus:border-(--ui-accent)"
                />
                <button
                  id="clear-search"
                  class="absolute right-3 top-1/2 transform -translate-y-1/2 text-(--content-meta) hover:text-(--content-emphasis) hidden"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>

            <!-- Sort and Builder Controls -->
            <div class="flex gap-3">
              <select
                id="sort-select"
                class="px-3 py-2 text-sm border border-(--ui-input-border) rounded bg-(--ui-input-surface) text-(--ui-input-text)"
              >
                <option value="name">Sort by Name</option>
                <option value="price-low">Price: Low to High</option>
                <option value="price-high">Price: High to Low</option>
                <option value="brand">Brand A-Z</option>
                <option value="category">Category</option>
              </select>

              <!-- Examples and Builder Controls -->
              <div class="flex gap-2">
                <button
                  id="open-examples"
                  class="font-sans font-semibold transition-all ease-in-out duration-300 border-2 rounded-[4px] focus-visible:ring outline-0 focus-visible:ring-offset-2 text-(--ui-button-secondary-text) bg-(--ui-button-secondary-surface) border-(--ui-button-secondary-border) hover:bg-(--ui-button-secondary-surface)/75 focus-visible:ring-(--ui-button-secondary-ring) text-sm py-2 px-3 lg:text-base lg:py-2 lg:px-4 flex items-center gap-2"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                  Examples
                </button>
                
                <button
                  id="open-showcase-builder"
                  class="font-sans font-semibold transition-all ease-in-out duration-300 border-2 rounded-[4px] focus-visible:ring outline-0 focus-visible:ring-offset-2 text-(--ui-button-text) bg-(--ui-button-surface) border-(--ui-button-border) hover:bg-(--ui-button-surface)/75 focus-visible:ring-(--ui-button-ring) text-sm py-2 px-3 lg:text-base lg:py-2 lg:px-4 flex items-center gap-2 disabled:opacity-75 disabled:cursor-not-allowed"
                  disabled
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4" />
                  </svg>
                  Build Showcase (<span id="selected-count-trigger">0</span>)
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Filters and Results Layout -->
        <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
          <!-- Filters Sidebar -->
          <div class="lg:col-span-1">
            <div class="bg-(--surface-secondary) p-4 rounded-sm">
              <div class="flex items-center justify-between mb-4">
                <h3 class="font-semibold text-(--content-heading)">Filters</h3>
                <button
                  id="clear-filters"
                  class="text-sm text-(--ui-accent) hover:text-(--ui-accent-hover)"
                >
                  Clear All
                </button>
              </div>

              <!-- Category Filter with Hierarchical Display -->
              <div class="mb-6">
                <h4 class="font-medium text-(--content-heading) mb-2">Categories</h4>
                <div class="space-y-1 max-h-48 overflow-y-auto">
                  {filterOptions.categories.map(category => (
                    <label class={`flex items-center cursor-pointer ${category.isSubcategory ? 'ml-4 text-sm' : 'font-medium'}`}>
                      <input
                        type="checkbox"
                        class="category-filter elco-checkbox mr-2"
                        data-category={category.slug}
                        data-full-category={category.name}
                      />
                      <span class={`text-(--content-body) flex-1 ${category.isSubcategory ? 'text-sm opacity-90' : ''}`}>
                        {category.isSubcategory ? `↳ ${category.subcategoryName}` : category.name}
                      </span>
                      <span class="text-xs text-(--content-meta)">({category.count})</span>
                    </label>
                  ))}
                </div>
              </div>

              <!-- Brand Filter -->
              <div class="mb-6">
                <h4 class="font-medium text-(--content-heading) mb-2">Brands</h4>
                <div class="space-y-2 max-h-48 overflow-y-auto">
                  {filterOptions.brands.map(brand => (
                    <label class="flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        class="brand-filter elco-checkbox mr-2"
                        data-brand={brand.slug}
                      />
                      <span class="text-sm text-(--content-body) flex-1">{brand.name}</span>
                      <span class="text-xs text-(--content-meta)">({brand.count})</span>
                    </label>
                  ))}
                </div>
              </div>

              <!-- Price Range Filter -->
              <div class="mb-6">
                <h4 class="font-medium text-(--content-heading) mb-2">Price Range</h4>
                <div class="space-y-2">
                  {filterOptions.priceRanges.map(range => (
                    <label class="flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        class="price-filter elco-checkbox mr-2"
                        data-range={range.name.toLowerCase().replace(/\s+/g, '-')}
                      />
                      <span class="text-sm text-(--content-body) flex-1">{range.name}</span>
                      <span class="text-xs text-(--content-meta)">({range.count})</span>
                    </label>
                  ))}
                </div>
              </div>

              <!-- Export -->
              <div class="border-t border-(--border-secondary) pt-4">
                <h4 class="font-medium text-(--content-heading) mb-2">Export</h4>
                <button
                  id="export-filtered"
                  class="w-full text-left px-3 py-2 text-sm bg-(--surface-tertiary) hover:bg-(--ui-accent) hover:text-white rounded transition-colors"
                >
                  Export as CSV
                </button>
              </div>
            </div>
          </div>

          <!-- Results Area -->
          <div class="lg:col-span-3">
            <!-- Results Header -->
            <div class="mb-4">
              <div class="flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between mb-4">
                <div class="text-sm text-(--content-meta)">
                  <span id="results-summary">Showing {skus.length} products</span>
                </div>
              </div>
            </div>

            <!-- Results Container -->
            <div id="results-container">
              <!-- Table View -->
              <div id="table-view" class="bg-(--surface-secondary) rounded-sm overflow-hidden">
                <div class="overflow-x-auto">
                  <table class="w-full">
                    <thead class="bg-(--surface-tertiary)">
                      <tr>
                        <th class="px-4 py-3 text-left">
                          <input type="checkbox" id="select-all-checkbox" class="elco-checkbox" />
                        </th>
                        <th class="px-4 py-3 text-left text-sm font-semibold text-(--content-heading)">SKU</th>
                        <th class="px-4 py-3 text-left text-sm font-semibold text-(--content-heading)">Product</th>
                        <th class="px-4 py-3 text-left text-sm font-semibold text-(--content-heading)">Price</th>
                        <th class="px-4 py-3 text-left text-sm font-semibold text-(--content-heading)">Brand</th>
                        <th class="px-4 py-3 text-left text-sm font-semibold text-(--content-heading)">Category</th>
                      </tr>
                    </thead>
                    <tbody id="table-results" class="divide-y divide-(--border-secondary)">
                      <!-- Results populated by JavaScript -->
                    </tbody>
                  </table>
                </div>
              </div>
            </div>

            <!-- Empty State -->
            <div id="empty-state" class="text-center py-12 hidden">
              <div class="text-4xl mb-4 opacity-20">🔍</div>
              <h3 class="text-lg font-medium text-(--content-heading) mb-2">No products found</h3>
              <p class="text-(--content-meta)">Try adjusting your search terms or filters</p>
            </div>
          </div>
        </div>
      </div>
    )}

    <!-- Loading State -->
    <div id="loading-state" class="text-center py-12 hidden">
      <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-(--ui-accent) mx-auto mb-4"></div>
      <p class="text-(--content-meta)">Loading products...</p>
    </div>
  </div>

  <!-- Examples Drawer (slides from left) -->
  <!-- Overlay -->
  <div
    id="examples-overlay"
    class="fixed inset-0 bg-(--ui-modal-overlay)/80 backdrop-blur-sm z-[60] hidden opacity-0 transition-opacity duration-300"
  >
  </div>

  <!-- Slide Panel -->
  <div
    id="examples-panel"
    class="fixed top-0 left-0 h-screen w-96 max-w-full bg-(--surface-primary) border-4 border-(--surface-primary) z-[60] transform -translate-x-full transition-transform duration-300 shadow-lg overflow-y-scroll"
    role="dialog"
    aria-labelledby="examples-title"
  >
    <div class="container grid grid-rows-[auto_1fr] h-full">
      <!-- Header -->
      <div
        class="flex items-center justify-between p-4 border-b-4 border-(--border-secondary) bg-(--surface-secondary) sticky top-0"
      >
        <h2
          id="examples-title"
          class="font-display text-xl text-(--content-heading)"
        >
          Quick Usage Examples
        </h2>
        <button
          id="close-examples"
          type="button"
          class="p-2 hover:border-(--ui-nav-border) border rounded-sm transition-colors"
          aria-label="Close examples"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <!-- Content Area -->
      <div class="flex-1 overflow-y-auto p-4 space-y-6">
        <div class="grid grid-cols-1 gap-6 text-sm">
          <div>
            <div class="text-(--content-meta) mb-3 font-medium">Basic Grid Layout:</div>
            <pre class="bg-(--surface-tertiary) p-3 rounded text-xs overflow-x-auto font-mono"><code>&lt;div class="wp-block-product-showcase"&gt;
&lt;!-- data-product-skus="SPITFIRE-CLASSIC-SOCKS,THRASHER-THORNS-HOODY-MEDIUM-BLACK" --&gt;
&lt;!-- data-title="Staff Picks" --&gt;
&lt;!-- data-layout="grid" --&gt;
&lt;!-- data-columns="2" --&gt;
&lt;/div&gt;</code></pre>
          </div>
          <div>
            <div class="text-(--content-meta) mb-3 font-medium">Carousel Layout:</div>
            <pre class="bg-(--surface-tertiary) p-3 rounded text-xs overflow-x-auto font-mono"><code>&lt;div class="wp-block-product-showcase"&gt;
&lt;!-- data-product-skus="KROOKED-DECK-838,REAL-DECK-825,BAKER-DECK-838" --&gt;
&lt;!-- data-title="Featured Decks" --&gt;
&lt;!-- data-layout="carousel" --&gt;
&lt;!-- data-columns="4" --&gt;
&lt;/div&gt;</code></pre>
          </div>
          <div>
            <div class="text-(--content-meta) mb-3 font-medium">List Layout:</div>
            <pre class="bg-(--surface-tertiary) p-3 rounded text-xs overflow-x-auto font-mono"><code>&lt;div class="wp-block-product-showcase"&gt;
&lt;!-- data-product-skus="BRONZE-BULL-CREWNECK-LARGE-BLACK,BRONZE-TRIBAL-T-SHIRT-XL" --&gt;
&lt;!-- data-title="Bronze Brand Spotlight" --&gt;
&lt;!-- data-description="Check out the latest from Bronze" --&gt;
&lt;!-- data-layout="list" --&gt;
&lt;/div&gt;</code></pre>
          </div>
        </div>
        <div class="mt-6 p-4 bg-(--ui-accent)/10 rounded text-xs">
          <strong>Available Attributes:</strong> <code>data-product-skus</code> (comma-separated), <code>data-title</code>, <code>data-description</code>, <code>data-layout</code> (grid/carousel/list), <code>data-columns</code> (1-6, only for grid layout).
        </div>
      </div>
    </div>
  </div>

  <!-- Showcase Builder Drawer (slides from right) -->
  <!-- Overlay -->
  <div
    id="showcase-builder-overlay"
    class="fixed inset-0 bg-(--ui-modal-overlay)/80 backdrop-blur-sm z-[70] hidden opacity-0 transition-opacity duration-300"
  >
  </div>

  <!-- Slide Panel -->
  <div
    id="showcase-builder-panel"
    class="fixed top-0 right-0 h-screen w-96 max-w-full bg-(--surface-primary) border-4 border-(--surface-primary) z-[70] transform translate-x-full transition-transform duration-300 shadow-lg overflow-y-scroll"
    role="dialog"
    aria-labelledby="showcase-builder-title"
  >
    <div class="container grid grid-rows-[auto_1fr_auto] h-full">
      <!-- Header -->
      <div
        class="flex items-center justify-between p-4 border-b-4 border-(--border-secondary) bg-(--surface-secondary) sticky top-0"
      >
        <h2
          id="showcase-builder-title"
          class="font-display text-xl text-(--content-heading)"
        >
          Showcase Builder
        </h2>
        <button
          id="close-showcase-builder"
          type="button"
          class="p-2 hover:border-(--ui-nav-border) border rounded-sm transition-colors"
          aria-label="Close showcase builder"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <!-- Content Area -->
      <div class="flex-1 overflow-y-auto p-4 space-y-6">
        <!-- Title Input -->
        <div>
          <label class="block text-sm font-medium text-(--content-heading) mb-2">Title</label>
          <input
            type="text"
            id="showcase-title"
            placeholder="Featured Products"
            class="w-full px-3 py-2 text-sm border border-(--ui-input-border) rounded bg-(--ui-input-surface) text-(--ui-input-text)"
          />
        </div>

        <!-- Description Input -->
        <div>
          <label class="block text-sm font-medium text-(--content-heading) mb-2">Description (optional)</label>
          <textarea
            id="showcase-description"
            placeholder="Optional description..."
            rows="3"
            class="w-full px-3 py-2 text-sm border border-(--ui-input-border) rounded bg-(--ui-input-surface) text-(--ui-input-text)"
          ></textarea>
        </div>

        <!-- Layout Selection -->
        <div>
          <label class="block text-sm font-medium text-(--content-heading) mb-2">Layout</label>
          <div class="grid grid-cols-3 gap-2">
            <button class="layout-btn active" data-layout="grid">
              Grid
            </button>
            <button class="layout-btn" data-layout="carousel">
              Carousel
            </button>
            <button class="layout-btn" data-layout="list">
              List
            </button>
          </div>
        </div>

        <!-- Columns (for grid layout) -->
        <div id="columns-control">
          <label class="block text-sm font-medium text-(--content-heading) mb-2">Columns</label>
          <select id="showcase-columns" class="w-full px-3 py-2 text-sm border border-(--ui-input-border) rounded bg-(--ui-input-surface)">
            <option value="2">2 Columns</option>
            <option value="3" selected>3 Columns</option>
            <option value="4">4 Columns</option>
          </select>
        </div>

        <!-- Selected Products -->
        <div>
          <label class="block text-sm font-medium text-(--content-heading) mb-2">
            Selected Products (<span id="selected-count">0</span>)
          </label>
          <div id="selected-products" class="min-h-[80px] p-3 border border-(--ui-input-border) rounded bg-(--ui-input-surface) text-sm">
            <p class="text-(--content-meta) italic">Products will appear here as you select them</p>
          </div>
        </div>

        <!-- Generated Code Output -->
        <div id="code-output" style="display: none;">
          <label class="block text-sm font-medium text-(--content-heading) mb-2">WordPress Code</label>
          <div class="relative">
            <pre id="generated-code" class="bg-(--surface-tertiary) p-3 rounded text-xs font-mono overflow-x-auto border max-h-48"></pre>
            <button
              id="copy-code"
              class="absolute top-2 right-2 px-2 py-1 bg-(--ui-accent) text-white text-xs rounded hover:bg-(--ui-accent-hover) font-semibold"
            >
              Copy
            </button>
          </div>
        </div>
      </div>

      <!-- Footer -->
      <div class="border-t-4 border-(--border-secondary) bg-(--surface-secondary) p-4 sticky bottom-0">
        <div class="space-y-2">
          <button
            id="generate-code"
            class="w-full font-sans font-semibold transition-all ease-in-out duration-300 border-2 rounded-[4px] focus-visible:ring outline-0 focus-visible:ring-offset-2 text-(--ui-button-text) bg-(--ui-button-surface) border-(--ui-button-border) hover:bg-(--ui-button-surface)/75 focus-visible:ring-(--ui-button-ring) text-sm py-2 px-3 lg:text-base lg:py-2 lg:px-4 flex items-center justify-center gap-2"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4" />
            </svg>
            Generate WordPress Code
          </button>
          <button
            id="clear-selection"
            class="w-full font-sans font-semibold transition-all ease-in-out duration-300 border-2 rounded-[4px] focus-visible:ring outline-0 focus-visible:ring-offset-2 text-(--ui-button-secondary-text) bg-(--ui-button-secondary-surface) border-(--ui-button-secondary-border) hover:bg-(--ui-button-secondary-surface)/75 focus-visible:ring-(--ui-button-secondary-ring) text-sm py-2 px-3 lg:text-base lg:py-2 lg:px-4"
          >
            Clear Selection
          </button>
        </div>
      </div>
    </div>
  </div>

  <!-- Copy Feedback Toast -->
  <div id="copy-toast" class="fixed bottom-4 right-4 bg-(--bg-primary) text-white px-4 py-2 rounded shadow-lg transform translate-y-full transition-transform z-[80]">
    <div class="flex items-center gap-2">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
      </svg>
      <span id="toast-message">Copied to clipboard!</span>
    </div>
  </div>
</Layout>

<script define:vars={{ skus, filterOptions, categorized }}>
  // Enhanced SKU Reference with improved UX and hierarchical categories
  let allSkus = skus.map(sku => ({
    ...sku,
    // Add category from categorized data for filtering
    category: Object.keys(categorized).find(cat => 
      categorized[cat].some(catSku => catSku.humanReadableSku === sku.humanReadableSku)
    ) || 'Uncategorized'
  }));
  let filteredSkus = [...allSkus];
  let selectedProducts = new Set();
  let currentSort = 'name';
  let currentLayout = 'grid';
  let currentColumns = 3;

  // DOM elements
  const searchInput = document.getElementById('search-input');
  const clearSearch = document.getElementById('clear-search');
  const sortSelect = document.getElementById('sort-select');
  const categoryFilters = document.querySelectorAll('.category-filter');
  const brandFilters = document.querySelectorAll('.brand-filter');
  const priceFilters = document.querySelectorAll('.price-filter');
  const clearFilters = document.getElementById('clear-filters');
  const resultsSummary = document.getElementById('results-summary');
  const tableResults = document.getElementById('table-results');
  const emptyState = document.getElementById('empty-state');
  const selectAllCheckbox = document.getElementById('select-all-checkbox');
  const copyToast = document.getElementById('copy-toast');
  const toastMessage = document.getElementById('toast-message');

  // Initialize
  document.addEventListener('DOMContentLoaded', () => {
    updateResults();
    bindEvents();
    bindDrawerEvents();
    updateBuilderButton();
  });

  function bindEvents() {
    // Search
    searchInput?.addEventListener('input', debounce(handleSearch, 300));
    clearSearch?.addEventListener('click', () => {
      searchInput.value = '';
      clearSearch.classList.add('hidden');
      handleSearch();
    });

    // Sort
    sortSelect?.addEventListener('change', handleSort);

    // Filters
    categoryFilters.forEach(filter => {
      filter.addEventListener('change', updateResults);
    });
    
    brandFilters.forEach(filter => {
      filter.addEventListener('change', updateResults);
    });
    
    priceFilters.forEach(filter => {
      filter.addEventListener('change', updateResults);
    });

    // Clear filters
    clearFilters?.addEventListener('click', () => {
      categoryFilters.forEach(f => f.checked = false);
      brandFilters.forEach(f => f.checked = false);
      priceFilters.forEach(f => f.checked = false);
      searchInput.value = '';
      clearSearch.classList.add('hidden');
      updateResults();
    });

    // Export
    document.getElementById('export-filtered')?.addEventListener('click', exportFiltered);

    // Select all checkbox
    selectAllCheckbox?.addEventListener('change', toggleSelectAll);
  }

  function bindDrawerEvents() {
    // Examples drawer
    document.getElementById('open-examples')?.addEventListener('click', openExamples);
    document.getElementById('close-examples')?.addEventListener('click', closeExamples);
    document.getElementById('examples-overlay')?.addEventListener('click', closeExamples);

    // Showcase builder drawer
    document.getElementById('open-showcase-builder')?.addEventListener('click', openShowcaseBuilder);
    document.getElementById('close-showcase-builder')?.addEventListener('click', closeShowcaseBuilder);
    document.getElementById('showcase-builder-overlay')?.addEventListener('click', closeShowcaseBuilder);

    // Layout buttons
    document.querySelectorAll('.layout-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        document.querySelectorAll('.layout-btn').forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        currentLayout = btn.dataset.layout;
        
        // Show/hide columns control
        const columnsControl = document.getElementById('columns-control');
        columnsControl.style.display = currentLayout === 'grid' ? 'block' : 'none';
      });
    });

    // Columns select
    document.getElementById('showcase-columns')?.addEventListener('change', (e) => {
      currentColumns = parseInt(e.target.value);
    });

    // Generate code button
    document.getElementById('generate-code')?.addEventListener('click', generateCode);

    // Copy code button
    document.getElementById('copy-code')?.addEventListener('click', copyCode);

    // Clear selection button
    document.getElementById('clear-selection')?.addEventListener('click', clearSelection);
  }

  function openExamples() {
    const overlay = document.getElementById('examples-overlay');
    const panel = document.getElementById('examples-panel');
    
    overlay.classList.remove('hidden');
    panel.classList.remove('-translate-x-full');
    
    // Trigger animations
    setTimeout(() => {
      overlay.classList.remove('opacity-0');
    }, 10);
    
    document.body.style.overflow = 'hidden';
  }

  function closeExamples() {
    const overlay = document.getElementById('examples-overlay');
    const panel = document.getElementById('examples-panel');
    
    overlay.classList.add('opacity-0');
    panel.classList.add('-translate-x-full');
    
    setTimeout(() => {
      overlay.classList.add('hidden');
      document.body.style.overflow = '';
    }, 300);
  }

  function openShowcaseBuilder() {
    const overlay = document.getElementById('showcase-builder-overlay');
    const panel = document.getElementById('showcase-builder-panel');
    
    overlay.classList.remove('hidden');
    panel.classList.remove('translate-x-full');
    
    // Trigger animations
    setTimeout(() => {
      overlay.classList.remove('opacity-0');
    }, 10);
    
    document.body.style.overflow = 'hidden';
  }

  function closeShowcaseBuilder() {
    const overlay = document.getElementById('showcase-builder-overlay');
    const panel = document.getElementById('showcase-builder-panel');
    
    overlay.classList.add('opacity-0');
    panel.classList.add('translate-x-full');
    
    setTimeout(() => {
      overlay.classList.add('hidden');
      document.body.style.overflow = '';
    }, 300);
  }

  function updateBuilderButton() {
    const button = document.getElementById('open-showcase-builder');
    const count = document.getElementById('selected-count-trigger');
    
    if (button && count) {
      count.textContent = selectedProducts.size;
      button.disabled = selectedProducts.size === 0;
    }
  }

  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  function handleSearch() {
    const query = searchInput?.value || '';
    if (query) {
      clearSearch?.classList.remove('hidden');
    } else {
      clearSearch?.classList.add('hidden');
    }
    updateResults();
  }

  function handleSort() {
    currentSort = sortSelect.value;
    updateResults();
  }

  function updateResults() {
    // Apply filters
    filteredSkus = applyFilters();

    // Apply sorting
    applySorting();

    // Update UI
    updateResultsCount();
    renderTableView();
    
    // Show/hide empty state
    emptyState.classList.toggle('hidden', filteredSkus.length > 0);
    document.getElementById('results-container').classList.toggle('hidden', filteredSkus.length === 0);
  }

  function applyFilters() {
    let results = [...allSkus];

    // Search filter
    const query = searchInput?.value.toLowerCase() || '';
    if (query) {
      results = results.filter(sku => 
        sku.humanReadableSku.toLowerCase().includes(query) ||
        sku.title.toLowerCase().includes(query) ||
        (sku.brand && sku.brand.toLowerCase().includes(query))
      );
    }

    // Category filter with hierarchical support
    const selectedCategories = Array.from(categoryFilters)
      .filter(f => f.checked)
      .map(f => f.dataset.fullCategory);
    
    if (selectedCategories.length > 0) {
      results = results.filter(sku => 
        selectedCategories.includes(sku.category)
      );
    }

    // Brand filter
    const selectedBrands = Array.from(brandFilters)
      .filter(f => f.checked)
      .map(f => f.dataset.brand);
    
    if (selectedBrands.length > 0) {
      results = results.filter(sku => 
        sku.brand && selectedBrands.includes(sku.brand.toLowerCase().replace(/\s+/g, '-'))
      );
    }

    // Price filter
    const selectedPriceRanges = Array.from(priceFilters)
      .filter(f => f.checked)
      .map(f => f.dataset.range);
    
    if (selectedPriceRanges.length > 0) {
      results = results.filter(sku => {
        return selectedPriceRanges.some(rangeSlug => {
          const range = filterOptions.priceRanges.find(r => 
            r.name.toLowerCase().replace(/\s+/g, '-') === rangeSlug
          );
          return range && sku.price >= range.min && sku.price < range.max;
        });
      });
    }

    return results;
  }

  function applySorting() {
    switch (currentSort) {
      case 'price-low':
        filteredSkus.sort((a, b) => a.price - b.price);
        break;
      case 'price-high':
        filteredSkus.sort((a, b) => b.price - a.price);
        break;
      case 'brand':
        filteredSkus.sort((a, b) => (a.brand || '').localeCompare(b.brand || ''));
        break;
      case 'category':
        filteredSkus.sort((a, b) => a.category.localeCompare(b.category));
        break;
      default: // name
        filteredSkus.sort((a, b) => a.humanReadableSku.localeCompare(b.humanReadableSku));
    }
  }

  function updateResultsCount() {
    if (resultsSummary) resultsSummary.textContent = `Showing ${filteredSkus.length} products`;
  }

  function renderTableView() {
    if (!tableResults) return;
    
    tableResults.innerHTML = filteredSkus.map(sku => `
      <tr class="hover:bg-(--surface-tertiary) cursor-pointer product-row" data-sku="${sku.humanReadableSku}">
        <td class="px-4 py-3">
          <input 
            type="checkbox" 
            class="sku-checkbox elco-checkbox" 
            data-sku="${sku.humanReadableSku}"
            data-title="${sku.title}"
            data-price="${sku.price}"
            data-brand="${sku.brand || ''}"
          />
        </td>
        <td class="px-4 py-3">
          <code class="bg-(--ui-accent)/10 text-(--ui-accent) px-2 py-1 rounded text-sm font-mono font-semibold">
            ${sku.humanReadableSku}
          </code>
        </td>
        <td class="px-4 py-3">
          <div class="text-sm font-medium text-(--content-heading)">${sku.title}</div>
        </td>
        <td class="px-4 py-3 text-sm font-medium text-(--content-body)">
          $${sku.price.toFixed(2)}
        </td>
        <td class="px-4 py-3 text-sm font-medium text-(--content-body)">
          ${sku.brand || 'N/A'}
        </td>
        <td class="px-4 py-3 text-sm font-medium text-(--content-body)">
          <span class="text-xs text-(--content-meta)">${sku.category}</span>
        </td>
      </tr>
    `).join('');

    bindRowEvents();
  }

  function bindRowEvents() {
    // Make entire rows clickable
    document.querySelectorAll('.product-row').forEach(row => {
      row.addEventListener('click', (e) => {
        // Don't trigger if clicking directly on checkbox
        if (e.target.type === 'checkbox') return;
        
        const checkbox = row.querySelector('.sku-checkbox');
        checkbox.checked = !checkbox.checked;
        checkbox.dispatchEvent(new Event('change'));
      });
    });

    // Individual checkboxes
    document.querySelectorAll('.sku-checkbox').forEach(checkbox => {
      checkbox.addEventListener('change', (e) => {
        const skuData = {
          sku: e.target.dataset.sku,
          title: e.target.dataset.title,
          price: parseFloat(e.target.dataset.price),
          brand: e.target.dataset.brand
        };
        
        if (e.target.checked) {
          selectedProducts.add(skuData);
        } else {
          selectedProducts.forEach(p => {
            if (p.sku === skuData.sku) selectedProducts.delete(p);
          });
        }
        updateSelectAllState();
        updateSelectedProductsDisplay();
        updateBuilderButton();
      });
    });
  }

  function updateSelectedProductsDisplay() {
    const container = document.getElementById('selected-products');
    const count = document.getElementById('selected-count');
    
    count.textContent = selectedProducts.size;
    
    if (selectedProducts.size === 0) {
      container.innerHTML = '<p class="text-(--content-meta) italic">Products will appear here as you select them</p>';
      return;
    }

    const productTags = Array.from(selectedProducts).map(product => `
      <span class="inline-flex items-center gap-1 bg-(--ui-accent)/10 text-(--ui-accent) px-2 py-1 rounded text-xs mr-2 mb-2">
        ${product.sku}
        <button class="remove-product hover:text-red-500" data-sku="${product.sku}">×</button>
      </span>
    `).join('');

    container.innerHTML = productTags;

    // Bind remove buttons
    container.querySelectorAll('.remove-product').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const sku = e.target.dataset.sku;
        selectedProducts.forEach(p => {
          if (p.sku === sku) {
            selectedProducts.delete(p);
            // Uncheck the table checkbox
            const checkbox = document.querySelector(`[data-sku="${sku}"]`);
            if (checkbox) checkbox.checked = false;
          }
        });
        updateSelectedProductsDisplay();
        updateSelectAllState();
        updateBuilderButton();
      });
    });
  }

  function toggleSelectAll() {
    const isChecked = selectAllCheckbox?.checked;
    document.querySelectorAll('.sku-checkbox').forEach(cb => {
      cb.checked = isChecked;
      const skuData = {
        sku: cb.dataset.sku,
        title: cb.dataset.title,
        price: parseFloat(cb.dataset.price),
        brand: cb.dataset.brand
      };
      if (isChecked) {
        selectedProducts.add(skuData);
      } else {
        selectedProducts.forEach(p => {
          if (p.sku === skuData.sku) selectedProducts.delete(p);
        });
      }
    });
    updateSelectedProductsDisplay();
    updateBuilderButton();
  }

  function updateSelectAllState() {
    if (!selectAllCheckbox) return;
    
    const visibleCheckboxes = document.querySelectorAll('.sku-checkbox');
    const checkedCount = Array.from(visibleCheckboxes).filter(cb => cb.checked).length;
    
    if (checkedCount === 0) {
      selectAllCheckbox.checked = false;
      selectAllCheckbox.indeterminate = false;
    } else if (checkedCount === visibleCheckboxes.length) {
      selectAllCheckbox.checked = true;
      selectAllCheckbox.indeterminate = false;
    } else {
      selectAllCheckbox.checked = false;
      selectAllCheckbox.indeterminate = true;
    }
  }

  function generateCode() {
    const title = document.getElementById('showcase-title')?.value || '';
    const description = document.getElementById('showcase-description')?.value || '';
    const skuList = Array.from(selectedProducts).map(p => p.sku).join(',');
    
    if (selectedProducts.size === 0) {
      showToast('Please select at least one product');
      return;
    }

    let code = '<div class="wp-block-product-showcase">\n';
    code += `<!-- data-product-skus="${skuList}" -->\n`;
    
    if (title) {
      code += `<!-- data-title="${title}" -->\n`;
    }
    
    if (description) {
      code += `<!-- data-description="${description}" -->\n`;
    }
    
    if (currentLayout !== 'grid') {
      code += `<!-- data-layout="${currentLayout}" -->\n`;
    }
    
    if (currentLayout === 'grid' && currentColumns !== 3) {
      code += `<!-- data-columns="${currentColumns}" -->\n`;
    }
    
    code += '</div>';

    document.getElementById('generated-code').textContent = code;
    document.getElementById('code-output').style.display = 'block';
  }

  function clearSelection() {
    selectedProducts.clear();
    document.querySelectorAll('.sku-checkbox').forEach(cb => cb.checked = false);
    updateSelectAllState();
    updateSelectedProductsDisplay();
    updateBuilderButton();
    document.getElementById('code-output').style.display = 'none';
    
    // Clear form inputs
    document.getElementById('showcase-title').value = '';
    document.getElementById('showcase-description').value = '';
    
    // Reset layout to grid
    document.querySelectorAll('.layout-btn').forEach(b => b.classList.remove('active'));
    document.querySelector('[data-layout="grid"]').classList.add('active');
    currentLayout = 'grid';
    currentColumns = 3;
    document.getElementById('showcase-columns').value = '3';
    document.getElementById('columns-control').style.display = 'block';
  }

  function exportFiltered() {
    const csvContent = [
      ['SKU', 'Product', 'Price', 'Brand', 'Category'],
      ...filteredSkus.map(sku => [
        sku.humanReadableSku,
        sku.title,
        sku.price.toFixed(2),
        sku.brand || '',
        sku.category
      ])
    ].map(row => row.map(cell => `"${cell}"`).join(',')).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `sku-reference-${new Date().toISOString().split('T')[0]}.csv`;
    a.click();
    URL.revokeObjectURL(url);
    
    showToast('CSV exported');
  }

  async function copyCode() {
    const code = document.getElementById('generated-code').textContent;
    await copyToClipboard(code);
    showToast('WordPress code copied!');
  }

  async function copyToClipboard(text) {
    try {
      await navigator.clipboard.writeText(text);
      return true;
    } catch (err) {
      console.error('Failed to copy:', err);
      return false;
    }
  }

  function showToast(message) {
    if (toastMessage) toastMessage.textContent = message;
    if (copyToast) {
      copyToast.classList.remove('translate-y-full');
      setTimeout(() => {
        copyToast.classList.add('translate-y-full');
      }, 3000);
    }
  }
</script>

<style>
.layout-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0.75rem;
  border: 2px solid var(--border-secondary);
  border-radius: 0.25rem;
  background-color: var(--surface-tertiary);
  color: var(--content-body);
  transition: all 0.2s;
  cursor: pointer;
  font-weight: 500;
  text-align: center;
}

.layout-btn:hover {
  border-color: var(--ui-accent);
  color: var(--ui-accent);
}

.layout-btn.active {
  border-color: var(--ui-accent);
  background-color: var(--ui-accent);
  color: white;
  font-weight: 600;
}

.product-row:hover {
  cursor: pointer;
}

.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
</style>