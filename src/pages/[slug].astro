---
import Layout from "@/layouts/Layout.astro";
import { fetchAPI } from "@/lib/strapi/client";
import type {
  StrapiResponse,
  Page,
  DynamicZoneComponent,
} from "@/lib/types/strapi";
import MediaBlock from "@/components/blocks/MediaBlock.astro";
import QuoteBlock from "@/components/blocks/QuoteBlock.astro";
import RichTextBlock from "@/components/blocks/RichTextBlock.astro";
import SliderBlock from "@/components/blocks/SliderBlock.astro";
import VideoBlock from "@/components/blocks/VideoBlock.astro";

const { slug } = Astro.params;

if (!slug) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

let page: Page | null = null;

try {
  const response = await fetchAPI<StrapiResponse<Page[]>>("pages", {
    params: {
      "filters[slug][$eq]": slug,
      "populate[0]": "blocks",
      "populate[1]": "blocks.file",
      "populate[2]": "blocks.files",
      "populate[3]": "cover",
    },
  });

  if (!Array.isArray(response.data) || response.data.length === 0) {
    return new Response(null, {
      status: 404,
      statusText: "Page not found",
    });
  }

  page = response.data[0];
} catch (e) {
  return new Response(e instanceof Error ? e.message : "An error occurred", {
    status: 500,
  });
}

if (!page) {
  return new Response(null, {
    status: 404,
    statusText: "Page not found",
  });
}

function getImageUrl(path?: string): string {
  if (!path) return "";
  const baseUrl = import.meta.env.STRAPI_URL;
  return path.startsWith("http") ? path : `${baseUrl}${path}`;
}

const { title, blocks = [], cover } = page;
---

<Layout>
  <section class="py-16">
    <article class="px-4">
      <header class="mb-8">
        <h1
          class="font-display font-black text-5xl lg:text-6xl xl:text-7xl 2xl:text-8xl leading-[0.8] mb-4 text-content-heading"
        >
          {title}
        </h1>

        {
          cover?.url && (
            <img
              src={getImageUrl(cover.url)}
              alt={cover.alternativeText || title}
              class="w-full h-auto rounded-sm shadow-lg mb-8"
            />
          )
        }
      </header>

      <div class="prose prose-lg max-w-none text-content-body">
        {
          blocks.map((block: DynamicZoneComponent) => {
            switch (block.__component) {
              case "shared.media":
                return <MediaBlock block={block} />;
              case "shared.quote":
                return <QuoteBlock block={block} />;
              case "shared.rich-text":
                return <RichTextBlock block={block} />;
              case "shared.slider":
                return <SliderBlock block={block} />;
              case "shared.video":
                return <VideoBlock block={block} />;
              default:
                return null;
            }
          })
        }
      </div>
    </article>
  </section>
</Layout>
