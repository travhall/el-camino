---
// src/pages/cart.astro
import Layout from "@/layouts/Layout.astro";
---

<Layout title="Your Shopping Cart | El Camino">
  <section class="p-4">
    <h1
      class="font-display font-black text-4xl lg:text-5xl xl:text-6xl 2xl:text-7xl leading-[0.8] text-content-heading"
    >
      Cart
    </h1>

    <!-- Loading/Content Container -->
    <div
      id="cart-loading"
      class="text-center min-h-[50dvh] flex items-center justify-center py-12"
    >
      <p class="text-lg animate-pulse text-content-body">Loading cart...</p>
    </div>

    <!-- Cart Content -->
    <div id="cart-container" class="hidden"></div>

    <!-- Processing Indicator -->
    <div
      id="loading-overlay"
      class="fixed inset-0 bg-surface-primary/50 min-h-[50dvh] items-center justify-center hidden z-50"
    >
      <div class="bg-surface-secondary p-4">
        <p class="text-lg text-content-body">Processing...</p>
      </div>
    </div>
  </section>
</Layout>

<script>
  import { cart } from "@/lib/cart";
  import type { CartItem } from "@/lib/cart/types";
  import { MoneyUtils } from "@/lib/square/money";

  // Track UI update state
  let isUpdating = false;

  function setLoading(show: boolean): void {
    const overlay = document.getElementById("loading-overlay");
    if (overlay) {
      overlay.classList.toggle("hidden", !show);
      overlay.classList.toggle("flex", show);
    }
  }

  // Templates
  function createEmptyCart(): string {
    return `
      <div class="flex flex-col min-h-[50dvh] items-center justify-center" id="empty-cart">
        <p class="text-lg mb-6 text-content-body">Your cart is empty</p>
            <a
              href="/all-products"
              class="block text-center bg-ui-button-surface/0 hover:bg-ui-button-surface/10 border-ui-button-surface text-ui-button-surface font-sans font-semibold transition-all duration-300 border-2 rounded-[4px] py-2 px-4"
            >
              Continue Shopping
            </a>
      </div>
    `;
  }

  function createCartItem(item: CartItem): string {
    const itemKey = `${item.id}:${item.variationId}`;

    return `
    <div class="bg-surface-secondary p-4 flex gap-2 self-start" data-item-container="${itemKey}">
      ${
        item.image
          ? `<img src="${item.image}" alt="${item.title}" class="w-24 h-24 object-cover" />`
          : ""
      }
      <div class="flex-grow flex flex-col justify-between">
        <h3 class="font-display text-3xl mb-2 text-content-heading">
          ${item.title}
          ${item.variationName ? ` - ${item.variationName}` : ""}
        </h3>
        <div class="flex justify-between items-center">
          <div class="text-lg text-content-body">
            Quantity: ${item.quantity}
          </div>
          <span class="font-display text-3xl item-price text-content-emphasis">
            ${MoneyUtils.format(MoneyUtils.fromFloat(item.price * item.quantity))}
          </span>
          <button
            class="remove-btn p-2 bg-transparent text-sm hover:underline font-semibold transition-all duration-300"
            data-id="${itemKey}"
            aria-label="Remove item"
          >
            Remove
          </button>
        </div>
      </div>
    </div>
  `;
  }

  function createOrderSummary(total: number): string {
    return `
      <div class="md:col-span-1">
        <div class="bg-surface-secondary p-6 sticky top-4">
          <h2 class="font-display text-2xl mb-4 text-content-heading">Order Summary</h2>
          <div class="order-summary space-y-2 mb-4">
            <div class="flex justify-between text-content-body">
              <span>Subtotal</span>
              <span id="subtotal">${MoneyUtils.format(
                MoneyUtils.fromFloat(total)
              )}</span>
            </div>
            <div class="flex justify-between font-bold pt-2 border-t border-surface-secondary text-content-emphasis">
              <span>Total</span>
              <span id="total">${MoneyUtils.format(
                MoneyUtils.fromFloat(total)
              )}</span>
            </div>
          </div>
          <div class="space-y-3">
            <button
              type="button"
              id="checkout-button"
              class="w-full bg-ui-button-surface text-ui-button-text border-ui-button-border hover:bg-ui-button-surface/80 font-sans font-semibold transition-all duration-300 border-2 rounded-[4px] py-2 px-4"
            >
              Proceed to Checkout
            </button>
            <a
              href="/all-products"
              class="block w-full text-center bg-ui-button-surface/0 hover:bg-ui-button-surface/10 border-ui-button-surface text-ui-button-surface font-sans font-semibold transition-all duration-300 border-2 rounded-[4px] py-2 px-4"
            >
              Continue Shopping
            </a>
          </div>
        </div>
      </div>
    `;
  }

  // Cart Functions
  async function handleCheckout(): Promise<void> {
    try {
      const items = cart.getItems();
      if (items.length === 0) {
        window.showNotification("Your cart is empty", "error");
        return;
      }

      setLoading(true);

      // Load Square script dynamically only when needed for checkout
      if (window.loadSquareScript) {
        try {
          await window.loadSquareScript();
          console.log("Square script loaded for checkout");
        } catch (error) {
          console.error("Failed to load Square script:", error);
          // Continue anyway - the API might still work
        }
      }

      const response = await fetch("/api/create-checkout", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ items }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error?.message || "Checkout failed");
      }

      if (!data.checkoutUrl) {
        throw new Error("No checkout URL returned");
      }

      window.showNotification("Redirecting to checkout...", "success");
      window.location.href = data.checkoutUrl;
    } catch (error) {
      window.showNotification(
        error instanceof Error
          ? error.message
          : "Checkout failed. Please try again.",
        "error"
      );
    } finally {
      setLoading(false);
    }
  }

  function attachEventListeners(): void {
    document
      .querySelectorAll<HTMLButtonElement>(".remove-btn")
      .forEach((button) => {
        button.addEventListener("click", () => {
          const id = button.dataset.id;
          if (!id) return;
          cart.removeItem(id);
        });
      });

    document
      .getElementById("checkout-button")
      ?.addEventListener("click", handleCheckout);
    document
      .getElementById("clear-cart-button")
      ?.addEventListener("click", () => {
        if (confirm("Are you sure you want to clear your cart?")) {
          cart.clear();
          window.showNotification("Cart cleared successfully");
        }
      });
  }

  function updateDisplay(): void {
    if (isUpdating) return;
    isUpdating = true;

    try {
      const items = cart.getItems();
      const total = cart.getTotal();

      const cartLoading = document.getElementById("cart-loading");
      const cartContainer = document.getElementById("cart-container");

      if (!cartContainer) return;

      if (cartLoading) cartLoading.classList.add("hidden");
      cartContainer.classList.remove("hidden");

      if (items.length === 0) {
        cartContainer.innerHTML = createEmptyCart();
      } else {
        cartContainer.innerHTML = `
          <div class="grid md:grid-cols-3 gap-2 items-start">
            <div class="md:col-span-2 space-y-2 grid">
              <button
                type="button"
                id="clear-cart-button"
                class="font-semibold text-sm hover:underline transition-all duration-300 p-2 -my-1 justify-self-end"
              >
                Clear Cart
              </button>
              ${items.map(createCartItem).join("")}
            </div>
            ${createOrderSummary(total)}
          </div>
        `;
      }

      attachEventListeners();
    } catch (error) {
      // Silent failure
    } finally {
      isUpdating = false;
    }
  }

  // Event Handlers
  function handlePageLoad() {
    updateDisplay();
  }

  function handleCartUpdate() {
    updateDisplay();
  }

  // Add event listeners
  document.addEventListener("astro:page-load", handlePageLoad);
  window.addEventListener("cartUpdated", handleCartUpdate);

  // Cleanup
  if (import.meta.hot) {
    import.meta.hot.dispose(() => {
      document.removeEventListener("astro:page-load", handlePageLoad);
      window.removeEventListener("cartUpdated", handleCartUpdate);
    });
  }
</script>
