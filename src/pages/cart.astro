---
// src/pages/cart.astro - Refactored with CartItem
import Layout from "@/layouts/Layout.astro";
import Modal from "@/components/Modal.astro";
---

<Layout title="Your Shopping Cart | El Camino">
  <section class="p-1 pb-0">
    <h1
      class="font-display font-black p-3 pb-0 -mb-6 text-6xl lg:text-7xl xl:text-8xl 2xl:text-9xl leading-[0.8] text-content-heading"
    >
      Cart
    </h1>

    <!-- Loading/Content Container -->
    <div
      id="cart-loading"
      class="text-center min-h-[50dvh] flex items-center justify-center py-12"
    >
      <div
        class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-content-heading"
      >
      </div>
      <p class="mt-2 text-content-meta">Loading cart...</p>
    </div>

    <!-- Cart Content -->
    <div id="cart-container" class="hidden relative"></div>

    <!-- Processing Indicator -->
    <div
      id="loading-overlay"
      class="fixed inset-0 bg-surface-primary/50 min-h-[50dvh] items-center justify-center hidden z-50"
    >
      <div class="bg-surface-secondary p-4 rounded-sm">
        <div class="flex items-center justify-center">
          <div
            class="inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-content-heading mr-3"
          >
          </div>
          <p class="text-lg text-content-body">Processing...</p>
        </div>
      </div>
    </div>
  </section>

  <Modal />
</Layout>

<script>
  import { cart } from "@/lib/cart";
  import type { CartItem } from "@/lib/cart/types";
  import { MoneyUtils } from "@/lib/square/money";
  import {
    getItemKey,
    getStockStatus,
    validateQuantityChange,
  } from "@/lib/cart/cartHelpers";

  let isUpdating = false;
  let inventoryData: Record<string, number> = {};

  function setLoading(show: boolean): void {
    const overlay = document.getElementById("loading-overlay");
    if (overlay) {
      overlay.classList.toggle("hidden", !show);
      overlay.classList.toggle("flex", show);
    }
  }

  async function loadInventoryData(items: CartItem[]): Promise<void> {
    if (items.length === 0) {
      inventoryData = {};
      return;
    }

    try {
      const variationIds = items.map((item) => item.variationId);
      const response = await fetch("/api/cart-inventory", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ variationIds }),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const result = await response.json();
      if (result.success && result.inventory) {
        inventoryData = result.inventory;
      } else {
        throw new Error(result.error || "Failed to load inventory");
      }
    } catch (error) {
      console.error("Error loading inventory data:", error);
      inventoryData = {};
      items.forEach((item) => {
        inventoryData[item.variationId] = 99;
      });
    }
  }

  function canUpdateQuantity(itemKey: string, newQuantity: number): boolean {
    const validation = validateQuantityChange(
      cart,
      itemKey,
      newQuantity,
      inventoryData
    );
    return validation.valid;
  }

  function getCurrentCartQuantity(itemKey: string): number {
    const items = cart.getItems();
    const item = items.find((i) => getItemKey(i) === itemKey);
    return item?.quantity || 0;
  }

  function createEmptyCart(): string {
    return `
      <div class="flex flex-col min-h-[50dvh] items-center justify-center" id="empty-cart">
        <p class="text-lg mb-6 text-content-body">Your cart is empty</p>
        <a
          href="/all-products"
          class="block text-center bg-ui-button-surface/0 lg:hover:bg-ui-button-surface/10 border-ui-button-surface text-ui-button-surface font-sans font-semibold transition-all duration-300 border-2 rounded-[4px] py-2 px-4"
        >
          Continue Shopping
        </a>
      </div>
    `;
  }

  function createOrderSummary(total: number): string {
    return `
      <div class="md:col-span-1">
        <div class="bg-surface-secondary p-4 sticky top-4">
          <h2 class="font-display text-2xl mb-2 text-content-heading">Order Summary</h2>
          <div class="order-summary lg:space-y-2 mb-2">
            <div class="flex justify-between text-content-body">
              <span>Subtotal</span>
              <span class="font-display font-bold text-3xl text-content-caption" id="subtotal">${MoneyUtils.format(
                MoneyUtils.fromFloat(total)
              )}</span>
            </div>
          </div>
          <div class="space-y-2">
            <p class="italic my-4">Shipping &amp; taxes are calculated at checkout</p>
            <button
              type="button"
              id="checkout-button"
              class="w-full bg-ui-button-surface text-ui-button-text border-ui-button-border lg:hover:bg-ui-button-surface/80 font-sans font-semibold transition-all duration-300 border-2 rounded-[4px] py-2 px-4"
            >
              Proceed to Checkout
            </button>
            <a
              href="/all-products"
              class="block w-full text-center bg-ui-button-surface/0 lg:hover:bg-ui-button-surface/10 border-ui-button-surface text-ui-button-surface font-sans font-semibold transition-all duration-300 border-2 rounded-[4px] py-2 px-4"
            >
              Continue Shopping
            </a>
          </div>
        </div>
      </div>
    `;
  }

  // CartItem custom element for dynamic rendering
  class CartItemElement extends HTMLElement {
    static create(item: CartItem, inventory: number): string {
      const itemKey = getItemKey(item);
      const itemSubtotal = item.price * item.quantity;
      const { isOutOfStock } = getStockStatus(inventory);
      const canIncrement = !isOutOfStock && item.quantity < inventory;

      return `
        <cart-item-element data-item-container="${itemKey}">
          <div class="bg-surface-secondary p-4 flex gap-4 self-start">
            <div class="flex-shrink-0">
              <img 
                src="${item.image || "/images/placeholder.png"}"
                alt="${item.title}"
                class="w-16 h-16 lg:w-24 lg:h-24 object-cover rounded border border-border-secondary" 
                onerror="this.src='/images/placeholder.png'"
              />
            </div>
            <div class="flex-grow flex flex-col justify-between min-w-0">
              <div class="flex flex-row justify-between">
                <div class="flex flex-col mb-2 lg:mb-0">
                  <h3 class="font-display text-2xl text-content-heading leading-tight">
                    <a href="/product/${item.id}" class="lg:hover:text-content-emphasis transition-colors">
                      ${item.title}
                    </a>
                  </h3>
                  ${
                    item.variationName
                      ? `
                    <p class="text-content-meta text-sm mt-1">${item.variationName}</p>
                  `
                      : ""
                  }
                </div>
                <div>
                  <div class="text-right">
                    <div class="text-content-meta text-xs">
                      ${MoneyUtils.format(MoneyUtils.fromFloat(item.price))} each
                    </div>
                    <div class="font-display font-bold text-2xl text-content-emphasis">
                      ${MoneyUtils.format(MoneyUtils.fromFloat(itemSubtotal))}
                    </div>
                  </div>
                </div>
              </div>

              <div class="flex justify-between items-end gap-4">
                <div class="flex items-center gap-2">
                  <label for="quantity-${itemKey}" class="text-sm text-content-body hidden lg:block">Qty:</label>
                  <div class="flex items-center border border-border-primary rounded">
                    <button type="button" class="quantity-decrease px-2 py-1 lg:hover:bg-surface-primary transition-colors" data-item-key="${itemKey}" data-current-qty="${item.quantity}" data-inventory="${inventory}">âˆ’</button>
                    <input type="number" id="quantity-${itemKey}" class="quantity-input w-16 text-center py-1 border-0 bg-surface-primary text-content-body focus:ring-1 focus:ring-content-emphasis [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none" value="${item.quantity}" min="1" max="${inventory}" data-item-key="${itemKey}" data-inventory="${inventory}" />
                    <button type="button" class="quantity-increase px-2 py-1 lg:hover:bg-surface-primary transition-colors ${!canIncrement ? "opacity-50 cursor-not-allowed" : ""}" data-item-key="${itemKey}" data-inventory="${inventory}" ${!canIncrement ? "disabled" : ""}>+</button>
                  </div>
                  <div class="text-xs text-content-meta">
                    ${inventory} available
                  </div>
                </div>

                <div class="flex items-center gap-4">
                  <button type="button" class="remove-btn text-sm text-content-meta lg:hover:text-state-error-surface transition-colors font-medium" data-item-key="${itemKey}">
                    Remove
                  </button>
                </div>
              </div>
            </div>
          </div>
        </cart-item-element>
      `;
    }
  }

  if (!customElements.get("cart-item-element")) {
    customElements.define("cart-item-element", CartItemElement);
  }

  async function handleCheckout(): Promise<void> {
    try {
      const items = cart.getItems();
      if (items.length === 0) {
        window.showNotification("Your cart is empty", "error");
        return;
      }

      setLoading(true);

      const response = await fetch("/api/create-checkout", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ items }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error?.message || "Checkout failed");
      }

      if (!data.checkoutUrl) {
        throw new Error("No checkout URL returned");
      }

      window.showNotification("Redirecting to checkout...", "success");
      window.location.href = data.checkoutUrl;
    } catch (error) {
      window.showNotification(
        error instanceof Error
          ? error.message
          : "Checkout failed. Please try again.",
        "error"
      );
    } finally {
      setLoading(false);
    }
  }

  function handleClearCart(): void {
    const itemCount = cart.getItemCount();
    if (itemCount === 0) {
      window.showNotification("Cart is already empty", "info");
      return;
    }

    const items = cart.getItems();
    if (items.length === 1) {
      const item = items[0];
      window.showModal(
        "Remove Item",
        `Are you sure you want to remove "${item.title}" from your cart?`,
        () => {
          cart.clear();
          window.showNotification("Cart cleared successfully");
        },
        "Remove",
        "Cancel"
      );
    } else {
      window.showModal(
        "Clear Cart",
        `Are you sure you want to remove all ${itemCount} item${itemCount > 1 ? "s" : ""} from your cart?`,
        () => {
          cart.clear();
          window.showNotification("Cart cleared successfully");
        },
        "Clear Cart",
        "Cancel"
      );
    }
  }

  function attachEventListeners(): void {
    document
      .getElementById("checkout-button")
      ?.addEventListener("click", handleCheckout);
    document
      .getElementById("clear-cart-button")
      ?.addEventListener("click", handleClearCart);
  }

  async function updateDisplay(): Promise<void> {
    if (isUpdating) return;
    isUpdating = true;

    try {
      const items = cart.getItems();
      const total = cart.getTotal();

      await loadInventoryData(items);

      const cartLoading = document.getElementById("cart-loading");
      const cartContainer = document.getElementById("cart-container");

      if (!cartContainer) return;

      if (cartLoading) cartLoading.classList.add("hidden");
      cartContainer.classList.remove("hidden");

      if (items.length === 0) {
        cartContainer.innerHTML = createEmptyCart();
      } else {
        // Use CartItem elements
        const cartItemsHtml = items
          .map((item) => {
            const inventory = inventoryData[item.variationId] || 99;
            return CartItemElement.create(item, inventory);
          })
          .join("");

        cartContainer.innerHTML = `
          <div class="grid md:grid-cols-3 gap-1 items-start">
            <div class="md:col-span-2 space-y-1 grid">
              <button
                type="button"
                id="clear-cart-button"
                class="font-semibold text-sm lg:hover:underline transition-all duration-300 p-2 -my-1 justify-self-end"
              >
                Clear Cart
              </button>
              ${cartItemsHtml}
            </div>
            ${createOrderSummary(total)}
          </div>
        `;

        setupCartItemEventListeners();
      }

      attachEventListeners();
    } catch (error) {
      console.error("Error updating cart display:", error);
    } finally {
      isUpdating = false;
    }
  }

  function setupCartItemEventListeners() {
    function debounce<T extends (...args: any[]) => any>(
      func: T,
      wait: number
    ): (...args: Parameters<T>) => void {
      let timeout: number;
      return (...args: Parameters<T>) => {
        clearTimeout(timeout);
        timeout = window.setTimeout(() => func.apply(null, args), wait);
      };
    }

    async function updateQuantity(
      itemKey: string,
      newQuantity: number,
      bypassInventoryCheck = false
    ) {
      try {
        if (bypassInventoryCheck) {
          const items = cart.getItems();
          const item = items.find((i) => getItemKey(i) === itemKey);
          if (item) {
            const cartManager = cart as any;
            item.quantity = newQuantity;
            cartManager.items.set(itemKey, item);
            cartManager.saveCart();
            return { success: true };
          }
        } else {
          const result = await cart.updateQuantity(itemKey, newQuantity);
          if (!result.success && result.message) {
            window.showNotification(result.message, "error");
          } else if (result.message) {
            window.showNotification(result.message, "info");
          }
          return result;
        }
      } catch (error) {
        window.showNotification("Failed to update quantity", "error");
        return { success: false };
      }
    }

    const debouncedUpdateQuantity = debounce(updateQuantity, 500);

    function handleRemove(itemKey: string, itemTitle: string) {
      window.showModal(
        "Remove Item",
        `Are you sure you want to remove "${itemTitle}" from your cart?`,
        () => {
          cart.removeItem(itemKey);
          window.showNotification("Item removed from cart");
        },
        "Remove",
        "Cancel"
      );
    }

    // Quantity input changes
    document
      .querySelectorAll<HTMLInputElement>(".quantity-input")
      .forEach((input) => {
        input.addEventListener("change", async (e) => {
          const target = e.target as HTMLInputElement;
          const itemKey = target.dataset.itemKey!;
          const newQuantity = parseInt(target.value, 10);

          if (newQuantity < 1) {
            target.value = "1";
            return;
          }

          const validation = validateQuantityChange(
            cart,
            itemKey,
            newQuantity,
            inventoryData
          );
          if (validation.valid) {
            debouncedUpdateQuantity(itemKey, newQuantity, false);
          } else {
            window.showNotification(
              validation.message || "Cannot update quantity",
              "error"
            );
            const items = cart.getItems();
            const currentItem = items.find(
              (item) => getItemKey(item) === itemKey
            );
            target.value = currentItem?.quantity.toString() || "1";
          }
        });
      });

    // Quantity decrease buttons
    document.querySelectorAll(".quantity-decrease").forEach((button) => {
      button.addEventListener("click", async (e) => {
        const target = e.target as HTMLButtonElement;
        const itemKey = target.dataset.itemKey!;
        const currentQty = parseInt(target.dataset.currentQty || "1", 10);
        const input = document.querySelector(
          `input[data-item-key="${itemKey}"]`
        ) as HTMLInputElement;

        if (currentQty === 1) {
          const container = target.closest("[data-item-container]");
          const titleElement = container?.querySelector("h3 a");
          const itemTitle = titleElement?.textContent || "this item";
          handleRemove(itemKey, itemTitle);
          return;
        }

        const newQuantity = currentQty - 1;
        input.value = newQuantity.toString();
        target.dataset.currentQty = newQuantity.toString();
        debouncedUpdateQuantity(itemKey, newQuantity, true);
      });
    });

    // Quantity increase buttons
    document.querySelectorAll(".quantity-increase").forEach((button) => {
      button.addEventListener("click", async (e) => {
        const target = e.target as HTMLButtonElement;

        if (target.disabled) {
          window.showNotification(
            "Cannot add more items - inventory limit reached",
            "error"
          );
          return;
        }

        const itemKey = target.dataset.itemKey!;
        const input = document.querySelector(
          `input[data-item-key="${itemKey}"]`
        ) as HTMLInputElement;
        const currentQuantity = parseInt(input.value, 10);
        const newQuantity = currentQuantity + 1;

        const validation = validateQuantityChange(
          cart,
          itemKey,
          newQuantity,
          inventoryData
        );
        if (validation.valid) {
          input.value = newQuantity.toString();
          const decreaseBtn = document.querySelector(
            `button.quantity-decrease[data-item-key="${itemKey}"]`
          ) as HTMLButtonElement;
          if (decreaseBtn) {
            decreaseBtn.dataset.currentQty = newQuantity.toString();
          }
          debouncedUpdateQuantity(itemKey, newQuantity, false);
        } else {
          window.showNotification(
            validation.message || "Cannot add more items",
            "error"
          );
        }
      });
    });

    // Remove buttons
    document.querySelectorAll(".remove-btn").forEach((button) => {
      button.addEventListener("click", (e) => {
        const target = e.target as HTMLButtonElement;
        const itemKey = target.dataset.itemKey!;
        const container = target.closest("[data-item-container]");
        const titleElement = container?.querySelector("h3 a");
        const itemTitle = titleElement?.textContent || "this item";
        handleRemove(itemKey, itemTitle);
      });
    });
  }

  function handlePageLoad() {
    updateDisplay();
  }

  function handleCartUpdate() {
    updateDisplay();
  }

  document.addEventListener("astro:page-load", handlePageLoad);
  window.addEventListener("cartUpdated", handleCartUpdate);

  if (import.meta.hot) {
    import.meta.hot.dispose(() => {
      document.removeEventListener("astro:page-load", handlePageLoad);
      window.removeEventListener("cartUpdated", handleCartUpdate);
    });
  }
</script>
