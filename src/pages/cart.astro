---
import Layout from "@/layouts/Layout.astro";
import { Icon } from "astro-icon/components";
import Button from "@/components/Button.astro";
---

<Layout>
  <section class="max-w-7xl mx-auto px-4 py-8">
    <h1
      class="font-display font-black text-5xl lg:text-6xl 2xl:text-7xl leading-[0.8] mb-8 text-content-heading"
    >
      Shopping Cart
    </h1>

    <!-- Loading State -->
    <div id="cart-loading" class="text-center py-12">
      <p class="text-lg animate-pulse text-content-body">Loading cart...</p>
    </div>

    <!-- Cart Content - Initially Empty -->
    <div id="cart-container" class="hidden"></div>

    <!-- Loading Indicator -->
    <div
      id="loading-overlay"
      class="fixed inset-0 bg-surface-primary/50 items-center justify-center hidden z-50"
    >
      <div class="bg-surface-secondary p-4 rounded-lg">
        <p class="text-lg text-content-body">Processing...</p>
      </div>
    </div>

    <!-- Notification Container -->
    <div id="notification-container" class="fixed top-4 right-4 z-50 space-y-2">
    </div>
  </section>
</Layout>

<script>
  import { cart } from "@/lib/cart";

  function setLoading(show: boolean) {
    const overlay = document.getElementById("loading-overlay");
    if (overlay) {
      overlay.classList.toggle("hidden", !show);
      overlay.classList.toggle("flex", show);
    }
  }

  function showNotification(
    message: string,
    type: "success" | "error" = "success"
  ) {
    const container = document.getElementById("notification-container");
    if (!container) return;

    const notification = document.createElement("div");
    notification.className = `px-4 py-2 rounded-lg transition-all duration-300 ${
      type === "success"
        ? "bg-state-success-surface text-state-success-text"
        : "bg-state-error-surface text-state-error-text"
    }`;
    notification.textContent = message;

    container.appendChild(notification);

    setTimeout(() => {
      notification.style.opacity = "0";
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }

  function createEmptyCart() {
    return `
      <div class="flex flex-col items-center" id="empty-cart">
        <p class="text-lg mb-6 text-content-body">Your cart is empty</p>
        <a href="/" class="inline-block bg-ui-button-surface text-ui-button-text border-ui-button-border hover:bg-ui-button-surface/80 font-sans font-semibold transition-all duration-300 border-2 rounded-[4px] text-lg py-2 px-4 lg:text-xl lg:py-3 lg:px-5">
          Continue Shopping
        </a>
      </div>
    `;
  }

  function createCartItem(item: any) {
    return `
    <button
      type="button"
      id="clear-cart-button"
      class="w-full mb-4 bg-transparent hover:bg-state-error-surface/10 border-state-error-text text-state-error-text font-sans font-semibold transition-all duration-300 border-2 rounded-[4px] text-lg py-2 px-4"
    >
      Clear Cart
    </button>
      <div
        class="bg-surface-secondary rounded-lg p-4 flex gap-4"
        data-item-container="${item.id}"
      >
        ${
          item.image
            ? `
          <img
            src="${item.image}"
            alt="${item.title}"
            class="w-24 h-24 object-cover rounded-sm"
          />
        `
            : ""
        }
        <div class="flex-grow">
          <h3 class="font-display text-lg mb-2 text-content-heading">${item.title}</h3>
          <div class="flex justify-between items-center">
            <div class="flex items-center gap-2">
              <button
                class="quantity-btn decrease p-1 bg-transparent hover:bg-ui-button-surface/10 border-ui-button-text rounded font-sans font-semibold transition-all duration-300 border-2"
                data-id="${item.id}"
                aria-label="Decrease quantity"
              >
                <Icon class="h-5 w-5 m-1 inline-block text-content-body" name="uil:minus" />
              </button>
              <span
                class="quantity-display w-8 text-center text-content-body"
                data-quantity-display="${item.id}"
              >
                ${item.quantity}
              </span>
              <button
                class="quantity-btn increase p-1 bg-transparent hover:bg-ui-button-surface/10 border-ui-button-text rounded font-sans font-semibold transition-all duration-300 border-2"
                data-id="${item.id}"
                aria-label="Increase quantity"
              >
                <Icon class="h-5 w-5 m-1 inline-block text-content-body" name="uil:plus" />
              </button>
            </div>
            <span
              class="font-display item-price text-content-emphasis"
              data-price-display="${item.id}"
            >
              ${(item.price * item.quantity).toFixed(2)}
            </span>
            <button
              class="remove-btn p-2 bg-transparent hover:bg-state-error-surface/10 border-ui-button-text rounded font-sans font-semibold transition-all duration-300 border-2 text-state-error-text"
              data-id="${item.id}"
              aria-label="Remove item"
            >
              Remove Item
            </button>
          </div>
        </div>
      </div>
    `;
  }

  function updateDisplay() {
    console.log("Updating cart display");
    const items = cart.getItems();
    const total = cart.getTotal();
    console.log("Cart state:", { items, total });

    const cartLoading = document.getElementById("cart-loading");
    const cartContainer = document.getElementById("cart-container");

    if (!cartContainer) {
      console.error("Cart container not found");
      return;
    }

    if (cartLoading) cartLoading.classList.add("hidden");
    cartContainer.classList.remove("hidden");

    if (items.length === 0) {
      cartContainer.innerHTML = createEmptyCart();
      return;
    }

    cartContainer.innerHTML = `
      <div class="grid md:grid-cols-3 gap-8" id="cart-content">
        <div class="md:col-span-2 space-y-4" id="cart-items">
          ${items.map((item) => createCartItem(item)).join("")}
        </div>
        <div class="md:col-span-1">
          <div class="bg-surface-secondary rounded-lg p-6 sticky top-4">
            <h2 class="font-display text-xl mb-4 text-content-heading">Order Summary</h2>
            <div class="space-y-2 mb-4">
              <div class="flex justify-between text-content-body">
                <span>Subtotal</span>
                <span id="subtotal">$${total.toFixed(2)}</span>
              </div>
              <div class="flex justify-between font-bold pt-2 border-t border-surface-secondary text-content-emphasis">
                <span>Total</span>
                <span id="total">$${total.toFixed(2)}</span>
              </div>
            </div>
            <div class="space-y-3">
              <button
                type="button"
                id="checkout-button"
                class="w-full bg-ui-button-surface text-ui-button-text border-ui-button-border hover:bg-ui-button-surface/80 font-sans font-semibold transition-all duration-300 border-2 rounded-[4px] text-lg py-2 px-4 lg:text-xl lg:py-3 lg:px-5"
              >
                Proceed to Checkout
              </button>
              <a
                href="/"
                class="block w-full text-center bg-transparent hover:bg-ui-button-surface/10 border-ui-button-text font-sans font-semibold transition-all duration-300 border-2 rounded-[4px] py-1 px-3 lg:py-2 lg:px-4"
              >
                Continue Shopping
              </a>
            </div>
          </div>
        </div>
      </div>
    `;

    attachEventListeners();
  }

  async function handleCheckout() {
    try {
      const items = cart.getItems();
      if (items.length === 0) {
        showNotification("Your cart is empty", "error");
        return;
      }

      setLoading(true);
      console.log("Starting checkout with items:", items);

      const response = await fetch("/api/create-checkout", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ items }),
      });

      const data = await response.json();
      console.log("Checkout response:", data);

      if (!response.ok) {
        throw new Error(
          data.error?.message ||
            `Checkout failed with status: ${response.status}`
        );
      }

      if (!data.checkoutUrl) {
        throw new Error("No checkout URL returned");
      }

      showNotification("Redirecting to checkout...", "success");

      setTimeout(() => {
        window.location.href = data.checkoutUrl;
      }, 1000);
    } catch (error) {
      console.error("Checkout error:", error);
      showNotification(
        error instanceof Error
          ? error.message
          : "Checkout failed. Please try again.",
        "error"
      );
    } finally {
      setLoading(false);
    }
  }

  function attachEventListeners() {
    document
      .querySelectorAll<HTMLButtonElement>(".quantity-btn")
      .forEach((button) => {
        button.addEventListener("click", () => {
          const id = button.dataset.id;
          if (!id) return;

          const currentQuantity =
            cart.getItems().find((item) => item.id === id)?.quantity || 0;
          const newQuantity = button.classList.contains("decrease")
            ? Math.max(0, currentQuantity - 1)
            : currentQuantity + 1;

          if (newQuantity === 0) {
            cart.removeItem(id);
          } else {
            cart.updateQuantity(id, newQuantity);
          }
        });
      });

    document
      .querySelectorAll<HTMLButtonElement>(".remove-btn")
      .forEach((button) => {
        button.addEventListener("click", () => {
          const id = button.dataset.id;
          if (!id) return;
          cart.removeItem(id);
        });
      });

    document
      .getElementById("checkout-button")
      ?.addEventListener("click", handleCheckout);
    document
      .getElementById("clear-cart-button")
      ?.addEventListener("click", () => {
        if (confirm("Are you sure you want to clear your cart?")) {
          cart.clear();
          showNotification("Cart cleared successfully");
        }
      });
  }

  document.addEventListener("DOMContentLoaded", () => {
    console.log("DOM Content Loaded - Setting up cart");
    cart.forceRefresh();
    updateDisplay();

    window.addEventListener("cartUpdated", () => {
      console.log("Cart update event received");
      updateDisplay();
    });
  });
</script>
