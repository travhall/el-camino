---
// src/pages/cart.astro
import Layout from "@/layouts/Layout.astro";
---

<Layout title="Your Shopping Cart | El Camino">
  <section class="p-1 pb-0">
    <h1
      class="font-display font-black text-6xl lg:text-7xl xl:text-8xl 2xl:text-9xl leading-[0.8] text-(--content-heading) p-3 pb-0 -mb-4"
    >
      Cart
    </h1>

    <!-- Loading/Content Container -->
    <div
      id="cart-loading"
      class="text-center min-h-[50dvh] flex items-center justify-center py-12"
    >
      <div
        class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-(--content-heading)"
      >
      </div>
      <p class="mt-2 text-(--content-meta)">Loading cart...</p>
    </div>

    <!-- Cart Content -->
    <div id="cart-container" class="hidden relative"></div>

    <!-- Processing Indicator -->
    <div
      id="loading-overlay"
      class="fixed inset-0 bg-(--surface-primary)/50 min-h-[50dvh] items-center justify-center hidden z-50"
    >
      <div class="bg-(--surface-secondary) p-4 rounded-sm">
        <div class="flex items-center justify-center">
          <div
            class="inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-(--content-heading) mr-3"
          >
          </div>
          <p class="text-lg text-(--content-body)">Processing...</p>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
  import { cart } from "@/lib/cart";
  import type { CartItem } from "@/lib/cart/types";
  import { MoneyUtils } from "@/lib/square/money";

  let isUpdating = false;
  let inventoryData: Record<string, number> = {};

  function setLoading(show: boolean): void {
    const overlay = document.getElementById("loading-overlay");
    if (overlay) {
      overlay.classList.toggle("hidden", !show);
      overlay.classList.toggle("flex", show);
    }
  }

  function showNotification(
    message: string,
    type: "success" | "error" = "success"
  ): void {
    // Use existing system if available
    if (typeof window !== "undefined" && (window as any).showNotification) {
      (window as any).showNotification(message, type);
      return;
    }

    // Fallback (should not be needed but kept for safety)
    // const notification = document.createElement("div");
    // notification.className = `fixed top-4 right-4 z-70 px-4 py-2 rounded-sm text-white transform translate-x-full transition-transform duration-300 ${
    //   type === "success" ? "bg-green-600" : "bg-red-600"
    // }`;
    // notification.textContent = message;

    // document.body.appendChild(notification);
    // requestAnimationFrame(() =>
    //   notification.classList.remove("translate-x-full")
    // );

    // setTimeout(() => {
    //   notification.classList.add("translate-x-full");
    //   setTimeout(() => notification.remove(), 300);
    // }, 3000);
  }

  function showConfirmModal(
    title: string,
    message: string,
    onConfirm: () => void
  ): void {
    // Use existing modal system if available
    if (typeof window !== "undefined" && (window as any).showModal) {
      (window as any).showModal(title, message, onConfirm, "Remove", "Cancel");
      return;
    }

    // Fallback
    if (confirm(`${title}\n\n${message}`)) {
      onConfirm();
    }
  }

  async function loadInventoryData(items: CartItem[]): Promise<void> {
    if (items.length === 0) {
      inventoryData = {};
      return;
    }

    try {
      const variationIds = items.map((item) => item.variationId);
      const response = await fetch("/api/cart-inventory", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ variationIds }),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const result = await response.json();
      if (result.success && result.inventory) {
        inventoryData = result.inventory;
      } else {
        throw new Error(result.error || "Failed to load inventory");
      }
    } catch (error) {
      console.error("Error loading inventory data:", error);
      inventoryData = {};
      items.forEach((item) => {
        inventoryData[item.variationId] = 99;
      });
    }
  }

  function createEmptyCart(): string {
    return `
      <div class="flex flex-col min-h-[50dvh] items-center justify-center" id="empty-cart">
        <p class="text-lg mb-6 text-(--content-body)">Your cart is empty</p>
        <a
          href="/shop/all"
          class="block text-center bg-(--ui-button-surface)/0 hover:bg-(--ui-button-surface)/10 border-(--ui-button-surface) text-(--ui-button-surface) font-sans font-semibold transition-all duration-300 border-2 rounded-[4px] py-2 px-4"
        >
          Continue Shopping
        </a>
      </div>
    `;
  }

  function createOrderSummary(total: number): string {
    return `
      <div class="md:col-span-1">
        <div class="bg-(--surface-secondary) p-4 sticky top-4">
          <h2 class="font-display text-2xl mb-2 text-(--content-heading)">Order Summary</h2>
          <div class="order-summary lg:space-y-2 mb-2">
            <div class="flex justify-between text-(--content-body)">
              <span>Subtotal</span>
              <span class="font-display font-bold text-3xl text-(--content-caption)" id="subtotal">${MoneyUtils.format(MoneyUtils.fromFloat(total))}</span>
            </div>
          </div>
          <div class="space-y-2">
            <p class="italic my-4">Shipping &amp; taxes are calculated at checkout</p>
            <button
              type="button"
              id="checkout-button"
              class="w-full block text-center font-sans font-semibold text-sm lg:text-base py-2 px-3 lg:py-2 lg:px-4 border-2 rounded-[4px] text-(--ui-button-text) bg-(--ui-button-surface) border-(--ui-button-border) hover:bg-(--ui-button-surface)/75 outline-0 focus-visible:ring focus-visible:ring-offset-2 focus-visible:ring-(--ui-button-ring) transition-all ease-in-out duration-300"
            >
              Proceed to Checkout
            </button>
            <a
              href="/shop/all"
              class="w-full block text-center font-sans font-semibold text-sm lg:text-base py-2 px-3 lg:py-2 lg:px-4 border-2 rounded-[4px] text-(--ui-button-surface) bg-(--ui-button-surface) border-(--ui-button-border) bg-(--ui-button-surface)/0 hover:bg-(--ui-button-surface)/20 outline-0 focus-visible:ring focus-visible:ring-offset-2 focus-visible:ring-(--ui-button-ring) transition-all ease-in-out duration-300"
            >
              Continue Shopping
            </a>
          </div>
        </div>
      </div>
    `;
  }

  function createCartItem(item: CartItem): string {
    const itemKey = `${item.id}:${item.variationId}`;
    const itemSubtotal = item.price * item.quantity;
    const inventory = inventoryData[item.variationId] || 999;
    const isOutOfStock = inventory <= 0;
    const canIncrement = !isOutOfStock && item.quantity < inventory;

    return `
      <div class="bg-(--surface-secondary) p-4 flex gap-4 self-start" data-item-container="${itemKey}">
        <div class="shrink-0">
          <img 
            src="${item.image || "data:image/svg+xml,%3Csvg%20width%3D%2248%22%20height%3D%2244%22%20fill%3D%22currentColor%22%3E%3Cpath%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%20d%3D%22M10.6848%2043.9997L10.5924%2044C8.15681%2044%206.34269%2043.4765%205.98588%2043.3736C3.89592%2042.7665%202.69408%2041.6367%202.46029%2041.4172C2.22808%2041.1939%201.04087%2040.0543%200.394889%2037.99C-0.250828%2035.9248%200.0772527%2033.5182%200.130018%2033.1324C0.501462%2030.4075%201.41988%2028.7811%201.61449%2028.4368C2.74136%2026.4667%204.18482%2025.404%204.46431%2025.1986C4.74773%2024.9897%206.20294%2023.9167%208.45877%2023.3094C8.84197%2023.207%2010.7284%2022.7023%2013.3855%2022.7023C15.0189%2022.7023%2016.0663%2022.835%2016.2978%2022.8643C17.5905%2023.0262%2018.4266%2023.2256%2018.609%2023.2689C19.6282%2023.5121%2020.2504%2023.7659%2020.3883%2023.8222L21.7626%2024.4025C21.4805%2026.4713%2021.1984%2028.5402%2020.9163%2030.6092H16.7502C16.1771%2029.638%2015.5068%2029.258%2015.3673%2029.1789C14.5719%2028.7202%2013.8003%2028.7202%2013.6585%2028.7202C13.532%2028.7202%2012.8834%2028.7202%2012.1095%2029.0172C11.9862%2029.0653%2011.3491%2029.3141%2010.7044%2029.8806C10.5973%2029.9746%2010.0595%2030.4475%209.60157%2031.2702C9.52426%2031.4072%209.14498%2032.0802%209.00157%2033.1324C8.97362%2033.3364%208.76491%2034.8681%208.95534%2035.7051C9.1455%2036.5413%209.5684%2036.9907%209.65356%2037.0814C9.73897%2037.17%2010.1749%2037.621%2010.9844%2037.8774L11.9475%2038.0788L13.461%2038.1216C13.6869%2038.1132%2014.9172%2038.0674%2016.2769%2037.8968C21.9175%2036.9146%2023.2285%2031.5305%2023.8883%2030.093L24.0205%2029.7727C24.6673%2028.2754%2025.4694%2027.3065%2025.6288%2027.1145L25.6327%2027.1096C25.9145%2026.7511%2027.3789%2024.8884%2030.3405%2023.8202L30.5158%2023.7547C30.7535%2023.6669%2031.9742%2023.2149%2033.5866%2022.9587C33.8515%2022.917%2035.2132%2022.7023%2036.9296%2022.7023H36.9432C38.6518%2022.7033%2039.9445%2022.9162%2040.2026%2022.9587C41.7597%2023.2151%2042.85%2023.6643%2043.0697%2023.7547C44.3804%2024.2946%2045.2221%2024.9938%2045.3874%2025.1311C45.5491%2025.2635%2046.4085%2025.9676%2047.0529%2027.128C47.6505%2028.2043%2047.8569%2029.5662%2047.8903%2029.7862C47.9311%2030.0507%2048.1202%2031.2807%2047.8817%2033.1324C47.5011%2036.0868%2046.4767%2037.7766%2046.2575%2038.1382C45.0053%2040.2163%2043.4393%2041.324%2043.1363%2041.5384C42.8367%2041.7505%2041.2678%2042.8607%2038.9342%2043.4276C38.5499%2043.5187%2036.5213%2044%2034.0255%2044C33.7661%2044%2032.4874%2044%2030.7893%2043.7785C29.2528%2043.576%2028.1605%2043.1141%2027.9442%2043.0227C26.6493%2042.4696%2025.7967%2041.7459%2025.6319%2041.6059L24.825%2040.7882C20.8256%2043.1895%2014.9423%2043.7247%2014.0492%2043.8062C13.7818%2043.8312%2012.0807%2043.9906%2010.6976%2043.9997L10.6846%2044L10.6848%2043.9997ZM34.5625%2029.0979C33.9377%2029.3141%2033.5626%2029.6171%2033.4868%2029.6782C33.0496%2030.0426%2032.8233%2030.4269%2032.7795%2030.5012L32.3344%2031.4322L32.0985%2032.3499L31.9778%2033.1324L31.8851%2033.9149L31.8689%2034.8459L32.0583%2035.7906C32.0807%2035.865%2032.2014%2036.2625%2032.5376%2036.6406C32.5979%2036.703%2032.8892%2037.0047%2033.4531%2037.2342C33.5631%2037.2777%2034.0307%2037.4636%2034.9167%2037.4636C35.8025%2037.4636%2036.3142%2037.2762%2036.4289%2037.2342C37.0688%2037.005%2037.4434%2036.7027%2037.5205%2036.6406C37.9732%2036.2627%2038.2009%2035.8675%2038.2453%2035.7906C38.5316%2035.3172%2038.6656%2034.9248%2038.6925%2034.8459L38.9302%2033.9149L39.0645%2033.1324L39.1436%2032.3499L39.158%2031.4322C39.1528%2031.3565%2039.1256%2030.9611%2038.9665%2030.5012C38.9433%2030.4281%2038.8213%2030.0423%2038.4697%2029.6782C38.4091%2029.6153%2038.1176%2029.3138%2037.5382%2029.0979C37.4298%2029.0538%2036.9743%2028.8687%2036.0888%2028.8687C35.2027%2028.8687%2034.6785%2029.0564%2034.5625%2029.0979ZM14.6691%2017.1565C18.2255%2017.1565%2020.2342%2015.9174%2020.6428%2015.28H23.018C22.7445%2017.2861%2022.471%2019.2919%2022.1975%2021.2977H3.18072C3.45421%2019.2919%203.7277%2017.2861%204.00119%2015.28L5.86912%2014.9334C6.25728%2012.0863%206.64544%209.23915%207.0336%206.39226L5.26049%206.04544C5.53502%204.03046%205.80982%202.01523%206.08462%200H25.1014C24.8279%202.00607%2024.5544%204.01187%2024.2809%206.01794H21.9909C21.6766%205.48319%2019.6622%204.14123%2016.4438%204.14123C16.2178%205.79742%2015.9921%207.45361%2015.7662%209.1098C17.2295%208.80932%2018.6928%208.5091%2020.1561%208.20862C19.933%209.84469%2019.71%2011.4808%2019.4869%2013.1171C18.1056%2012.8166%2016.7241%2012.5161%2015.3428%2012.2157C15.1181%2013.8627%2014.8935%2015.5097%2014.6691%2017.1565ZM36.497%2016.0893C37.1229%2016.0979%2042.4485%2016.1718%2044.0782%2014.1986H46.4733C46.1507%2016.5649%2045.8281%2018.9313%2045.5055%2021.2977H23.6344C23.9079%2019.2919%2024.1814%2017.2861%2024.4549%2015.28L26.3228%2014.9334C26.711%2012.0863%2027.0991%209.23915%2027.4873%206.39226L25.7179%206.01769C25.9913%204.01187%2026.2648%202.00607%2026.5383%200H40.5116C40.2381%202.00607%2039.9646%204.01187%2039.6911%206.01769L37.8193%206.39226C37.3786%209.62443%2036.9377%2012.8568%2036.497%2016.0893Z%22%2F%3E%3C%2Fsvg%3E"}"
            alt="${item.title}"
            class="w-16 h-16 lg:w-24 lg:h-24 object-cover rounded border border-(--border-secondary)" 
            onerror="this.src='data:image/svg+xml,%3Csvg%20width%3D%2248%22%20height%3D%2244%22%20fill%3D%22currentColor%22%3E%3Cpath%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%20d%3D%22M10.6848%2043.9997L10.5924%2044C8.15681%2044%206.34269%2043.4765%205.98588%2043.3736C3.89592%2042.7665%202.69408%2041.6367%202.46029%2041.4172C2.22808%2041.1939%201.04087%2040.0543%200.394889%2037.99C-0.250828%2035.9248%200.0772527%2033.5182%200.130018%2033.1324C0.501462%2030.4075%201.41988%2028.7811%201.61449%2028.4368C2.74136%2026.4667%204.18482%2025.404%204.46431%2025.1986C4.74773%2024.9897%206.20294%2023.9167%208.45877%2023.3094C8.84197%2023.207%2010.7284%2022.7023%2013.3855%2022.7023C15.0189%2022.7023%2016.0663%2022.835%2016.2978%2022.8643C17.5905%2023.0262%2018.4266%2023.2256%2018.609%2023.2689C19.6282%2023.5121%2020.2504%2023.7659%2020.3883%2023.8222L21.7626%2024.4025C21.4805%2026.4713%2021.1984%2028.5402%2020.9163%2030.6092H16.7502C16.1771%2029.638%2015.5068%2029.258%2015.3673%2029.1789C14.5719%2028.7202%2013.8003%2028.7202%2013.6585%2028.7202C13.532%2028.7202%2012.8834%2028.7202%2012.1095%2029.0172C11.9862%2029.0653%2011.3491%2029.3141%2010.7044%2029.8806C10.5973%2029.9746%2010.0595%2030.4475%209.60157%2031.2702C9.52426%2031.4072%209.14498%2032.0802%209.00157%2033.1324C8.97362%2033.3364%208.76491%2034.8681%208.95534%2035.7051C9.1455%2036.5413%209.5684%2036.9907%209.65356%2037.0814C9.73897%2037.17%2010.1749%2037.621%2010.9844%2037.8774L11.9475%2038.0788L13.461%2038.1216C13.6869%2038.1132%2014.9172%2038.0674%2016.2769%2037.8968C21.9175%2036.9146%2023.2285%2031.5305%2023.8883%2030.093L24.0205%2029.7727C24.6673%2028.2754%2025.4694%2027.3065%2025.6288%2027.1145L25.6327%2027.1096C25.9145%2026.7511%2027.3789%2024.8884%2030.3405%2023.8202L30.5158%2023.7547C30.7535%2023.6669%2031.9742%2023.2149%2033.5866%2022.9587C33.8515%2022.917%2035.2132%2022.7023%2036.9296%2022.7023H36.9432C38.6518%2022.7033%2039.9445%2022.9162%2040.2026%2022.9587C41.7597%2023.2151%2042.85%2023.6643%2043.0697%2023.7547C44.3804%2024.2946%2045.2221%2024.9938%2045.3874%2025.1311C45.5491%2025.2635%2046.4085%2025.9676%2047.0529%2027.128C47.6505%2028.2043%2047.8569%2029.5662%2047.8903%2029.7862C47.9311%2030.0507%2048.1202%2031.2807%2047.8817%2033.1324C47.5011%2036.0868%2046.4767%2037.7766%2046.2575%2038.1382C45.0053%2040.2163%2043.4393%2041.324%2043.1363%2041.5384C42.8367%2041.7505%2041.2678%2042.8607%2038.9342%2043.4276C38.5499%2043.5187%2036.5213%2044%2034.0255%2044C33.7661%2044%2032.4874%2044%2030.7893%2043.7785C29.2528%2043.576%2028.1605%2043.1141%2027.9442%2043.0227C26.6493%2042.4696%2025.7967%2041.7459%2025.6319%2041.6059L24.825%2040.7882C20.8256%2043.1895%2014.9423%2043.7247%2014.0492%2043.8062C13.7818%2043.8312%2012.0807%2043.9906%2010.6976%2043.9997L10.6846%2044L10.6848%2043.9997ZM34.5625%2029.0979C33.9377%2029.3141%2033.5626%2029.6171%2033.4868%2029.6782C33.0496%2030.0426%2032.8233%2030.4269%2032.7795%2030.5012L32.3344%2031.4322L32.0985%2032.3499L31.9778%2033.1324L31.8851%2033.9149L31.8689%2034.8459L32.0583%2035.7906C32.0807%2035.865%2032.2014%2036.2625%2032.5376%2036.6406C32.5979%2036.703%2032.8892%2037.0047%2033.4531%2037.2342C33.5631%2037.2777%2034.0307%2037.4636%2034.9167%2037.4636C35.8025%2037.4636%2036.3142%2037.2762%2036.4289%2037.2342C37.0688%2037.005%2037.4434%2036.7027%2037.5205%2036.6406C37.9732%2036.2627%2038.2009%2035.8675%2038.2453%2035.7906C38.5316%2035.3172%2038.6656%2034.9248%2038.6925%2034.8459L38.9302%2033.9149L39.0645%2033.1324L39.1436%2032.3499L39.158%2031.4322C39.1528%2031.3565%2039.1256%2030.9611%2038.9665%2030.5012C38.9433%2030.4281%2038.8213%2030.0423%2038.4697%2029.6782C38.4091%2029.6153%2038.1176%2029.3138%2037.5382%2029.0979C37.4298%2029.0538%2036.9743%2028.8687%2036.0888%2028.8687C35.2027%2028.8687%2034.6785%2029.0564%2034.5625%2029.0979ZM14.6691%2017.1565C18.2255%2017.1565%2020.2342%2015.9174%2020.6428%2015.28H23.018C22.7445%2017.2861%2022.471%2019.2919%2022.1975%2021.2977H3.18072C3.45421%2019.2919%203.7277%2017.2861%204.00119%2015.28L5.86912%2014.9334C6.25728%2012.0863%206.64544%209.23915%207.0336%206.39226L5.26049%206.04544C5.53502%204.03046%205.80982%202.01523%206.08462%200H25.1014C24.8279%202.00607%2024.5544%204.01187%2024.2809%206.01794H21.9909C21.6766%205.48319%2019.6622%204.14123%2016.4438%204.14123C16.2178%205.79742%2015.9921%207.45361%2015.7662%209.1098C17.2295%208.80932%2018.6928%208.5091%2020.1561%208.20862C19.933%209.84469%2019.71%2011.4808%2019.4869%2013.1171C18.1056%2012.8166%2016.7241%2012.5161%2015.3428%2012.2157C15.1181%2013.8627%2014.8935%2015.5097%2014.6691%2017.1565ZM36.497%2016.0893C37.1229%2016.0979%2042.4485%2016.1718%2044.0782%2014.1986H46.4733C46.1507%2016.5649%2045.8281%2018.9313%2045.5055%2021.2977H23.6344C23.9079%2019.2919%2024.1814%2017.2861%2024.4549%2015.28L26.3228%2014.9334C26.711%2012.0863%2027.0991%209.23915%2027.4873%206.39226L25.7179%206.01769C25.9913%204.01187%2026.2648%202.00607%2026.5383%200H40.5116C40.2381%202.00607%2039.9646%204.01187%2039.6911%206.01769L37.8193%206.39226C37.3786%209.62443%2036.9377%2012.8568%2036.497%2016.0893Z%22%2F%3E%3C%2Fsvg%3E'"
          />
        </div>
        <div class="grow flex flex-col justify-between min-w-0">
          <div class="flex flex-row justify-between">
            <div class="flex flex-col mb-2 lg:mb-0">
              <h3 class="font-display text-2xl text-(--content-heading) leading-tight">
                <a href="/product/${item.id}" class="hover:text-(--content-emphasis) transition-colors">
                  ${item.title}
                </a>
              </h3>
              ${
                item.variationName
                  ? `
                <p class="text-(--content-meta) text-sm mt-1">${item.variationName}</p>
              `
                  : ""
              }
            </div>
            <div>
              <div class="text-right">
                <div class="text-(--content-meta) text-xs">
                  ${MoneyUtils.format(MoneyUtils.fromFloat(item.price))} each
                </div>
                <div class="font-display font-bold text-2xl text-(--content-emphasis)">
                  ${MoneyUtils.format(MoneyUtils.fromFloat(itemSubtotal))}
                </div>
              </div>
            </div>
          </div>

          <div class="flex justify-between items-end gap-4">
            <div class="flex items-center gap-2">
              <label for="quantity-${itemKey}" class="text-sm text-(--content-body) hidden lg:block">Qty:</label>
              <div class="flex items-center border border-(--border-primary) rounded">
                <button 
                  type="button" 
                  class="quantity-decrease px-2 py-1 hover:bg-(--surface-primary) transition-colors ${item.quantity <= 1 ? "opacity-50 cursor-not-allowed" : ""}" 
                  data-item-key="${itemKey}"
                  data-action="decrease"
                  ${item.quantity <= 1 ? "disabled" : ""}
                >
                  −
                </button>
                <input 
                  type="number" 
                  id="quantity-${itemKey}" 
                  class="quantity-input w-16 text-center py-1 border-0 bg-(--surface-primary) text-(--content-body) focus:ring-1 focus:ring-(--content-emphasis) [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none" 
                  value="${item.quantity}" 
                  min="1" 
                  max="${inventory}" 
                  data-item-key="${itemKey}"
                />
                <button 
                  type="button" 
                  class="quantity-increase px-2 py-1 hover:bg-(--surface-primary) transition-colors ${!canIncrement ? "opacity-50 cursor-not-allowed" : ""}" 
                  data-item-key="${itemKey}"
                  data-action="increase"
                  ${!canIncrement ? "disabled" : ""}
                >
                  +
                </button>
              </div>
              <div class="text-xs text-(--content-meta)">
                ${inventory} available
              </div>
            </div>

            <div class="flex items-center gap-4">
              <button 
                type="button" 
                class="remove-btn text-sm relative font-semibold hover:text-ui-nav-hover before:absolute before:-bottom-0.5 before:left-0 before:w-full before:h-0.5 before:bg-(--ui-nav-hover) before:transform before:scale-x-0 before:origin-right before:transition-transform before:duration-300 before:ease-in-out hover:before:scale-x-100 hover:before:origin-left" 
                data-item-key="${itemKey}"
                data-item-title="${item.title}"
                data-action="remove"
              >
                Remove
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  async function handleCheckout(): Promise<void> {
    try {
      const items = cart.getItems();
      if (items.length === 0) {
        showNotification("Your cart is empty", "error");
        return;
      }

      setLoading(true);

      const response = await fetch("/api/create-checkout", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ items }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error?.message || "Checkout failed");
      }

      if (!data.checkoutUrl) {
        throw new Error("No checkout URL returned");
      }

      showNotification("Redirecting to checkout...", "success");
      window.location.href = data.checkoutUrl;
    } catch (error) {
      showNotification(
        error instanceof Error
          ? error.message
          : "Checkout failed. Please try again.",
        "error"
      );
    } finally {
      setLoading(false);
    }
  }

  function handleClearCart(): void {
    const itemCount = cart.getItemCount();
    if (itemCount === 0) {
      showNotification("Cart is already empty", "error");
      return;
    }

    const items = cart.getItems();
    if (items.length === 1) {
      const item = items[0];
      showConfirmModal(
        "Remove Item",
        `Are you sure you want to remove "${item.title}" from your cart?`,
        () => {
          cart.clear();
          showNotification("Cart cleared successfully");
        }
      );
    } else {
      showConfirmModal(
        "Clear Cart",
        `Are you sure you want to remove all ${itemCount} item${itemCount > 1 ? "s" : ""} from your cart?`,
        () => {
          cart.clear();
          showNotification("Cart cleared successfully");
        }
      );
    }
  }

  function attachEventListeners(): void {
    const checkoutButton = document.getElementById("checkout-button");
    const clearCartButton = document.getElementById("clear-cart-button");

    if (checkoutButton) {
      checkoutButton.addEventListener("click", handleCheckout);
    }

    if (clearCartButton) {
      clearCartButton.addEventListener("click", handleClearCart);
    }
  }

  function setupCartItemEventListeners() {
    const cartContainer = document.getElementById("cart-container");
    if (!cartContainer) return;

    // Remove existing event listeners by cloning
    const newCartContainer = cartContainer.cloneNode(true) as HTMLElement;
    const parent = cartContainer.parentNode;
    if (parent) {
      parent.replaceChild(newCartContainer, cartContainer);
    }

    // Add single event listener using delegation - SAME PATTERN AS MINICART
    newCartContainer.addEventListener("click", async (e) => {
      const target = e.target as HTMLElement;
      const button = target.closest("button[data-action]") as HTMLButtonElement;
      if (!button || button.disabled) return;

      e.preventDefault();

      const action = button.dataset.action;
      const itemKey = button.dataset.itemKey;
      const itemTitle = button.dataset.itemTitle;

      if (!itemKey) return;

      try {
        switch (action) {
          case "increase":
            const items = cart.getItems();
            const item = items.find(
              (i: CartItem) => `${i.id}:${i.variationId}` === itemKey
            );
            if (item) {
              const newQty = item.quantity + 1;
              const inventory = inventoryData[item.variationId] || 999;

              if (newQty <= inventory) {
                await cart.updateQuantity(itemKey, newQty);
                await updateDisplay();
              } else {
                showNotification(`Only ${inventory} available`, "error");
              }
            }
            break;

          case "decrease":
            const currentItems = cart.getItems();
            const currentItem = currentItems.find(
              (i: CartItem) => `${i.id}:${i.variationId}` === itemKey
            );
            if (currentItem) {
              if (currentItem.quantity === 1) {
                showConfirmModal(
                  "Remove Item",
                  `Remove "${currentItem.title}" from your cart?`,
                  async () => {
                    cart.removeItem(itemKey);
                    await updateDisplay();
                    showNotification("Item removed from cart", "success");
                  }
                );
              } else {
                await cart.updateQuantity(itemKey, currentItem.quantity - 1);
                await updateDisplay();
              }
            }
            break;

          case "remove":
            if (itemTitle) {
              showConfirmModal(
                "Remove Item",
                `Remove "${itemTitle}" from your cart?`,
                async () => {
                  cart.removeItem(itemKey);
                  await updateDisplay();
                  showNotification("Item removed from cart", "success");
                }
              );
            }
            break;
        }
      } catch (error) {
        console.error("Error handling cart action:", error);
        showNotification("Error updating cart", "error");
      }
    });

    // Handle quantity input changes with debouncing
    let inputTimeout: number;
    newCartContainer.addEventListener("input", (e) => {
      const target = e.target as HTMLInputElement;
      if (!target.classList.contains("quantity-input")) return;

      const itemKey = target.dataset.itemKey;
      if (!itemKey) return;

      clearTimeout(inputTimeout);
      inputTimeout = window.setTimeout(async () => {
        const newQuantity = parseInt(target.value, 10);

        if (newQuantity < 1) {
          target.value = "1";
          return;
        }

        const inventory = inventoryData[itemKey.split(":")[1]] || 999;
        if (newQuantity > inventory) {
          target.value = inventory.toString();
          showNotification(`Only ${inventory} available`, "error");
          return;
        }

        try {
          await cart.updateQuantity(itemKey, newQuantity);
          await updateDisplay();
        } catch (error) {
          console.error("Error updating quantity:", error);
          showNotification("Error updating quantity", "error");
        }
      }, 500);
    });
  }

  async function updateDisplay(): Promise<void> {
    if (isUpdating) return;
    isUpdating = true;

    try {
      const items = cart.getItems();
      const total = cart.getTotal();

      await loadInventoryData(items);

      const cartLoading = document.getElementById("cart-loading");
      const cartContainer = document.getElementById("cart-container");

      if (!cartContainer) return;

      if (cartLoading) cartLoading.classList.add("hidden");
      cartContainer.classList.remove("hidden");

      if (items.length === 0) {
        cartContainer.innerHTML = createEmptyCart();
      } else {
        const cartItemsHtml = items.map(createCartItem).join("");

        cartContainer.innerHTML = `
          <div class="grid md:grid-cols-3 gap-1 items-start">
            <div class="md:col-span-2 space-y-1 grid">
              <button
                type="button"
                id="clear-cart-button"
                class="text-sm relative font-semibold hover:text-ui-nav-hover before:absolute before:-bottom-0.5 before:left-0 before:w-full before:h-0.5 before:bg-(--ui-nav-hover) before:transform before:scale-x-0 before:origin-right before:transition-transform before:duration-300 before:ease-in-out hover:before:scale-x-100 hover:before:origin-left -mt-1 mb-1 justify-self-end"
              >
                Clear Cart
              </button>
              ${cartItemsHtml}
            </div>
            ${createOrderSummary(total)}
          </div>
        `;

        setupCartItemEventListeners();
      }

      attachEventListeners();
    } catch (error) {
      console.error("Error updating cart display:", error);
    } finally {
      isUpdating = false;
    }
  }

  function handlePageLoad() {
    updateDisplay();
  }

  function handleCartUpdate() {
    updateDisplay();
  }

  document.addEventListener("astro:page-load", handlePageLoad);
  window.addEventListener("cartUpdated", handleCartUpdate);

  if (import.meta.hot) {
    import.meta.hot.dispose(() => {
      document.removeEventListener("astro:page-load", handlePageLoad);
      window.removeEventListener("cartUpdated", handleCartUpdate);
    });
  }
</script>
