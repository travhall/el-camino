---
// src/pages/cart.astro
import Layout from "@/layouts/Layout.astro";
---

<Layout title="Your Shopping Cart | El Camino">
  <section class="p-1 pb-0">
    <h1
      class="font-display font-black text-6xl lg:text-7xl xl:text-8xl 2xl:text-9xl leading-[0.8] text-(--content-heading) p-3 pb-0 -mb-4"
    >
      Cart
    </h1>

    <!-- Loading/Content Container -->
    <div
      id="cart-loading"
      class="text-center min-h-[50dvh] flex items-center justify-center py-12"
    >
      <div
        class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-(--content-heading)"
      >
      </div>
      <p class="mt-2 text-(--content-meta)">Loading cart...</p>
    </div>

    <!-- Cart Content -->
    <div id="cart-container" class="hidden relative"></div>

    <!-- Processing Indicator -->
    <div
      id="loading-overlay"
      class="fixed inset-0 bg-(--surface-primary)/50 min-h-[50dvh] items-center justify-center hidden z-50"
    >
      <div class="bg-(--surface-secondary) p-4 rounded-sm">
        <div class="flex items-center justify-center">
          <div
            class="inline-block animate-spin rounded-full h-6 w-6 border-b-2 border-(--content-heading) mr-3"
          >
          </div>
          <p class="text-lg text-(--content-body)">Processing...</p>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
  import { cart } from "@/lib/cart";
  import type { CartItem } from "@/lib/cart/types";
  import { MoneyUtils } from "@/lib/square/money";

  let isUpdating = false;
  let inventoryData: Record<string, number> = {};

  function setLoading(show: boolean): void {
    const overlay = document.getElementById("loading-overlay");
    if (overlay) {
      overlay.classList.toggle("hidden", !show);
      overlay.classList.toggle("flex", show);
    }
  }

  function showNotification(
    message: string,
    type: "success" | "error" = "success"
  ): void {
    // Use existing system if available
    if (typeof window !== "undefined" && (window as any).showNotification) {
      (window as any).showNotification(message, type);
      return;
    }

    // Fallback (should not be needed but kept for safety)
    // const notification = document.createElement("div");
    // notification.className = `fixed top-4 right-4 z-70 px-4 py-2 rounded-sm text-white transform translate-x-full transition-transform duration-300 ${
    //   type === "success" ? "bg-green-600" : "bg-red-600"
    // }`;
    // notification.textContent = message;

    // document.body.appendChild(notification);
    // requestAnimationFrame(() =>
    //   notification.classList.remove("translate-x-full")
    // );

    // setTimeout(() => {
    //   notification.classList.add("translate-x-full");
    //   setTimeout(() => notification.remove(), 300);
    // }, 3000);
  }

  function showConfirmModal(
    title: string,
    message: string,
    onConfirm: () => void
  ): void {
    // Use existing modal system if available
    if (typeof window !== "undefined" && (window as any).showModal) {
      (window as any).showModal(title, message, onConfirm, "Remove", "Cancel");
      return;
    }

    // Fallback
    if (confirm(`${title}\n\n${message}`)) {
      onConfirm();
    }
  }

  async function loadInventoryData(items: CartItem[]): Promise<void> {
    if (items.length === 0) {
      inventoryData = {};
      return;
    }

    try {
      const variationIds = items.map((item) => item.variationId);
      const response = await fetch("/api/cart-inventory", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ variationIds }),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const result = await response.json();
      if (result.success && result.inventory) {
        inventoryData = result.inventory;
      } else {
        throw new Error(result.error || "Failed to load inventory");
      }
    } catch (error) {
      console.error("Error loading inventory data:", error);
      inventoryData = {};
      items.forEach((item) => {
        inventoryData[item.variationId] = 99;
      });
    }
  }

  function createEmptyCart(): string {
    return `
      <div class="flex flex-col min-h-[50dvh] items-center justify-center" id="empty-cart">
        <p class="text-lg mb-6 text-(--content-body)">Your cart is empty</p>
        <a
          href="/shop/all"
          class="block text-center bg-(--ui-button-surface)/0 hover:bg-(--ui-button-surface)/10 border-(--ui-button-surface) text-(--ui-button-surface) font-sans font-semibold transition-all duration-300 border-2 rounded-[4px] py-2 px-4"
        >
          Continue Shopping
        </a>
      </div>
    `;
  }

  function createOrderSummary(total: number): string {
    return `
      <div class="md:col-span-1">
        <div class="bg-(--surface-secondary) p-4 sticky top-4">
          <h2 class="font-display text-2xl mb-2 text-(--content-heading)">Order Summary</h2>
          <div class="order-summary lg:space-y-2 mb-2">
            <div class="flex justify-between text-(--content-body)">
              <span>Subtotal</span>
              <span class="font-display font-bold text-3xl text-(--content-caption)" id="subtotal">${MoneyUtils.format(MoneyUtils.fromFloat(total))}</span>
            </div>
          </div>
          <div class="space-y-2">
            <p class="italic my-4">Shipping &amp; taxes are calculated at checkout</p>
            <button
              type="button"
              id="checkout-button"
              class="w-full block text-center font-sans font-semibold text-sm lg:text-base py-2 px-3 lg:py-2 lg:px-4 border-2 rounded-[4px] text-(--ui-button-text) bg-(--ui-button-surface) border-(--ui-button-border) hover:bg-(--ui-button-surface)/75 outline-0 focus-visible:ring focus-visible:ring-offset-2 focus-visible:ring-(--ui-button-ring) transition-all ease-in-out duration-300"
            >
              Proceed to Checkout
            </button>
            <a
              href="/shop/all"
              class="w-full block text-center font-sans font-semibold text-sm lg:text-base py-2 px-3 lg:py-2 lg:px-4 border-2 rounded-[4px] text-(--ui-button-surface) bg-(--ui-button-surface) border-(--ui-button-border) bg-(--ui-button-surface)/0 hover:bg-(--ui-button-surface)/20 outline-0 focus-visible:ring focus-visible:ring-offset-2 focus-visible:ring-(--ui-button-ring) transition-all ease-in-out duration-300"
            >
              Continue Shopping
            </a>
          </div>
        </div>
      </div>
    `;
  }

  function createCartItem(item: CartItem): string {
    const itemKey = `${item.id}:${item.variationId}`;
    const itemSubtotal = item.price * item.quantity;
    const inventory = inventoryData[item.variationId] || 999;
    const isOutOfStock = inventory <= 0;
    const canIncrement = !isOutOfStock && item.quantity < inventory;

    return `
      <div class="bg-(--surface-secondary) p-4 flex gap-4 self-start" data-item-container="${itemKey}">
        <div class="shrink-0">
          <img 
            src="${item.image || "/images/placeholder.png"}"
            alt="${item.title}"
            class="w-16 h-16 lg:w-24 lg:h-24 object-cover rounded border border-(--border-secondary)" 
            onerror="this.src='/images/placeholder.png'"
          />
        </div>
        <div class="grow flex flex-col justify-between min-w-0">
          <div class="flex flex-row justify-between">
            <div class="flex flex-col mb-2 lg:mb-0">
              <h3 class="font-display text-2xl text-(--content-heading) leading-tight">
                <a href="/product/${item.id}" class="hover:text-(--content-emphasis) transition-colors">
                  ${item.title}
                </a>
              </h3>
              ${
                item.variationName
                  ? `
                <p class="text-(--content-meta) text-sm mt-1">${item.variationName}</p>
              `
                  : ""
              }
            </div>
            <div>
              <div class="text-right">
                <div class="text-(--content-meta) text-xs">
                  ${MoneyUtils.format(MoneyUtils.fromFloat(item.price))} each
                </div>
                <div class="font-display font-bold text-2xl text-(--content-emphasis)">
                  ${MoneyUtils.format(MoneyUtils.fromFloat(itemSubtotal))}
                </div>
              </div>
            </div>
          </div>

          <div class="flex justify-between items-end gap-4">
            <div class="flex items-center gap-2">
              <label for="quantity-${itemKey}" class="text-sm text-(--content-body) hidden lg:block">Qty:</label>
              <div class="flex items-center border border-(--border-primary) rounded">
                <button 
                  type="button" 
                  class="quantity-decrease px-2 py-1 hover:bg-(--surface-primary) transition-colors ${item.quantity <= 1 ? "opacity-50 cursor-not-allowed" : ""}" 
                  data-item-key="${itemKey}"
                  data-action="decrease"
                  ${item.quantity <= 1 ? "disabled" : ""}
                >
                  âˆ’
                </button>
                <input 
                  type="number" 
                  id="quantity-${itemKey}" 
                  class="quantity-input w-16 text-center py-1 border-0 bg-(--surface-primary) text-(--content-body) focus:ring-1 focus:ring-(--content-emphasis) [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none" 
                  value="${item.quantity}" 
                  min="1" 
                  max="${inventory}" 
                  data-item-key="${itemKey}"
                />
                <button 
                  type="button" 
                  class="quantity-increase px-2 py-1 hover:bg-(--surface-primary) transition-colors ${!canIncrement ? "opacity-50 cursor-not-allowed" : ""}" 
                  data-item-key="${itemKey}"
                  data-action="increase"
                  ${!canIncrement ? "disabled" : ""}
                >
                  +
                </button>
              </div>
              <div class="text-xs text-(--content-meta)">
                ${inventory} available
              </div>
            </div>

            <div class="flex items-center gap-4">
              <button 
                type="button" 
                class="remove-btn text-sm relative font-semibold hover:text-ui-nav-hover before:absolute before:-bottom-0.5 before:left-0 before:w-full before:h-0.5 before:bg-(--ui-nav-hover) before:transform before:scale-x-0 before:origin-right before:transition-transform before:duration-300 before:ease-in-out hover:before:scale-x-100 hover:before:origin-left" 
                data-item-key="${itemKey}"
                data-item-title="${item.title}"
                data-action="remove"
              >
                Remove
              </button>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  async function handleCheckout(): Promise<void> {
    try {
      const items = cart.getItems();
      if (items.length === 0) {
        showNotification("Your cart is empty", "error");
        return;
      }

      setLoading(true);

      const response = await fetch("/api/create-checkout", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ items }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error?.message || "Checkout failed");
      }

      if (!data.checkoutUrl) {
        throw new Error("No checkout URL returned");
      }

      showNotification("Redirecting to checkout...", "success");
      window.location.href = data.checkoutUrl;
    } catch (error) {
      showNotification(
        error instanceof Error
          ? error.message
          : "Checkout failed. Please try again.",
        "error"
      );
    } finally {
      setLoading(false);
    }
  }

  function handleClearCart(): void {
    const itemCount = cart.getItemCount();
    if (itemCount === 0) {
      showNotification("Cart is already empty", "error");
      return;
    }

    const items = cart.getItems();
    if (items.length === 1) {
      const item = items[0];
      showConfirmModal(
        "Remove Item",
        `Are you sure you want to remove "${item.title}" from your cart?`,
        () => {
          cart.clear();
          showNotification("Cart cleared successfully");
        }
      );
    } else {
      showConfirmModal(
        "Clear Cart",
        `Are you sure you want to remove all ${itemCount} item${itemCount > 1 ? "s" : ""} from your cart?`,
        () => {
          cart.clear();
          showNotification("Cart cleared successfully");
        }
      );
    }
  }

  function attachEventListeners(): void {
    const checkoutButton = document.getElementById("checkout-button");
    const clearCartButton = document.getElementById("clear-cart-button");

    if (checkoutButton) {
      checkoutButton.addEventListener("click", handleCheckout);
    }

    if (clearCartButton) {
      clearCartButton.addEventListener("click", handleClearCart);
    }
  }

  function setupCartItemEventListeners() {
    const cartContainer = document.getElementById("cart-container");
    if (!cartContainer) return;

    // Remove existing event listeners by cloning
    const newCartContainer = cartContainer.cloneNode(true) as HTMLElement;
    const parent = cartContainer.parentNode;
    if (parent) {
      parent.replaceChild(newCartContainer, cartContainer);
    }

    // Add single event listener using delegation - SAME PATTERN AS MINICART
    newCartContainer.addEventListener("click", async (e) => {
      const target = e.target as HTMLElement;
      const button = target.closest("button[data-action]") as HTMLButtonElement;
      if (!button || button.disabled) return;

      e.preventDefault();

      const action = button.dataset.action;
      const itemKey = button.dataset.itemKey;
      const itemTitle = button.dataset.itemTitle;

      if (!itemKey) return;

      try {
        switch (action) {
          case "increase":
            const items = cart.getItems();
            const item = items.find(
              (i: CartItem) => `${i.id}:${i.variationId}` === itemKey
            );
            if (item) {
              const newQty = item.quantity + 1;
              const inventory = inventoryData[item.variationId] || 999;

              if (newQty <= inventory) {
                await cart.updateQuantity(itemKey, newQty);
                await updateDisplay();
              } else {
                showNotification(`Only ${inventory} available`, "error");
              }
            }
            break;

          case "decrease":
            const currentItems = cart.getItems();
            const currentItem = currentItems.find(
              (i: CartItem) => `${i.id}:${i.variationId}` === itemKey
            );
            if (currentItem) {
              if (currentItem.quantity === 1) {
                showConfirmModal(
                  "Remove Item",
                  `Remove "${currentItem.title}" from your cart?`,
                  async () => {
                    cart.removeItem(itemKey);
                    await updateDisplay();
                    showNotification("Item removed from cart", "success");
                  }
                );
              } else {
                await cart.updateQuantity(itemKey, currentItem.quantity - 1);
                await updateDisplay();
              }
            }
            break;

          case "remove":
            if (itemTitle) {
              showConfirmModal(
                "Remove Item",
                `Remove "${itemTitle}" from your cart?`,
                async () => {
                  cart.removeItem(itemKey);
                  await updateDisplay();
                  showNotification("Item removed from cart", "success");
                }
              );
            }
            break;
        }
      } catch (error) {
        console.error("Error handling cart action:", error);
        showNotification("Error updating cart", "error");
      }
    });

    // Handle quantity input changes with debouncing
    let inputTimeout: number;
    newCartContainer.addEventListener("input", (e) => {
      const target = e.target as HTMLInputElement;
      if (!target.classList.contains("quantity-input")) return;

      const itemKey = target.dataset.itemKey;
      if (!itemKey) return;

      clearTimeout(inputTimeout);
      inputTimeout = window.setTimeout(async () => {
        const newQuantity = parseInt(target.value, 10);

        if (newQuantity < 1) {
          target.value = "1";
          return;
        }

        const inventory = inventoryData[itemKey.split(":")[1]] || 999;
        if (newQuantity > inventory) {
          target.value = inventory.toString();
          showNotification(`Only ${inventory} available`, "error");
          return;
        }

        try {
          await cart.updateQuantity(itemKey, newQuantity);
          await updateDisplay();
        } catch (error) {
          console.error("Error updating quantity:", error);
          showNotification("Error updating quantity", "error");
        }
      }, 500);
    });
  }

  async function updateDisplay(): Promise<void> {
    if (isUpdating) return;
    isUpdating = true;

    try {
      const items = cart.getItems();
      const total = cart.getTotal();

      await loadInventoryData(items);

      const cartLoading = document.getElementById("cart-loading");
      const cartContainer = document.getElementById("cart-container");

      if (!cartContainer) return;

      if (cartLoading) cartLoading.classList.add("hidden");
      cartContainer.classList.remove("hidden");

      if (items.length === 0) {
        cartContainer.innerHTML = createEmptyCart();
      } else {
        const cartItemsHtml = items.map(createCartItem).join("");

        cartContainer.innerHTML = `
          <div class="grid md:grid-cols-3 gap-1 items-start">
            <div class="md:col-span-2 space-y-1 grid">
              <button
                type="button"
                id="clear-cart-button"
                class="text-sm relative font-semibold hover:text-ui-nav-hover before:absolute before:-bottom-0.5 before:left-0 before:w-full before:h-0.5 before:bg-(--ui-nav-hover) before:transform before:scale-x-0 before:origin-right before:transition-transform before:duration-300 before:ease-in-out hover:before:scale-x-100 hover:before:origin-left -mt-1 mb-1 justify-self-end"
              >
                Clear Cart
              </button>
              ${cartItemsHtml}
            </div>
            ${createOrderSummary(total)}
          </div>
        `;

        setupCartItemEventListeners();
      }

      attachEventListeners();
    } catch (error) {
      console.error("Error updating cart display:", error);
    } finally {
      isUpdating = false;
    }
  }

  function handlePageLoad() {
    updateDisplay();
  }

  function handleCartUpdate() {
    updateDisplay();
  }

  document.addEventListener("astro:page-load", handlePageLoad);
  window.addEventListener("cartUpdated", handleCartUpdate);

  if (import.meta.hot) {
    import.meta.hot.dispose(() => {
      document.removeEventListener("astro:page-load", handlePageLoad);
      window.removeEventListener("cartUpdated", handleCartUpdate);
    });
  }
</script>
