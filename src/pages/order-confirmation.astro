---
import Layout from "@/layouts/Layout.astro";
import { squareClient } from "@/lib/square/client";
import { MoneyUtils } from "@/lib/square/money";
import type { OrderLineItem, Order } from "square";

// Track line item additional info
type LineItemInfo = {
  image?: string;
  variationName?: string;
};
type LineItemDetails = Record<string, LineItemInfo>;

const orderId = Astro.url.searchParams.get("orderId");
console.log("Processing order confirmation:", orderId);

let orderDetails: Order | null = null;
let lineItemDetails: LineItemDetails = {};
let error: string | null = null;

if (!orderId) {
  error = "Order ID not provided";
  console.error("Missing orderId in URL");
} else {
  try {
    // Retrieve the basic order
    const { result } = await squareClient.ordersApi.retrieveOrder(orderId);

    if (!result.order) {
      throw new Error("Order not found in Square response");
    }

    orderDetails = result.order;

    // Fetch details for each line item
    if (orderDetails.lineItems?.length) {
      for (const item of orderDetails.lineItems) {
        if (item.catalogObjectId) {
          const itemKey = item.uid || "";
          lineItemDetails[itemKey] = {};

          try {
            // Try to fetch the catalog object (should be a variation)
            const { result: objectResult } =
              await squareClient.catalogApi.retrieveCatalogObject(
                item.catalogObjectId
              );

            if (objectResult.object) {
              // Check if it's a variation
              if (objectResult.object.type === "ITEM_VARIATION") {
                // Store variation name
                if (objectResult.object.itemVariationData?.name) {
                  lineItemDetails[itemKey].variationName =
                    objectResult.object.itemVariationData.name;
                }

                // Try to get variation image
                if (objectResult.object.itemVariationData?.imageIds?.[0]) {
                  const { result: imageResult } =
                    await squareClient.catalogApi.retrieveCatalogObject(
                      objectResult.object.itemVariationData.imageIds[0]
                    );

                  if (
                    imageResult.object?.type === "IMAGE" &&
                    imageResult.object.imageData?.url
                  ) {
                    lineItemDetails[itemKey].image =
                      imageResult.object.imageData.url;
                    continue; // Skip to next item if we found an image
                  }
                }

                // If no variation image, check parent item image
                if (objectResult.object.itemVariationData?.itemId) {
                  // Get the parent item
                  const { result: parentResult } =
                    await squareClient.catalogApi.retrieveCatalogObject(
                      objectResult.object.itemVariationData.itemId
                    );

                  if (
                    parentResult.object?.type === "ITEM" &&
                    parentResult.object.itemData?.imageIds?.[0]
                  ) {
                    // Get the image from the parent item
                    const { result: imageResult } =
                      await squareClient.catalogApi.retrieveCatalogObject(
                        parentResult.object.itemData.imageIds[0]
                      );

                    if (
                      imageResult.object?.type === "IMAGE" &&
                      imageResult.object.imageData?.url
                    ) {
                      lineItemDetails[itemKey].image =
                        imageResult.object.imageData.url;
                    }
                  }
                }
              }
            }
          } catch (error) {
            console.error(
              `Error fetching details for item ${item.catalogObjectId}:`,
              error
            );
          }
        }
      }
    }

    console.log("Order retrieved successfully:", orderDetails.id);
  } catch (e) {
    error = e instanceof Error ? e.message : "Failed to load order";
    console.error("Order retrieval error:", { error: e, orderId });
  }
}

function formatMoney(money: OrderLineItem["totalMoney"]): string {
  if (!money) return "$0.00";
  return MoneyUtils.format(money);
}

// Get the title and content from the page
const pageTitle = orderDetails?.id
  ? `Order #${orderDetails.id.slice(-6)}`
  : "Order Confirmation";
const fullTitle = `${pageTitle} | El Camino`;
---

<Layout title={fullTitle}>
  <section class="max-w-2xl mx-auto px-4 py-16">
    {
      error ? (
        <div class="text-center">
          <h1 class="font-display font-black text-4xl lg:text-5xl xl:text-6xl 2xl:text-7xl leading-[0.8] text-content-heading">
            Oops! Something went wrong
          </h1>
          <p class="text-content-body mb-8">{error}</p>
          <a
            href="/"
            class="inline-block bg-ui-button-surface text-ui-button-text border-ui-button-border lg:hover:bg-ui-button-surface/80 font-sans font-semibold transition-all duration-300 border-2 rounded-[4px] text-lg py-2 px-4"
          >
            Return to Home
          </a>
        </div>
      ) : !orderDetails ? (
        <div class="text-center">
          <h1 class="font-display font-black text-4xl lg:text-5xl xl:text-6xl 2xl:text-7xl leading-[0.8] text-content-heading">
            Processing Order...
          </h1>
          <p class="text-content-body mb-8">
            Please wait while we confirm your order details.
          </p>
        </div>
      ) : (
        <div data-order-id={orderDetails.id}>
          <div class="text-center mb-8">
            <h1 class="font-display font-black text-4xl lg:text-5xl xl:text-6xl 2xl:text-7xl leading-[0.8] text-content-heading">
              Thank You for Your Order!
            </h1>
            <p class="text-content-body">Your order has been confirmed.</p>
          </div>

          <div class="order-summary bg-surface-secondary rounded-lg p-6">
            <h2 class="font-display text-2xl mb-4 text-content-heading">
              Order Summary
            </h2>
            <div>
              {orderDetails.lineItems?.map((item) => (
                <div class="flex items-center py-4 border-b border-surface-tertiary">
                  {/* Item image */}
                  <div class="w-16 h-16 mr-4 bg-surface-tertiary rounded overflow-hidden">
                    <img
                      src={
                        item.uid && lineItemDetails[item.uid]?.image
                          ? lineItemDetails[item.uid].image
                          : "/images/placeholder.png"
                      }
                      alt={item.name || "Product"}
                      class="w-full h-full object-cover"
                      onerror="this.src='/images/placeholder.png'"
                    />
                  </div>
                  <div class="flex-1 flex justify-between text-content-body">
                    <div>
                      <div>{item.name}</div>
                      {item.uid && lineItemDetails[item.uid]?.variationName && (
                        <div class="text-sm text-content-meta">
                          {lineItemDetails[item.uid].variationName}
                        </div>
                      )}
                      <div class="text-xs">Qty: {item.quantity}</div>
                    </div>
                    <span class="font-display font-bold text-2xl self-center">
                      {formatMoney(item.totalMoney)}
                    </span>
                  </div>
                </div>
              ))}

              <div class="pt-4">
                <div class="flex justify-between font-bold text-content-emphasis">
                  <span>Total</span>
                  <span class="font-display font-bold text-3xl">
                    {formatMoney(orderDetails.totalMoney)}
                  </span>
                </div>
              </div>
            </div>
          </div>

          <div class="mt-8 text-center">
            <p class="text-sm text-content-meta mb-4">
              Order ID: {orderDetails.id}
            </p>
            <a
              href="/"
              class="inline-block bg-ui-button-surface text-ui-button-text border-ui-button-border lg:hover:bg-ui-button-surface/80 font-sans font-semibold transition-all duration-300 border-2 rounded-[4px] text-lg py-2 px-4"
            >
              Continue Shopping
            </a>
          </div>
        </div>
      )
    }
  </section>
</Layout>

<script>
  import { cart } from "@/lib/cart";

  // Clear cart when order is confirmed
  document.addEventListener("astro:page-load", () => {
    const orderElement = document.querySelector("[data-order-id]");
    if (orderElement) {
      console.log("Clearing cart for confirmed order");
      cart.clear();
    }
  });
</script>
