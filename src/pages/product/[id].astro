---
import Layout from "@/layouts/Layout.astro";
import Button from "@/components/Button.astro";
import { fetchProduct } from "@/lib/square/client";
import { MoneyUtils } from "@/lib/square/money";
import { checkItemInventory } from "@/lib/square/inventory";

const { id } = Astro.params;
const product = id ? await fetchProduct(id) : null;

if (!product) {
  return Astro.redirect("/404");
}

// Check inventory status, but don't block rendering if it fails
let availableQuantity = 1; // Default to allowing purchases
let inventoryError = false;

try {
  availableQuantity = await checkItemInventory(product.variationId);
  console.log(`Server-side inventory check: ${availableQuantity} available`);
} catch (err) {
  // If inventory check fails, we'll still show the product
  console.error(
    `Inventory check error: ${err instanceof Error ? err.message : String(err)}`
  );
  inventoryError = true;
}

const inStock = availableQuantity > 0 || inventoryError;
const formattedPrice = MoneyUtils.format(MoneyUtils.fromFloat(product.price));

const pageTitle = product.title;
const fullTitle = `${pageTitle} | El Camino`;

// Get variation data for display
const hasMultipleVariations =
  product.variations && product.variations.length > 1;
const currentVariation = product.variations?.find(
  (v) => v.variationId === product.variationId
);

// Get the unit display - from the current variation or the product
const unitDisplay = currentVariation?.unit || product.unit || '';
---

<Layout title={fullTitle}>
  <section class="p-4 sm:p-6 lg:p-8">
    <div class="lg:grid lg:grid-cols-2 lg:gap-x-8 items-center">
      <div
        class="aspect-square border-4 border-surface-secondary overflow-hidden bg-surface-secondary"
      >
        <img
          id="product-image"
          src={product.image}
          alt={product.title}
          class={`w-full h-full object-cover ${!inStock ? "opacity-75" : ""}`}
          onerror="this.src='/images/placeholder.png'"
        />
      </div>

      <div class="product-info mt-10 lg:mt-0">
        <h1 class="flex flex-col text-4xl font-display mb-4 text-content-heading">
          {/* Display the brand if available */}
          {product.brand && 
            <span class="text-xl uppercase">{product.brand}</span>
          }
          {product.title}
        </h1>

        <div class="mt-3">
          <p class="text-5xl font-display text-content-emphasis">
            {formattedPrice}
            {/* Display unit if available */}
            {unitDisplay && 
              <span class="text-xl">{unitDisplay}</span>
            }
          </p>

          <!-- Inventory Status -->
          {
            !inStock ? (
              <p class="mt-2 bg-state-error-surface text-state-error-text px-3 py-2 text-md font-bold inline-block">
                This item is currently sold out
              </p>
            ) : (
              <p class="mt-2">
                In Stock{" "}
                {availableQuantity > 1
                  ? `(${availableQuantity} available)`
                  : ""}
              </p>
            )
          }

          {
            inventoryError && (
              <p class="mt-2 text-yellow-500 text-sm">
                Note: Inventory information may not be current
              </p>
            )
          }
        </div>

        {
          product.description && (
            <div class="mt-6 max-w-[54ch]">
              <p class="text-base text-content-body">{product.description}</p>
            </div>
          )
        }

        {
          /* Display variation options - dropdown for multiple, text for single variation */
        }
        {
          product.variations && (
            <div class="mt-4">
              {hasMultipleVariations ? (
              <label
                for="variation-select"
                class="block text-sm font-medium text-content-body mb-2"
              >
                Options
              </label>
                <select
                  id="variation-select"
                  class="border-ui-input-border bg-ui-input-surface text-ui-input-text p-2 rounded-sm"
                  data-variations={JSON.stringify(product.variations)}
                >
                  {product.variations.map((variation) => (
                    <option
                      value={variation.variationId}
                      selected={variation.variationId === product.variationId}
                      data-image={variation.image || ""}
                      data-unit={variation.unit || ""}
                    >
                      {variation.name}
                    </option>
                  ))}
                </select>
              ) : (
                <div class="inline-block max-w-[54ch]">
                  {currentVariation?.name || ""}
                  <input
                    type="hidden"
                    id="variation-select"
                    value={product.variationId}
                    data-variations={JSON.stringify(product.variations || [])}
                  />
                </div>
              )}
            </div>
          )
        }

        <div class="mt-8">
          <Button
            type="button"
            variant="primary"
            size="lg"
            classes={`w-full md:w-auto ${!inStock ? "opacity-50 cursor-not-allowed" : ""}`}
            data-product={JSON.stringify({
              id: product.id,
              catalogObjectId: product.catalogObjectId,
              variationId: product.variationId,
              title: product.title,
              price: product.price,
              image: product.image,
              unit: currentVariation?.unit || product.unit || '',
              variationName: product.variations?.find(
                (v) => v.variationId === product.variationId
              )?.name,
            })}
            id="add-to-cart-button"
            disabled={!inStock}
          >
            {inStock ? "Add to Cart" : "Sold Out"}
          </Button>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
  import { cart } from "@/lib/cart";
  import { MoneyUtils } from "@/lib/square/money";
  import type { ProductVariation } from "@/lib/square/types";

  let isProcessing = false;
  let addToCartTimeout: number | null = null;

  function setupVariationSelector(): void {
    const select = document.getElementById(
      "variation-select"
    ) as HTMLSelectElement;
    if (!select) return;

    const addToCartButton = document.getElementById("add-to-cart-button");
    if (!addToCartButton) return;

    // Parse variations data
    const variations = JSON.parse(
      select.dataset.variations || "[]"
    ) as ProductVariation[];

    // Update price and button data when variation changes
    select.addEventListener("change", async () => {
      const selectedVariationId = select.value;
      const selectedOption = select.options[select.selectedIndex];
      const selectedVariation = variations.find(
        (v: ProductVariation) => v.variationId === selectedVariationId
      );
      if (!selectedVariation) return;

      console.log(
        `Selected variation: ${selectedVariation.name} (${selectedVariation.variationId})`
      );

      // Update price display
      const priceElement = document.querySelector(".text-content-emphasis");
      if (priceElement) {
        const formattedPrice = MoneyUtils.format(
          MoneyUtils.fromFloat(selectedVariation.price)
        );
        
        // Get unit from data-unit attribute or variation object
        const unitDisplay = selectedOption.dataset.unit || selectedVariation.unit || '';
        
        // Update price and unit display
        if (unitDisplay) {
          priceElement.innerHTML = `${formattedPrice} <span class="text-xl">${unitDisplay}</span>`;
        } else {
          priceElement.textContent = formattedPrice;
        }
      }

      // Update image if the variation has its own image
      const productImage = document.getElementById(
        "product-image"
      ) as HTMLImageElement;
      const variationImage = selectedOption.dataset.image || selectedVariation.image;
      if (productImage && variationImage) {
        productImage.src = variationImage;
      }

      // Check inventory for selected variation
      try {
        const response = await fetch(
          `/api/check-inventory?variationId=${selectedVariationId}`
        );
        const data = await response.json();

        const inStock = data.inStock;
        const statusElement = document.querySelector(".mt-2");

        if (statusElement) {
          if (inStock) {
            statusElement.className = "mt-2 text-state-success-text";
            statusElement.textContent = `In Stock ${data.quantity > 1 ? `(${data.quantity} available)` : ""}`;
          } else {
            statusElement.className = "mt-2 text-state-error-text";
            statusElement.textContent = "This item is currently out of stock";
          }
        }

        // Update add to cart button
        const btnElement = addToCartButton as HTMLButtonElement;
        btnElement.disabled = !inStock;

        if (inStock) {
          btnElement.textContent = "Add to Cart";
          btnElement.classList.remove("opacity-50", "cursor-not-allowed");
        } else {
          btnElement.textContent = "Out of Stock";
          btnElement.classList.add("opacity-50", "cursor-not-allowed");
        }

        // Update product data on button
        const productData = JSON.parse(addToCartButton.dataset.product || "{}");

        // IMPORTANT: Update the variation ID and name
        productData.variationId = selectedVariationId;
        productData.price = selectedVariation.price;
        productData.variationName = selectedVariation.name; // Include variation name
        productData.unit = selectedVariation.unit || ''; // Include unit
        if (selectedVariation.image) {
          productData.image = selectedVariation.image; // Include variation image
        }

        // Save updated data back to the button
        addToCartButton.dataset.product = JSON.stringify(productData);

        console.log("Updated button data:", productData);
      } catch (error) {
        console.error("Error checking inventory:", error);
      }
    });
  }

  function setupAddToCartHandler(): void {
    const button = document.getElementById("add-to-cart-button");
    if (!button) return;

    // Remove existing listener if any
    button.replaceWith(button.cloneNode(true));

    // Get fresh reference after cloning
    const newButton = document.getElementById("add-to-cart-button");
    if (!newButton) return;

    newButton.addEventListener("click", async (e) => {
      try {
        // Check if button is disabled
        const btnElement = newButton as HTMLButtonElement;
        if (btnElement.disabled || isProcessing) return;

        isProcessing = true;

        // IMPORTANT: Get the current variation selection directly
        const select = document.getElementById(
          "variation-select"
        ) as HTMLSelectElement;

        // Start with base product data from the button
        const baseProductData = newButton.dataset.product;
        if (!baseProductData) {
          throw new Error("No product data found");
        }

        // Parse the base product
        const product = JSON.parse(baseProductData);

        // If there's a variation selector, use its current value
        if (select) {
          const currentVariationId = select.value;
          console.log(`Current selected variation ID: ${currentVariationId}`);

          // Only override if there's a selection and it's different
          if (
            currentVariationId &&
            currentVariationId !== product.variationId
          ) {
            // Find the variation details
            const variationsData = select.dataset.variations;
            if (variationsData) {
              const variations = JSON.parse(variationsData);
              const selectedVariation = variations.find(
                (v: any) => v.variationId === currentVariationId
              );

              if (selectedVariation) {
                console.log(
                  `Overriding with selected variation: ${selectedVariation.name}`
                );

                // Update product with selected variation details
                product.variationId = currentVariationId;
                product.variationName = selectedVariation.name;
                product.price = selectedVariation.price;
                product.unit = selectedVariation.unit || '';
                if (selectedVariation.image) {
                  product.image = selectedVariation.image;
                }
              }
            }
          }
        }

        console.log(
          `Adding to cart: ${product.title} with variation ${product.variationId} (${product.variationName})`
        );

        // Check if this specific variation is already in cart
        const cartItems = cart.getItems();
        const existingItem = cartItems.find(
          (item) =>
            item.id === product.id && item.variationId === product.variationId
        );

        if (existingItem) {
          showNotification("Item already in cart", "info");
          return;
        }

        // Add to cart with the current variation
        const result = await cart.addItem({
          ...product,
          quantity: 1,
        });

        if (result.success) {
          showNotification(result.message || "Added to cart");
        } else {
          showNotification(result.message || "Failed to add to cart", "error");
        }
      } catch (error) {
        console.error("Error adding to cart:", error);
        showNotification("Failed to add to cart", "error");
      } finally {
        isProcessing = false;
      }
    });
  }

  function showNotification(
    message: string,
    type: "success" | "error" | "info" = "success"
  ): void {
    if (addToCartTimeout) {
      clearTimeout(addToCartTimeout);
    }

    const existingNotification = document.querySelector(".cart-notification");
    if (existingNotification) {
      existingNotification.remove();
    }

    const notification = document.createElement("div");
    notification.className = `cart-notification fixed top-4 right-4 px-4 py-2 rounded-lg z-50 transition-opacity duration-300 ${
      type === "success"
        ? "bg-state-success-surface text-state-success-text"
        : type === "error"
          ? "bg-state-error-surface text-state-error-text"
          : "bg-state-info-surface text-state-info-text"
    }`;
    notification.textContent = message;
    document.body.appendChild(notification);

    // Fade out and remove
    addToCartTimeout = window.setTimeout(() => {
      notification.style.opacity = "0";
      setTimeout(() => notification.remove(), 300);
    }, 2000);
  }

  // Event Listeners
  document.addEventListener("astro:page-load", () => {
    console.debug("Product page: Setting up product handlers");

    // Order matters here - setup variation selector first
    setupVariationSelector();

    // Then setup add to cart button
    setupAddToCartHandler();
  });

  // Cleanup on HMR
  if (import.meta.hot) {
    import.meta.hot.dispose(() => {
      if (addToCartTimeout) {
        clearTimeout(addToCartTimeout);
      }
    });
  }
</script>