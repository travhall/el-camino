---
import Layout from "@/layouts/Layout.astro";
import Button from "@/components/Button.astro";
import { fetchProduct } from "@/lib/square/client";
import { MoneyUtils } from "@/lib/square/money";
import { checkBulkInventory } from "@/lib/square/inventory";
import {
  createInitialSelectionState,
  getAttributeDisplayName,
} from "@/lib/square/variationParser";

// Get product ID from URL params
const { id } = Astro.params;
const product = id ? await fetchProduct(id) : null;

if (!product) {
  return Astro.redirect("/404");
}

// Set default variation ID and prepare for inventory checking
let defaultVariationId = product.variationId;
let variations = product.variations || [];
let inventoryMap: Record<string, number> = {};

// Check inventory for all variations at once
if (variations.length > 0) {
  try {
    // Get all variation IDs for batch inventory check
    const variationIds = variations.map((v) => v.variationId);

    // Get inventory for all variations in a single request
    inventoryMap = await checkBulkInventory(variationIds);

    // Update variation data with inventory information
    variations = variations.map((v) => ({
      ...v,
      inStock: (inventoryMap[v.variationId] || 0) > 0,
      quantity: inventoryMap[v.variationId] || 0,
    }));

    // Check if default variation is in stock
    const defaultIsInStock = (inventoryMap[defaultVariationId] || 0) > 0;

    // If default is out of stock, find first in-stock variation
    if (!defaultIsInStock && variations.length > 0) {
      const firstInStockVariation = variations.find((v) => v.inStock);
      if (firstInStockVariation) {
        defaultVariationId = firstInStockVariation.variationId;
        // Use variation-specific image if available
        if (firstInStockVariation.image) {
          product.image = firstInStockVariation.image;
        }
      }
    }
  } catch (err) {
    console.error(
      `Inventory check error: ${err instanceof Error ? err.message : String(err)}`
    );
    // Default to allowing purchases if inventory check fails
    variations = variations.map((v) => ({
      ...v,
      inStock: true,
      quantity: 999,
    }));
  }
} else {
  // Single variation product - mark as in stock by default
  const quantity = inventoryMap[product.variationId] || 999;
  variations = [
    {
      id: product.variationId,
      variationId: product.variationId,
      name: product.title,
      price: product.price,
      inStock: quantity > 0,
      quantity: quantity,
      attributes: {}, // Add empty attributes for consistency
    },
  ];
}

// Create initial selection state using the parser
const selectionState = createInitialSelectionState(variations);
const availableAttributes = selectionState.availableAttributes;
const attributeTypes = Object.keys(availableAttributes);

// Find selected variation
const selectedVariation =
  variations.find((v) => v.variationId === defaultVariationId) || variations[0];
const selectedVariationInStock = selectedVariation?.inStock || false;
const selectedVariationQuantity = selectedVariation?.quantity || 0;
const formattedPrice = MoneyUtils.format(
  MoneyUtils.fromFloat(selectedVariation?.price || product.price)
);

// Check if we have multiple variations
const hasMultipleVariations = variations.length > 1;

// Set product metadata
const pageTitle = product.title;
const fullTitle = `${pageTitle} | El Camino`;
const unitDisplay = selectedVariation?.unit || product.unit || "";
---

<Layout title={fullTitle}>
  <section class="p-4 sm:p-6 lg:p-8 relative">
    <div
      class="lg:grid lg:grid-cols-2 lg:gap-x-8 xl:gap-x-12 2xl:gap-x-16 items-start"
    >
      <!-- Product Image -->
      <div
        class="aspect-square border-4 border-surface-secondary overflow-hidden bg-surface-secondary relative"
      >
        <img
          id="product-image"
          src={product.image}
          alt={product.title}
          class={`w-full h-full object-cover ${!selectedVariationInStock ? "opacity-75" : ""}`}
          loading="eager"
          fetchpriority="high"
          onerror="this.src='/images/placeholder.png'"
        />

        {/* Out of stock overlay */}
        {
          !selectedVariationInStock && (
            <div
              id="stock-overlay"
              class="absolute top-0 left-0 bg-state-error-surface text-state-error-text px-3 py-2 text-md font-bold rounded-sm"
            >
              Sold Out
            </div>
          )
        }
      </div>

      <!-- Product Info -->
      <div class="product-info mt-10 lg:mt-0">
        <h1
          class="flex flex-col text-4xl font-display mb-4 text-content-heading"
        >
          <!-- Brand display -->
          {
            product.brand && (
              <span class="text-xl uppercase">{product.brand}</span>
            )
          }
          {product.title}
        </h1>

        <!-- Price Display -->
        <div class="mt-3">
          <p
            id="price-display"
            class="text-5xl font-display text-content-emphasis"
          >
            {formattedPrice}
            {/* Unit display */}
            {
              unitDisplay && (
                <span class="text-xl" id="unit-display">
                  {unitDisplay}
                </span>
              )
            }
          </p>

          <!-- Inventory Status -->
          <div id="inventory-status">
            {
              !selectedVariationInStock ? (
                <p class="mt-2 text-state-error-surface text-md font-bold inline-block">
                  This item is currently unavailable
                </p>
              ) : selectedVariationQuantity > 0 ? (
                <p class="mt-2 text-state-success-surface">
                  In Stock{" "}
                  {selectedVariationQuantity > 1 &&
                    `(${selectedVariationQuantity} available)`}
                </p>
              ) : null
            }
          </div>
        </div>

        <!-- Product Description -->
        {
          product.description && (
            <div class="mt-6 max-w-[54ch]">
              <p class="text-base text-content-body">{product.description}</p>
            </div>
          )
        }

        <!-- Dynamic Attribute Selectors -->
        {
          hasMultipleVariations &&
            attributeTypes
              .filter(
                (attributeType) =>
                  availableAttributes[attributeType]?.length > 1
              )
              .map((attributeType) => {
                const attributeValues = availableAttributes[attributeType];
                const displayName = getAttributeDisplayName(attributeType);

                return (
                  <div class="mt-6">
                    <h3 class="text-lg font-medium text-content-heading mb-2">
                      {displayName}
                    </h3>
                    <div class="flex flex-wrap gap-2">
                      {attributeValues.map((value) => {
                        const isAvailable = variations.some((variation) => {
                          if (!variation.attributes || !variation.inStock)
                            return false;
                          return variation.attributes[attributeType] === value;
                        });

                        return (
                          <button
                            type="button"
                            data-attribute-type={attributeType}
                            data-attribute-value={value}
                            class:list={[
                              "px-4 py-2 border rounded attribute-button",
                              "bg-ui-input-surface text-ui-input-text border-ui-input-border/50",
                              !isAvailable && "opacity-60 cursor-not-allowed",
                            ]}
                            disabled={!isAvailable}
                          >
                            {value}
                          </button>
                        );
                      })}
                    </div>
                  </div>
                );
              })
        }

        <!-- Single attribute display (when not varying) -->
        {
          attributeTypes
            .filter(
              (attributeType) =>
                availableAttributes[attributeType]?.length === 1
            )
            .map((attributeType) => {
              const attributeValues = availableAttributes[attributeType];
              const displayName = getAttributeDisplayName(attributeType);

              return (
                <div class="mt-4">
                  <h3 class="text-lg font-medium text-content-heading mb-2">
                    {displayName}
                  </h3>
                  <div class="inline-block px-4 py-2 bg-ui-button-surface text-ui-button-text border-ui-button-border/50 rounded">
                    {attributeValues[0]}
                  </div>
                </div>
              );
            })
        }

        <!-- Fallback: Standard Variation Selection (for variations that don't have structured attributes) -->
        {
          hasMultipleVariations && attributeTypes.length === 0 && (
            <div class="mt-6">
              <h3 class="text-lg font-medium text-content-heading mb-2">
                Options
              </h3>
              <div id="variation-buttons" class="flex flex-wrap gap-2">
                {variations.map((variation) => (
                  <button
                    type="button"
                    data-variation-id={variation.variationId}
                    data-price={variation.price}
                    data-name={variation.name}
                    data-quantity={variation.quantity}
                    data-in-stock={variation.inStock ? "true" : "false"}
                    data-image={variation.image || ""}
                    data-unit={variation.unit || ""}
                    class:list={[
                      "px-4 py-2 border rounded",
                      variation.variationId === defaultVariationId
                        ? "bg-ui-button-surface text-ui-button-text border-ui-button-border/50"
                        : "bg-ui-input-surface text-ui-input-text border-ui-input-border/50",
                      !variation.inStock && "opacity-60 cursor-not-allowed",
                    ]}
                    disabled={!variation.inStock}
                  >
                    {variation.name}
                  </button>
                ))}
              </div>
            </div>
          )
        }

        <!-- Quantity Input -->
        <div class="mt-6">
          <div class="flex flex-col space-y-2 items-start">
            <label for="quantity-input" class="text-sm font-medium"
              >Quantity</label
            >
            <div
              class="flex border border-ui-input-border/50 rounded-md overflow-hidden"
            >
              <button
                type="button"
                id="decrease-quantity"
                class="w-10 h-10 flex items-center justify-center border-r border-ui-input-border/50 bg-ui-input-surface text-ui-input-text"
                disabled={true}
              >
                -
              </button>
              <input
                type="number"
                id="quantity-input"
                min="1"
                max={selectedVariationQuantity}
                value="1"
                class="w-14 h-10 text-center bg-ui-input-surface text-ui-input-text [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
              />
              <button
                type="button"
                id="increase-quantity"
                class="w-10 h-10 flex items-center justify-center border-l border-ui-input-border/50 bg-ui-input-surface text-ui-input-text"
                disabled={selectedVariationQuantity <= 1}
              >
                +
              </button>
            </div>
            <span id="availability-indicator" class="text-sm text-content-meta">
              {selectedVariationQuantity} available
            </span>
          </div>
        </div>

        <!-- Hidden data for JavaScript -->
        <input
          type="hidden"
          id="variation-data"
          value={JSON.stringify({
            variations: variations,
            availableAttributes: availableAttributes,
            selectedVariationId: defaultVariationId,
          })}
        />

        <!-- Cart Status Indicator -->
        <div class="mt-2">
          <span
            id="cart-status"
            class="text-sm font-medium text-state-info-text bg-state-info-surface px-2 py-1 rounded hidden"
          ></span>
        </div>

        <!-- Add to Cart Button -->
        <div class="mt-4">
          <Button
            type="button"
            variant="primary"
            size="lg"
            classes={`w-full md:w-auto ${!selectedVariationInStock ? "opacity-50 cursor-not-allowed" : ""}`}
            data-product={JSON.stringify({
              id: product.id,
              catalogObjectId: product.catalogObjectId,
              variationId: defaultVariationId,
              title: product.title,
              price: selectedVariation?.price || product.price,
              image: product.image,
              unit: unitDisplay,
              variationName: selectedVariation?.name || "",
            })}
            id="add-to-cart-button"
            disabled={!selectedVariationInStock}
          >
            {selectedVariationInStock ? "Add to Cart" : "Sold Out"}
          </Button>
        </div>

        <!-- Store Information -->
        <div class="text-sm flex flex-col mt-8 space-y-2">
          <p class="italic">Available for pick up at El Camino</p>
          <a href="#" class="underline">Store Location &amp; Hours</a>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
  import { cart } from "@/lib/cart";
  import { MoneyUtils } from "@/lib/square/money";
  import { findVariationByAttributes } from "@/lib/square/variationParser";
  import type { ProductData } from "@/lib/square/types";

  // Type definitions for window globals
  declare global {
    interface Window {
      cart: typeof cart;
      showNotification: (
        message: string,
        type?: "success" | "error" | "info",
        duration?: number
      ) => void;
    }
  }

  let isProcessing = false;
  let selectedAttributes: Record<string, string> = {};
  let currentVariation: any = null;
  let variations: any[] = [];
  let availableAttributes: Record<string, string[]> = {};

  /**
   * Initialize data from hidden input
   */
  function initializeData() {
    const dataInput = document.getElementById(
      "variation-data"
    ) as HTMLInputElement;
    if (!dataInput?.value) return false;

    try {
      const data = JSON.parse(dataInput.value);
      variations = data.variations || [];
      availableAttributes = data.availableAttributes || {};

      // Find current variation and set initial attributes
      currentVariation = variations.find(
        (v) => v.variationId === data.selectedVariationId
      );
      if (currentVariation?.attributes) {
        selectedAttributes = { ...currentVariation.attributes };
      }

      return true;
    } catch (error) {
      console.error("Error parsing variation data:", error);
      return false;
    }
  }

  /**
   * Find matching variation based on selected attributes
   */
  function findMatchingVariation() {
    return findVariationByAttributes(variations, selectedAttributes);
  }

  /**
   * Update product UI based on selected variation
   */
  function updateProductUI(variation: any) {
    if (!variation) return;

    currentVariation = variation;
    const { variationId, name, price, inStock, quantity, image, unit } =
      variation;

    // Update price display
    const priceElement = document.getElementById("price-display");
    if (priceElement) {
      const formattedPrice = MoneyUtils.format(MoneyUtils.fromFloat(price));

      if (unit) {
        priceElement.innerHTML = `${formattedPrice} <span class="text-xl">${unit}</span>`;
      } else {
        priceElement.textContent = formattedPrice;
      }
    }

    // Update inventory status
    const inventoryStatus = document.getElementById("inventory-status");
    if (inventoryStatus) {
      if (!inStock) {
        inventoryStatus.innerHTML = `
          <p class="mt-2 text-state-error-surface text-md font-bold inline-block">
            This item is currently unavailable
          </p>
        `;
      } else if (quantity > 1) {
        inventoryStatus.innerHTML = `
          <p class="mt-2 text-state-success-surface">
            In Stock (${quantity} available)
          </p>
        `;
      } else {
        inventoryStatus.innerHTML = `
          <p class="mt-2 text-state-success-surface">
            In Stock
          </p>
        `;
      }
    }

    // Update availability indicator
    const availabilityIndicator = document.getElementById(
      "availability-indicator"
    );
    if (availabilityIndicator) {
      availabilityIndicator.textContent = `${quantity} available`;
    }

    // Update quantity input
    const quantityInput = document.getElementById(
      "quantity-input"
    ) as HTMLInputElement;
    if (quantityInput) {
      quantityInput.max = String(quantity);
      quantityInput.value = "1";
      updateQuantityButtonStates();
    }

    // Update image if variation has its own
    if (image) {
      const productImage = document.getElementById(
        "product-image"
      ) as HTMLImageElement;
      if (productImage) {
        productImage.src = image;
      }
    }

    // Update add to cart button
    const addToCartButton = document.getElementById(
      "add-to-cart-button"
    ) as HTMLButtonElement;
    if (addToCartButton) {
      addToCartButton.disabled = !inStock;

      if (!inStock) {
        addToCartButton.textContent = "Sold Out";
        addToCartButton.classList.add("opacity-50", "cursor-not-allowed");
      } else {
        addToCartButton.textContent = "Add to Cart";
        addToCartButton.classList.remove("opacity-50", "cursor-not-allowed");
      }

      // Update product data
      if (addToCartButton.dataset.product) {
        try {
          const productData = JSON.parse(
            addToCartButton.dataset.product
          ) as ProductData;
          productData.variationId = variationId;
          productData.variationName = name;
          productData.price = price;
          if (unit) productData.unit = unit;
          addToCartButton.dataset.product = JSON.stringify(productData);
        } catch (e) {
          console.error("Error updating product data:", e);
        }
      }
    }

    // Update stock overlay
    const stockOverlay = document.getElementById("stock-overlay");
    const productImageContainer =
      document.getElementById("product-image")?.parentElement;

    if (!inStock && !stockOverlay && productImageContainer) {
      const overlay = document.createElement("div");
      overlay.id = "stock-overlay";
      overlay.className =
        "absolute top-0 left-0 bg-state-error-surface text-state-error-text px-3 py-2 text-md font-bold rounded-sm";
      overlay.textContent = "Sold Out";
      productImageContainer.appendChild(overlay);
    } else if (inStock && stockOverlay) {
      stockOverlay.remove();
    }
  }

  /**
   * Update attribute button states
   */
  function updateAttributeButtonStates() {
    Object.keys(availableAttributes).forEach((attributeType) => {
      const buttons = document.querySelectorAll(
        `[data-attribute-type="${attributeType}"]`
      );

      buttons.forEach((button) => {
        const btn = button as HTMLButtonElement;
        const value = btn.dataset.attributeValue;
        if (!value) return;

        // Check if this value is available with current other selections
        const testAttributes = {
          ...selectedAttributes,
          [attributeType]: value,
        };
        const matchingVariation = findVariationByAttributes(
          variations,
          testAttributes
        );
        const isAvailable = matchingVariation?.inStock || false;

        // Update button state
        btn.disabled = !isAvailable;
        if (!isAvailable) {
          btn.classList.add("opacity-60", "cursor-not-allowed");
        } else {
          btn.classList.remove("opacity-60", "cursor-not-allowed");
        }

        // Update selected state
        const isSelected = selectedAttributes[attributeType] === value;
        if (isSelected) {
          btn.classList.remove(
            "bg-ui-input-surface",
            "text-ui-input-text",
            "border-ui-input-border/50"
          );
          btn.classList.add(
            "bg-ui-button-surface",
            "text-ui-button-text",
            "border-ui-button-border/50"
          );
        } else {
          btn.classList.add(
            "bg-ui-input-surface",
            "text-ui-input-text",
            "border-ui-input-border/50"
          );
          btn.classList.remove(
            "bg-ui-button-surface",
            "text-ui-button-text",
            "border-ui-button-border/50"
          );
        }
      });
    });
  }

  /**
   * Handle attribute selection
   */
  function handleAttributeSelection(attributeType: string, value: string) {
    selectedAttributes[attributeType] = value;

    // Find matching variation
    const matchingVariation = findMatchingVariation();
    if (matchingVariation) {
      updateProductUI(matchingVariation);
    }

    // Update button states
    updateAttributeButtonStates();
    updateCartStatusDisplay();
  }

  /**
   * Update quantity button states
   */
  function updateQuantityButtonStates() {
    const quantityInput = document.getElementById(
      "quantity-input"
    ) as HTMLInputElement;
    const decreaseButton = document.getElementById(
      "decrease-quantity"
    ) as HTMLButtonElement;
    const increaseButton = document.getElementById(
      "increase-quantity"
    ) as HTMLButtonElement;

    if (!quantityInput || !decreaseButton || !increaseButton) return;

    const currentValue = parseInt(quantityInput.value, 10) || 1;
    const maxValue = parseInt(quantityInput.max, 10) || 1;

    decreaseButton.disabled = currentValue <= 1;
    increaseButton.disabled = currentValue >= maxValue;
  }

  /**
   * Setup attribute buttons
   */
  function setupAttributeButtons() {
    const attributeButtons = document.querySelectorAll(".attribute-button");

    attributeButtons.forEach((button) => {
      button.addEventListener("click", (e) => {
        const btn = e.currentTarget as HTMLButtonElement;
        if (btn.disabled) return;

        const attributeType = btn.dataset.attributeType;
        const attributeValue = btn.dataset.attributeValue;

        if (attributeType && attributeValue) {
          handleAttributeSelection(attributeType, attributeValue);
        }
      });
    });
  }

  /**
   * Setup quantity controls
   */
  function setupQuantityControls() {
    const quantityInput = document.getElementById(
      "quantity-input"
    ) as HTMLInputElement;
    const decreaseButton = document.getElementById(
      "decrease-quantity"
    ) as HTMLButtonElement;
    const increaseButton = document.getElementById(
      "increase-quantity"
    ) as HTMLButtonElement;

    if (!quantityInput || !decreaseButton || !increaseButton) return;

    updateQuantityButtonStates();

    decreaseButton.addEventListener("click", () => {
      const currentValue = parseInt(quantityInput.value, 10) || 1;
      if (currentValue > 1) {
        quantityInput.value = String(currentValue - 1);
        updateQuantityButtonStates();
      }
    });

    increaseButton.addEventListener("click", () => {
      const currentValue = parseInt(quantityInput.value, 10) || 1;
      const maxValue = parseInt(quantityInput.max, 10) || 1;

      if (currentValue < maxValue) {
        quantityInput.value = String(currentValue + 1);
        updateQuantityButtonStates();
      }
    });

    quantityInput.addEventListener("change", () => {
      let value = parseInt(quantityInput.value, 10);
      const max = parseInt(quantityInput.max, 10) || 1;

      if (isNaN(value) || value < 1) {
        value = 1;
      } else if (value > max) {
        value = max;
      }

      quantityInput.value = String(value);
      updateQuantityButtonStates();
    });
  }

  /**
   * Setup add to cart handler
   */
  function setupAddToCartHandler() {
    const button = document.getElementById("add-to-cart-button");
    if (!button) return;

    const newButton = button.cloneNode(true) as HTMLElement;
    button.parentNode?.replaceChild(newButton, button);

    newButton.addEventListener("click", async () => {
      const btnElement = newButton as HTMLButtonElement;
      if (btnElement.disabled || isProcessing) return;

      isProcessing = true;
      const originalText = btnElement.textContent || "Add to Cart";
      btnElement.textContent = "Adding...";
      btnElement.classList.add("opacity-70");

      try {
        const productData = btnElement.dataset.product;
        if (!productData) {
          throw new Error("No product data found");
        }

        const product = JSON.parse(productData);
        const quantityInput = document.getElementById(
          "quantity-input"
        ) as HTMLInputElement;
        const quantity = quantityInput ? parseInt(quantityInput.value, 10) : 1;

        if (isNaN(quantity) || quantity < 1) {
          window.showNotification("Please enter a valid quantity", "error");
          return;
        }

        const itemKey = `${product.id}:${product.variationId}`;
        const existingItems = cart.getItems();
        const existingItem = existingItems.find(
          (item) => `${item.id}:${item.variationId}` === itemKey
        );

        if (existingItem) {
          const maxAvailable = parseInt(quantityInput?.max || "999", 10);
          const newTotal = existingItem.quantity + quantity;

          if (newTotal > maxAvailable) {
            window.showNotification(
              `Cannot add more. Maximum available: ${maxAvailable}`,
              "error"
            );
          } else {
            const result = await cart.updateQuantity(itemKey, newTotal);
            if (result.success) {
              window.showNotification(
                `Updated quantity to ${newTotal}`,
                "success"
              );
              if (quantityInput) {
                quantityInput.value = "1";
                updateQuantityButtonStates();
              }
            } else {
              window.showNotification(
                result.message || "Failed to update quantity",
                "error"
              );
            }
          }
        } else {
          product.quantity = quantity;
          const result = await cart.addItem(product);

          if (result.success) {
            window.showNotification(`Added ${quantity} to cart`, "success");
            if (quantityInput) {
              quantityInput.value = "1";
              updateQuantityButtonStates();
            }
          } else {
            window.showNotification(
              result.message || "Failed to add to cart",
              "error"
            );
          }
        }

        updateCartStatusDisplay();
      } catch (error) {
        console.error("Error modifying cart:", error);
        window.showNotification("Failed to update cart", "error");
      } finally {
        isProcessing = false;
        btnElement.textContent = originalText;
        btnElement.classList.remove("opacity-70");
      }
    });
  }

  /**
   * Update cart status display
   */
  function updateCartStatusDisplay() {
    if (!currentVariation) return;

    const itemKey = `${currentVariation.id || ""}:${currentVariation.variationId}`;
    const cartItems = cart.getItems();
    const existingItem = cartItems.find(
      (item) => `${item.id}:${item.variationId}` === itemKey
    );

    const cartStatus = document.getElementById("cart-status");
    if (!cartStatus) return;

    if (existingItem) {
      cartStatus.textContent = `${existingItem.quantity} in cart`;
      cartStatus.classList.remove("hidden");
    } else {
      cartStatus.textContent = "";
      cartStatus.classList.add("hidden");
    }
  }

  /**
   * Setup fallback variation buttons (for products without structured attributes)
   */
  function setupFallbackVariationButtons() {
    const variationButtons = document.querySelectorAll("[data-variation-id]");

    variationButtons.forEach((button) => {
      button.addEventListener("click", async () => {
        const btn = button as HTMLButtonElement;
        if (btn.disabled) return;

        const variationId = btn.dataset.variationId;
        const variation = variations.find((v) => v.variationId === variationId);

        if (variation) {
          currentVariation = variation;
          updateProductUI(variation);

          // Update button styles
          variationButtons.forEach((b) => {
            b.classList.remove(
              "bg-ui-button-surface",
              "text-ui-button-text",
              "border-ui-button-border/50"
            );
            b.classList.add(
              "bg-ui-input-surface",
              "text-ui-input-text",
              "border-ui-input-border/50"
            );
          });

          button.classList.add(
            "bg-ui-button-surface",
            "text-ui-button-text",
            "border-ui-button-border/50"
          );
          button.classList.remove(
            "bg-ui-input-surface",
            "text-ui-input-text",
            "border-ui-input-border/50"
          );

          updateCartStatusDisplay();
        }
      });
    });
  }

  /**
   * Initialize everything on page load
   */
  document.addEventListener("astro:page-load", () => {
    if (!initializeData()) {
      console.error("Failed to initialize variation data");
      return;
    }

    setupAttributeButtons();
    setupQuantityControls();
    setupFallbackVariationButtons();
    setupAddToCartHandler();
    updateAttributeButtonStates();
    updateCartStatusDisplay();
  });
</script>
