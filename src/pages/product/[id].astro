---
import Layout from "@/layouts/Layout.astro";
import Button from "@/components/Button.astro";
import { fetchProduct } from "@/lib/square/client";
import { MoneyUtils } from "@/lib/square/money";
import { cart } from "@/lib/cart";
import { checkItemInventory } from "@/lib/square/inventory";

const { id } = Astro.params;
const product = id ? await fetchProduct(id) : null;

if (!product) {
  return Astro.redirect("/404");
}

// Check inventory status, but don't block rendering if it fails
let availableQuantity = 1; // Default to allowing purchases
let inventoryError = false;

try {
  availableQuantity = await checkItemInventory(product.variationId);
  console.log(`Server-side inventory check: ${availableQuantity} available`);
} catch (err) {
  // If inventory check fails, we'll still show the product
  console.error(
    `Inventory check error: ${err instanceof Error ? err.message : String(err)}`
  );
  inventoryError = true;
}

const inStock = availableQuantity > 0 || inventoryError;
const formattedPrice = MoneyUtils.format(MoneyUtils.fromFloat(product.price));

const pageTitle = product.title;
const fullTitle = `${pageTitle} | El Camino`;
---

<Layout title={fullTitle}>
  <section class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    <div class="lg:grid lg:grid-cols-2 lg:gap-x-8 items-center">
      <div
        class="aspect-w-4 aspect-h-3 border-4 border-surface-secondary overflow-hidden bg-surface-secondary rounded-sm"
      >
        <img
          src={product.image}
          alt={product.title}
          class={`w-full h-full object-cover ${!inStock ? "opacity-75" : ""}`}
          onerror="this.src='/images/placeholder.png'"
        />

        {
          !inStock && (
            <div class="absolute top-4 left-4 bg-state-error-surface text-state-error-text px-3 py-2 text-md font-bold rounded-sm">
              Out of Stock
            </div>
          )
        }
      </div>

      <div class="mt-10 lg:mt-0">
        <h1 class="text-3xl font-display mb-4 text-content-heading">
          {product.title}
        </h1>

        <div class="mt-3">
          <p class="text-2xl font-display text-content-emphasis">
            {formattedPrice}
          </p>

          <!-- Inventory Status -->
          {
            !inStock ? (
              <p class="mt-2 text-state-error-text">
                This item is currently out of stock
              </p>
            ) : (
              <p class="mt-2 text-state-success-text">
                In Stock{" "}
                {availableQuantity > 1
                  ? `(${availableQuantity} available)`
                  : ""}
              </p>
            )
          }

          {
            inventoryError && (
              <p class="mt-2 text-yellow-500 text-sm">
                Note: Inventory information may not be current
              </p>
            )
          }
        </div>

        {
          product.description && (
            <div class="mt-6">
              <p class="text-base text-content-body">{product.description}</p>
            </div>
          )
        }

        <div class="mt-8">
          <Button
            type="button"
            variant="primary"
            size="lg"
            classes={`w-full md:w-auto ${!inStock ? "opacity-50 cursor-not-allowed" : ""}`}
            data-product={JSON.stringify({
              id: product.id,
              catalogObjectId: product.catalogObjectId,
              variationId: product.variationId,
              title: product.title,
              price: product.price,
              image: product.image,
            })}
            id="add-to-cart-button"
            disabled={!inStock}
          >
            {inStock ? "Add to Cart" : "Out of Stock"}
          </Button>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
  import { cart } from "@/lib/cart";

  let isProcessing = false;
  let addToCartTimeout: number | null = null;

  function setupAddToCartHandler(): void {
    const button = document.getElementById("add-to-cart-button");
    if (!button) {
      console.debug("Add to cart button not found");
      return;
    }

    // Remove existing listener if any
    button.replaceWith(button.cloneNode(true));

    // Get fresh reference after cloning
    const newButton = document.getElementById("add-to-cart-button");
    if (!newButton) return;

    newButton.addEventListener("click", async (e) => {
      // Check if button is disabled
      const btnElement = newButton as HTMLButtonElement;
      if (btnElement.disabled) return;

      if (isProcessing) return;
      isProcessing = true;

      try {
        const productData = newButton.dataset.product;
        if (!productData) {
          throw new Error("No product data found");
        }

        const product = JSON.parse(productData);
        console.log(`Adding ${product.title} to cart`);

        // Check if item is already in cart
        const cartItems = cart.getItems();
        const existingItem = cartItems.find((item) => item.id === product.id);

        if (existingItem) {
          // Item already in cart, don't add again
          showNotification("Item already in cart", "info");
          isProcessing = false;
          return;
        }

        // Add to cart without additional API checks (cart will handle that)
        const result = await cart.addItem({
          ...product,
          quantity: 1,
        });

        if (result.success) {
          showNotification(result.message || "Added to cart");
          console.log("Item added to cart:", product.title);
        } else {
          showNotification(result.message || "Failed to add to cart", "error");
        }
      } catch (error) {
        const errorMessage =
          error instanceof Error ? error.message : String(error);
        console.error("Error adding to cart:", errorMessage);
        showNotification("Failed to add to cart", "error");
      } finally {
        isProcessing = false;
      }
    });
  }

  function showNotification(
    message: string,
    type: "success" | "error" | "info" = "success"
  ): void {
    if (addToCartTimeout) {
      clearTimeout(addToCartTimeout);
    }

    const existingNotification = document.querySelector(".cart-notification");
    if (existingNotification) {
      existingNotification.remove();
    }

    const notification = document.createElement("div");
    notification.className = `cart-notification fixed top-4 right-4 px-4 py-2 rounded-lg z-50 transition-opacity duration-300 ${
      type === "success"
        ? "bg-state-success-surface text-state-success-text"
        : "bg-state-error-surface text-state-error-text"
    }`;
    notification.textContent = message;
    document.body.appendChild(notification);

    // Fade out and remove
    addToCartTimeout = window.setTimeout(() => {
      notification.style.opacity = "0";
      setTimeout(() => notification.remove(), 300);
    }, 2000);
  }

  // Event Listeners
  document.addEventListener("astro:page-load", () => {
    console.debug("Product page: Setting up add to cart handler");
    setupAddToCartHandler();
  });

  // Cleanup on HMR
  if (import.meta.hot) {
    import.meta.hot.dispose(() => {
      if (addToCartTimeout) {
        clearTimeout(addToCartTimeout);
      }
    });
  }
</script>
