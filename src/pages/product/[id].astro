---
import Layout from "@/layouts/Layout.astro";
import Button from "@/components/Button.astro";
import { fetchProduct } from "@/lib/square/client";
import { MoneyUtils } from "@/lib/square/money";
import { checkItemInventory, checkBulkInventory } from "@/lib/square/inventory";

const { id } = Astro.params;
const product = id ? await fetchProduct(id) : null;

if (!product) {
  return Astro.redirect("/404");
}

// Prepare for variation inventory checking
let variationInventory: Record<string, number> = {};
let inventoryError = false;
let selectedVariationInStock = false;
let selectedVariationQuantity = 0;

// Find an in-stock variation to use as default if needed
let defaultVariationId = product.variationId;

try {
  if (product.variations && product.variations.length > 0) {
    // Get all variation IDs
    const variationIds = product.variations.map((v) => v.variationId);

    // Check inventory for all variations at once (more efficient)
    variationInventory = await checkBulkInventory(variationIds);

    // Set inventory status for each variation directly on product.variations
    product.variations = product.variations.map((v) => ({
      ...v,
      inStock: (variationInventory[v.variationId] || 0) > 0,
      quantity: variationInventory[v.variationId] || 0,
    }));

    // Try to find first in-stock variation if default is out of stock
    const defaultIsInStock = (variationInventory[defaultVariationId] || 0) > 0;

    if (!defaultIsInStock && product.variations.length > 0) {
      // Find first in-stock variation
      const firstInStockVariation = product.variations.find((v) => v.inStock);
      if (firstInStockVariation) {
        // Use this as the selected variation
        defaultVariationId = firstInStockVariation.variationId;
        if (firstInStockVariation.image) {
          product.image = firstInStockVariation.image;
        }
      }
    }

    // Set status for selected variation
    const currentVariation = product.variations.find(
      (v) => v.variationId === defaultVariationId
    );

    // Use the found variation or fall back to original selection
    selectedVariationInStock = currentVariation?.inStock || false;
    selectedVariationQuantity = currentVariation?.quantity || 0;

    // Update product with potentially new default variation
    product.variationId = defaultVariationId;
  } else {
    // Fallback to checking just the main variation
    selectedVariationQuantity = await checkItemInventory(product.variationId);
    selectedVariationInStock = selectedVariationQuantity > 0;
  }
} catch (err) {
  // If inventory check fails, we'll still show the product
  console.error(
    `Inventory check error: ${err instanceof Error ? err.message : String(err)}`
  );
  inventoryError = true;
  selectedVariationInStock = true; // Default to allowing purchases if inventory check fails
}

const formattedPrice = MoneyUtils.format(MoneyUtils.fromFloat(product.price));

const pageTitle = product.title;
const fullTitle = `${pageTitle} | El Camino`;

// Get variation data for display
const hasMultipleVariations =
  product.variations && product.variations.length > 1;

// Simplified: Get the unit display directly from the variation if exists
const unitDisplay =
  product.variations?.find((v) => v.variationId === product.variationId)
    ?.unit ||
  product.unit ||
  "";
---

<Layout title={fullTitle}>
  <section class="p-4 sm:p-6 lg:p-8 relative">
    <div
      class="lg:grid lg:grid-cols-2 lg:gap-x-8 xl:gap-x-12 2xl:gap-x-16 items-center"
    >
      <div
        class="aspect-square border-4 border-surface-secondary overflow-hidden bg-surface-secondary relative"
      >
        <img
          id="product-image"
          src={product.image}
          alt={product.title}
          class={`w-full h-full object-cover ${!selectedVariationInStock ? "opacity-75" : ""}`}
          onerror="this.src='/images/placeholder.png'"
        />

        {/* Out of stock overlay */}
        {
          !selectedVariationInStock && (
            <div
              id="stock-overlay"
              class="absolute top-0 left-0 bg-state-error-surface text-state-error-text px-3 py-2 text-md font-bold rounded-sm"
            >
              Sold Out
            </div>
          )
        }
      </div>

      <div class="product-info mt-10 lg:mt-0">
        <h1
          class="flex flex-col text-4xl font-display mb-4 text-content-heading"
        >
          {/* Display the brand if available */}
          {
            product.brand && (
              <span class="text-xl uppercase">{product.brand}</span>
            )
          }
          {product.title}
        </h1>

        <div class="mt-3">
          <p class="text-5xl font-display text-content-emphasis">
            {formattedPrice}
            {/* Display unit if available */}
            {unitDisplay && <span class="text-xl">{unitDisplay}</span>}
          </p>

          <!-- Inventory Status -->
          <div id="inventory-status">
            {
              !selectedVariationInStock ? (
                <p class="mt-2 text-state-error-surface text-md font-bold inline-block">
                  This item is currently unavailable
                </p>
              ) : (
                <p class="mt-2">
                  {selectedVariationQuantity > 1
                    ? `(${selectedVariationQuantity} available)`
                    : ""}
                </p>
              )
            }
          </div>

          {
            inventoryError && (
              <p class="mt-2 text-yellow-500 text-sm">
                Note: Inventory information may not be current
              </p>
            )
          }
        </div>

        {
          product.description && (
            <div class="mt-6 max-w-[54ch]">
              <p class="text-base text-content-body">{product.description}</p>
            </div>
          )
        }

        {/* Display variation options with stock status */}
        {
          product.variations && (
            <div class="mt-4">
              {hasMultipleVariations ? (
                <div>
                  <label
                    for="variation-select"
                    class="block text-sm font-medium text-content-body mb-2"
                  >
                    Options
                  </label>
                  <div class="relative">
                    <select
                      id="variation-select"
                      class="border-ui-input-border bg-ui-input-surface text-ui-input-text p-2 pr-8 rounded-sm"
                      data-variations={JSON.stringify(product.variations)}
                    >
                      {product.variations.map((variation) => (
                        <option
                          value={variation.variationId}
                          selected={
                            variation.variationId === product.variationId
                          }
                          data-image={variation.image || ""}
                          data-unit={variation.unit || ""}
                          data-in-stock={variation.inStock ? "true" : "false"}
                          data-quantity={variation.quantity || 0}
                          disabled={!variation.inStock}
                          class={!variation.inStock ? "text-content-meta" : ""}
                        >
                          {variation.name}{" "}
                          {!variation.inStock ? "(Sold Out)" : ""}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              ) : (
                <div class="inline-block max-w-[54ch]">
                  {product.variations.find(
                    (v) => v.variationId === product.variationId
                  )?.name || ""}
                  <input
                    type="hidden"
                    id="variation-select"
                    value={product.variationId}
                    data-variations={JSON.stringify(product.variations || [])}
                    data-in-stock={
                      product.variations.find(
                        (v) => v.variationId === product.variationId
                      )?.inStock
                        ? "true"
                        : "false"
                    }
                    data-quantity={
                      product.variations.find(
                        (v) => v.variationId === product.variationId
                      )?.quantity || 0
                    }
                  />
                </div>
              )}
            </div>
          )
        }

        <div class="mt-8">
          <Button
            type="button"
            variant="primary"
            size="lg"
            classes={`w-full md:w-auto ${!selectedVariationInStock ? "opacity-50 pointer-events-none cursor-not-allowed" : ""}`}
            data-product={JSON.stringify({
              id: product.id,
              catalogObjectId: product.catalogObjectId,
              variationId: product.variationId,
              title: product.title,
              price: product.price,
              image: product.image,
              unit: unitDisplay,
              variationName: product.variations?.find(
                (v) => v.variationId === product.variationId
              )?.name,
            })}
            id="add-to-cart-button"
            disabled={!selectedVariationInStock}
          >
            {selectedVariationInStock ? "Add to Cart" : "Sold Out"}
          </Button>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
  import { cart } from "@/lib/cart";
  import { MoneyUtils } from "@/lib/square/money";
  import type { ProductVariation } from "@/lib/square/types";

  let isProcessing = false;
  let addToCartTimeout: number | null = null;

  // Helper function for getting data values with fallbacks
  function getDataValue(
    option: HTMLOptionElement,
    variation: any,
    field: string,
    defaultValue = ""
  ) {
    return option.dataset[field] || variation[field] || defaultValue;
  }

  // Helper function for creating a compound variation key
  function getVariationKey(item: { id: string; variationId: string }) {
    return `${item.id}:${item.variationId}`;
  }

  function setupVariationSelector(): void {
    const select = document.getElementById(
      "variation-select"
    ) as HTMLSelectElement;
    if (!select) return;

    const addToCartButton = document.getElementById("add-to-cart-button");
    if (!addToCartButton) return;

    // Parse variations data
    const variations = JSON.parse(
      select.dataset.variations || "[]"
    ) as ProductVariation[];

    // Update price and button data when variation changes
    select.addEventListener("change", () => {
      const selectedVariationId = select.value;
      const selectedOption = select.options[select.selectedIndex];
      const selectedVariation = variations.find(
        (v: ProductVariation) => v.variationId === selectedVariationId
      );
      if (!selectedVariation) return;

      // Get variation stock status - strict comparison to "true" string
      const inStock = selectedOption.dataset.inStock === "true";
      const quantity = parseInt(selectedOption.dataset.quantity || "0", 10);

      // Update price display
      const priceElement = document.querySelector(".text-content-emphasis");
      if (priceElement) {
        const formattedPrice = MoneyUtils.format(
          MoneyUtils.fromFloat(selectedVariation.price)
        );

        // Get unit using the helper function
        const unitDisplay = getDataValue(
          selectedOption,
          selectedVariation,
          "unit"
        );

        // Update price and unit display
        if (unitDisplay) {
          priceElement.innerHTML = `${formattedPrice} <span class="text-xl">${unitDisplay}</span>`;
        } else {
          priceElement.textContent = formattedPrice;
        }
      }

      // Update image if the variation has its own image
      const productImage = document.getElementById(
        "product-image"
      ) as HTMLImageElement;
      const variationImage =
        selectedOption.dataset.image || selectedVariation.image;
      if (productImage && variationImage) {
        productImage.src = variationImage;
      }

      // Update product data on button
      const productData = JSON.parse(addToCartButton.dataset.product || "{}");

      // Update product data with destructuring
      if (selectedVariation) {
        const { name, price, unit = "", image } = selectedVariation;

        // Update product data with Object.assign
        Object.assign(productData, {
          variationId: selectedVariationId,
          variationName: name,
          price,
          unit,
          ...(image && { image }),
        });
      }

      // Save updated data back to the button
      addToCartButton.dataset.product = JSON.stringify(productData);
    });
  }

  function setupAddToCartHandler(): void {
    const button = document.getElementById("add-to-cart-button");
    if (!button) return;

    // Remove existing listener if any
    button.replaceWith(button.cloneNode(true));

    // Get fresh reference after cloning
    const newButton = document.getElementById("add-to-cart-button");
    if (!newButton) return;

    newButton.addEventListener("click", async (e) => {
      try {
        // Check if button is disabled first
        const btnElement = newButton as HTMLButtonElement;
        if (btnElement.disabled || isProcessing) return;
        isProcessing = true;

        // Get the current variation selection directly
        const select = document.getElementById(
          "variation-select"
        ) as HTMLSelectElement;

        // Start with base product data from the button
        const baseProductData = newButton.dataset.product;
        if (!baseProductData) {
          throw new Error("No product data found");
        }

        // Parse the base product
        const product = JSON.parse(baseProductData);

        // If there's a variation selector, use its current value
        if (select?.value) {
          const currentVariationId = select.value;
          const variationsData = select.dataset.variations;

          if (variationsData) {
            const variations = JSON.parse(variationsData);
            const selectedVariation = variations.find(
              (v: { variationId: string }) =>
                v.variationId === currentVariationId
            );

            if (selectedVariation) {
              // Update product data with destructuring
              const { name, price, unit = "", image } = selectedVariation;

              // Update product data using Object.assign
              Object.assign(product, {
                variationId: currentVariationId,
                variationName: name,
                price,
                unit,
                ...(image && { image }),
              });
            }
          }
        }

        // Check if this specific variation is already in cart using compound key
        const cartItems = cart.getItems();
        const productKey = getVariationKey(product);
        const existingItem = cartItems.find(
          (item) => getVariationKey(item) === productKey
        );

        if (existingItem) {
          window.showNotification("Item already in cart", "info");
          isProcessing = false;
          return;
        }

        // Add to cart with the current variation
        const result = await cart.addItem({
          ...product,
          quantity: 1,
        });

        if (result.success) {
          window.showNotification(result.message || "Added to cart");
        } else {
          window.showNotification(
            result.message || "Failed to add to cart",
            "error"
          );
        }
      } catch (error) {
        console.error("Error adding to cart:", error);
        window.showNotification("Failed to add to cart", "error");
      } finally {
        isProcessing = false;
      }
    });
  }

  // Event Listeners
  document.addEventListener("astro:page-load", () => {
    setupVariationSelector();
    setupAddToCartHandler();
  });

  // Cleanup
  if (import.meta.hot) {
    import.meta.hot.dispose(() => {
      if (addToCartTimeout) {
        clearTimeout(addToCartTimeout);
      }
    });
  }
</script>
