---
import Layout from "@/layouts/Layout.astro";
import Button from "@/components/Button.astro";
import Modal from "@/components/Modal.astro";
import RecentlyViewed from "@/components/RecentlyViewed.astro";
import Breadcrumbs from "@/components/Breadcrumbs.astro";
import { fetchProduct, fetchProducts } from "@/lib/square/client";
import { MoneyUtils } from "@/lib/square/money";
import { checkBulkInventory } from "@/lib/square/inventory";
import {
  createInitialSelectionState,
  getAttributeDisplayName,
} from "@/lib/square/variationParser";
import type { Product } from "@/lib/square/types";
import {
  extractIdFromSlug,
  createSlug,
  getVariationFromVariantParam,
  createSEOTitle,
  createSlugMapping,
} from "@/lib/square/slugUtils";
import {
  EL_CAMINO_LOGO_DATA_URI,
  EL_CAMINO_LOADER_DATA_URI,
} from "@/lib/constants/assets";
import {
  generateProductSchema,
  generateOGData,
  generateTwitterCardData,
} from "@/lib/product/structuredData";
import { generateBreadcrumbs } from "@/lib/product/breadcrumbs";
import { fetchCategories } from "@/lib/square/categories";

// Get the slug or ID from URL params
const { id: slugOrId } = Astro.params;
const variantParam = Astro.url.searchParams.get("variant");

if (!slugOrId) {
  return Astro.redirect("/404");
}

// Check if this looks like a Square ID (uppercase alphanumeric, 24+ chars)
const looksLikeSquareId = /^[A-Z0-9]{24,}$/.test(slugOrId);

let product;
let id;
let allProductsCache: Product[] | undefined;

if (looksLikeSquareId) {
  // Direct ID URL - fast path, no slug mapping needed
  product = await fetchProduct(slugOrId);
  id = slugOrId;
} else {
  // Slug URL - resolve to ID via API route (cached at edge)
  // This keeps readable URLs while making resolution faster
  try {
    const apiUrl = new URL("/api/resolve-product", Astro.url.origin);
    apiUrl.searchParams.set("slug", slugOrId);

    console.log(`[PDP] Resolving slug via API: ${slugOrId}`);
    const response = await fetch(apiUrl.toString());

    if (response.ok) {
      const data = await response.json();
      id = data.id;
      console.log(`[PDP] API resolved slug "${slugOrId}" to ID: ${id}`);

      // Fetch product with resolved ID
      product = await fetchProduct(id);
    } else {
      console.log(
        `[PDP] API route failed with status ${response.status}, falling back to direct resolution`
      );
      // API returned error, fallback to direct slug resolution
      allProductsCache = await fetchProducts();
      const slugMapping = createSlugMapping(allProductsCache);
      id = extractIdFromSlug(slugOrId, slugMapping);

      if (id) {
        console.log(`[PDP] Fallback resolved slug "${slugOrId}" to ID: ${id}`);
        product = await fetchProduct(id);
      } else {
        console.error(`[PDP] Failed to resolve slug: ${slugOrId}`);
      }
    }
  } catch (error) {
    console.error("[PDP] Error calling resolve-product API:", error);
    // Fallback to direct slug resolution
    allProductsCache = await fetchProducts();
    const slugMapping = createSlugMapping(allProductsCache);
    id = extractIdFromSlug(slugOrId, slugMapping);

    if (id) {
      console.log(
        `[PDP] Fallback (after error) resolved slug "${slugOrId}" to ID: ${id}`
      );
      product = await fetchProduct(id);
    } else {
      console.error(`[PDP] Failed to resolve slug after error: ${slugOrId}`);
    }
  }
}

if (!product) {
  console.error(`Product not found for: ${slugOrId}`);
  return Astro.redirect("/404");
}

console.log(
  `[PDP] Successfully loaded product: ${product.title} (ID: ${product.id})`
);

// Handle variant parameter
if (variantParam && product.variations) {
  const targetVariation = getVariationFromVariantParam(product, variantParam);

  if (targetVariation) {
    // Update product with selected variant
    product.selectedVariationId = targetVariation.variationId;
    product.price = targetVariation.price;
    if (targetVariation.image) {
      product.image = targetVariation.image;
    }
  } else {
    // Invalid variant parameter - redirect to base product
    return Astro.redirect(`/product/${id}`, 301);
  }
}

if (!product) {
  return Astro.redirect("/404");
}

// Set default variation ID and prepare for inventory checking
let defaultVariationId = product.variationId;
let variations = product.variations || [];

// Fetch inventory only (related products will load client-side)
const inventoryMap = variations.length > 0
  ? await checkBulkInventory(variations.map((v) => v.variationId))
  : ({} as Record<string, number>);

// Process inventory results
if (variations.length > 0) {
  try {
    // Update variation data with inventory information
    variations = variations.map((v) => ({
      ...v,
      inStock: (inventoryMap[v.variationId] || 0) > 0,
      quantity: inventoryMap[v.variationId] || 0,
    }));

    // Check if default variation is in stock
    const defaultIsInStock = (inventoryMap[defaultVariationId] || 0) > 0;

    // If default is out of stock, find first in-stock variation
    if (!defaultIsInStock && variations.length > 0) {
      const firstInStockVariation = variations.find((v) => v.inStock);
      if (firstInStockVariation) {
        defaultVariationId = firstInStockVariation.variationId;
        // Use variation-specific image if available
        if (firstInStockVariation.image) {
          product.image = firstInStockVariation.image;
        }
      }
    }
  } catch (err) {
    console.error(
      `Inventory processing error: ${err instanceof Error ? err.message : String(err)}`
    );
    // Default to allowing purchases if inventory check fails
    variations = variations.map((v) => ({
      ...v,
      inStock: true,
      quantity: 999,
    }));
  }
} else {
  // Single variation product - mark as in stock by default
  const quantity = inventoryMap[product.variationId] || 999;
  variations = [
    {
      id: product.variationId,
      variationId: product.variationId,
      name: product.title,
      price: product.price,
      inStock: quantity > 0,
      quantity: quantity,
      attributes: {}, // Add empty attributes for consistency
    },
  ];
}

// Create initial selection state using the parser
const selectionState = createInitialSelectionState(variations);
const availableAttributes = selectionState.availableAttributes;
const attributeTypes = Object.keys(availableAttributes);

// Find selected variation
const selectedVariation =
  variations.find((v) => v.variationId === defaultVariationId) || variations[0];
const selectedVariationInStock = selectedVariation?.inStock || false;
const selectedVariationQuantity = selectedVariation?.quantity || 0;
const formattedPrice = MoneyUtils.format(
  MoneyUtils.fromFloat(selectedVariation?.price || product.price)
);

// Check if we have multiple variations
const hasMultipleVariations = variations.length > 1;

// Generate structured data and social meta tags
const baseUrl = Astro.url.origin;

// Generate breadcrumbs
let breadcrumbPath;
try {
  const categories = await fetchCategories();
  breadcrumbPath = await generateBreadcrumbs(product, categories, baseUrl);
} catch (err) {
  console.error("Failed to generate breadcrumbs:", err);
  // Non-critical, continue without breadcrumbs
}

const productSchema = generateProductSchema(
  product,
  selectedVariation,
  baseUrl
);
const ogData = generateOGData(product, selectedVariation, baseUrl);
const twitterData = generateTwitterCardData(product, baseUrl);

// Set product metadata
const pageTitle = product.title;
const selectedVariationForSEO =
  variantParam && product.variations
    ? product.variations.find(
        (v) => v.variationId === product.selectedVariationId
      )
    : undefined;
const fullTitle = createSEOTitle(product, selectedVariationForSEO);
const unitDisplay = selectedVariation?.unit || product.unit || "";

// Set response caching headers for performance optimization
// Browser: Cache for 1 minute, then revalidate
Astro.response.headers.set(
  "Cache-Control",
  "public, max-age=60, must-revalidate"
);

// Netlify CDN: Serve fresh for 5 minutes, then serve stale for 1 hour while revalidating
// durable directive shares cache globally across all edge nodes
Astro.response.headers.set(
  "Netlify-CDN-Cache-Control",
  "public, max-age=0, s-maxage=300, stale-while-revalidate=3600, durable" //cSpell:ignore maxage
);

// Add cache tag for per-product invalidation via webhooks
Astro.response.headers.set(
  "Netlify-Cache-Tag",
  `product-${product.id},products`
);

// Vary header for cookie-based personalization (if needed in future)
Astro.response.headers.set("Netlify-Vary", "cookie");
---

<Layout title={fullTitle} structuredData={productSchema}>
  <!-- Open Graph Tags -->
  <meta property="og:title" content={ogData.title} slot="head" />
  <meta property="og:description" content={ogData.description} slot="head" />
  <meta property="og:image" content={ogData.image} slot="head" />
  <meta property="og:url" content={ogData.url} slot="head" />
  <meta property="og:type" content={ogData.type} slot="head" />
  <meta property="og:site_name" content={ogData.siteName} slot="head" />
  <meta property="product:price:amount" content={ogData.price} slot="head" />
  <meta
    property="product:price:currency"
    content={ogData.currency}
    slot="head"
  />
  <meta
    property="product:availability"
    content={ogData.availability}
    slot="head"
  />

  <!-- Twitter Card Tags -->
  <meta name="twitter:card" content={twitterData.card} slot="head" />
  <meta name="twitter:title" content={twitterData.title} slot="head" />
  <meta
    name="twitter:description"
    content={twitterData.description}
    slot="head"
  />
  <meta name="twitter:image" content={twitterData.image} slot="head" />

  <section class="p-4 sm:p-6 lg:p-8 relative">
    <div
      class="lg:grid lg:grid-cols-2 lg:gap-x-8 xl:gap-x-12 2xl:gap-x-16 items-start"
    >
      <!-- Product Image -->
      <div
        class="aspect-square border-4 border-(--surface-secondary) overflow-hidden bg-(--surface-secondary) relative"
      >
        <!-- Loading placeholder with logo -->
        <div
          class="loading-skeleton absolute inset-0 w-full h-full"
          id="pdp-image-placeholder"
          aria-hidden="true"
        >
          <!-- El Camino logo using data URI -->
          <div
            class="absolute inset-0 flex items-center justify-center"
            style={`background-image: url('${EL_CAMINO_LOADER_DATA_URI}'); background-size: auto; background-position: center; background-repeat: no-repeat; opacity: 0.7;`}
          >
          </div>
        </div>

        <img
          id="product-image"
          src={product.image}
          alt={product.title}
          class={`w-full h-full object-cover opacity-0 transition-opacity duration-300 ${!selectedVariationInStock ? "opacity-75" : ""}`}
          loading="eager"
          fetchpriority="high"
          onload="this.classList.add('opacity-100'); document.getElementById('pdp-image-placeholder')?.remove()"
          onerror={`this.src='${EL_CAMINO_LOGO_DATA_URI}'; this.classList.add('opacity-100'); document.getElementById('pdp-image-placeholder')?.remove()`}
          role="img"
          aria-label={product.title || "Product image"}
        />

        {/* Out of stock overlay */}
        {
          !selectedVariationInStock && (
            <div
              id="stock-overlay"
              class="absolute top-0 left-0 bg-state-error-surface text-state-error-text px-3 py-2 text-md font-bold rounded-br-sm"
            >
              Sold Out
            </div>
          )
        }
      </div>

      <!-- Product Info -->
      <div class="product-info mt-4 xl:mt-0 max-w-xl">
        <!-- Breadcrumbs -->
        {breadcrumbPath && <Breadcrumbs breadcrumbPath={breadcrumbPath} />}
        <h1
          class="flex flex-col font-display font-bold text-5xl lg:text-6xl xl:text-7xl 2xl:text-8xl leading-[0.8] text-(--content-heading) text-balance"
        >
          <!-- Brand display -->
          {
            product.brand && (
              <span class="text-xl font-normal uppercase">{product.brand}</span>
            )
          }
          {product.title}
        </h1>

        <!-- Price Display -->
        <div class="mt-2">
          <h2
            id="price-display"
            class="text-4xl xl:text-5xl font-display font-bold text-(--content-emphasis)"
          >
            {formattedPrice}
            {/* Unit display */}
            {
              unitDisplay && (
                <span class="text-xl" id="unit-display">
                  {unitDisplay}
                </span>
              )
            }
          </h2>
          <small class="italic"
            >Shipping &amp; taxes are calculated at checkout</small
          >
        </div>

        <!-- Dynamic Attribute Selectors -->
        {
          hasMultipleVariations &&
            attributeTypes
              .filter(
                (attributeType) =>
                  availableAttributes[attributeType]?.length > 1
              )
              .map((attributeType) => {
                const attributeValues = availableAttributes[attributeType];
                const displayName = getAttributeDisplayName(attributeType);

                return (
                  <div class="mt-6">
                    <label
                      for="quantity-input"
                      class="text-sm font-medium block mb-1"
                    >
                      {displayName}
                    </label>
                    <div class="flex flex-wrap gap-2">
                      {attributeValues.map((value) => {
                        const isAvailable = variations.some((variation) => {
                          if (!variation.attributes || !variation.inStock)
                            return false;
                          return variation.attributes[attributeType] === value;
                        });

                        return (
                          <button
                            type="button"
                            data-attribute-type={attributeType}
                            data-attribute-value={value}
                            class:list={[
                              "px-2.5 py-1.5 border rounded-[4px] attribute-button",
                              "bg-(--ui-input-surface) text-(--ui-input-text) border-(--ui-input-border)/50",
                              !isAvailable && "opacity-50",
                            ]}
                            disabled={!isAvailable}
                          >
                            {value}
                          </button>
                        );
                      })}
                    </div>
                  </div>
                );
              })
        }

        <!-- Single attribute display (when not varying) -->
        {
          attributeTypes
            .filter(
              (attributeType) =>
                availableAttributes[attributeType]?.length === 1
            )
            .map((attributeType) => {
              const attributeValues = availableAttributes[attributeType];
              const displayName = getAttributeDisplayName(attributeType);

              return (
                <div class="mt-4">
                  <label
                    for="quantity-input"
                    class="text-sm font-medium block mb-1"
                  >
                    {displayName}
                  </label>
                  <div class="inline-block px-4 py-2 bg-(--ui-button-surface) text-(--ui-button-text) border-(--ui-button-border)/50 rounded-[4px]">
                    {attributeValues[0]}
                  </div>
                </div>
              );
            })
        }

        <!-- Fallback: Standard Variation Selection (for variations that don't have structured attributes) -->
        {
          hasMultipleVariations && attributeTypes.length === 0 && (
            <div class="mt-6">
              <h3 class="text-sm font-medium text-(--content-heading) mb-2">
                Options
              </h3>
              <div id="variation-buttons" class="flex flex-wrap gap-2">
                {variations.map((variation) => (
                  <button
                    type="button"
                    data-variation-id={variation.variationId}
                    data-price={variation.price}
                    data-name={variation.name}
                    data-quantity={variation.quantity}
                    data-in-stock={variation.inStock ? "true" : "false"}
                    data-image={variation.image || ""}
                    data-unit={variation.unit || ""}
                    class:list={[
                      "px-4 py-2 border rounded-[4px]",
                      variation.variationId === defaultVariationId
                        ? "bg-(--ui-button-surface) text-(--ui-button-text) border-(--ui-button-border)/50"
                        : "bg-(--ui-input-surface) text-(--ui-input-text) border-(--ui-input-border)/50",
                      !variation.inStock && "opacity-75",
                    ]}
                    disabled={!variation.inStock}
                  >
                    {variation.name}
                  </button>
                ))}
              </div>
            </div>
          )
        }

        <!-- Quantity Input -->
        {
          selectedVariationInStock && (
            <div class="mt-6">
              <div class="flex flex-col space-y-2 items-start">
                <label for="quantity-input" class="text-sm font-medium">
                  Quantity
                </label>
                <div class="flex border border-(--ui-input-border)/50 rounded-[4px] overflow-hidden">
                  <button
                    type="button"
                    id="decrease-quantity"
                    class="w-10 h-10 flex items-center justify-center border-r border-(--ui-input-border)/50 bg-(--ui-input-surface) text-(--ui-input-text)"
                    disabled={true}
                  >
                    -
                  </button>
                  <input
                    type="number"
                    id="quantity-input"
                    min="1"
                    max={selectedVariationQuantity}
                    value="1"
                    class="w-14 h-10 text-center bg-(--ui-input-surface) text-(--ui-input-text) [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none"
                  />
                  <button
                    type="button"
                    id="increase-quantity"
                    class="w-10 h-10 flex items-center justify-center border-l border-(--ui-input-border)/50 bg-(--ui-input-surface) text-(--ui-input-text)"
                    disabled={selectedVariationQuantity <= 1}
                  >
                    +
                  </button>
                </div>
                <div id="availability-indicator" class="text-sm">
                  <span class="text-(--content-meta)" id="remaining-count">
                    {selectedVariationQuantity} available
                  </span>
                  <span id="cart-quantity" class="ml-1 hidden">
                    ( 0 in cart )
                  </span>
                </div>
              </div>
            </div>
          )
        }

        <!-- Hidden data for JavaScript -->
        <input
          type="hidden"
          id="variation-data"
          value={JSON.stringify({
            variations: variations,
            availableAttributes: availableAttributes,
            selectedVariationId: defaultVariationId,
            productId: product.id,
          })}
        />

        <!-- Enhanced Add to Cart Button with Loading States -->
        <div class="mt-4">
          <Button
            type="button"
            variant="primary"
            size="lg"
            classes="w-full md:w-auto"
            loading={false}
            loadingText="Adding to Cart..."
            data-product={JSON.stringify({
              id: product.id,
              catalogObjectId: product.catalogObjectId,
              variationId: defaultVariationId,
              title: product.title,
              price: selectedVariation?.price || product.price,
              image: product.image,
              unit: unitDisplay,
              variationName: selectedVariation?.name || "",
            })}
            id="add-to-cart-button"
            disabled={!selectedVariationInStock}
          >
            {selectedVariationInStock ? "Add to Cart" : "Sold Out"}
          </Button>
        </div>

        <!-- Store Information -->
        <div class="text-sm flex flex-col mt-4 space-y-1 py-2">
          <span class="italic">Available for pick up at El Camino</span>
          <button
            id="location-hours-link"
            class="relative inline-flex self-start font-semibold hover:text-ui-nav-hover before:absolute before:-bottom-0.5 before:left-0 before:w-full before:h-0.5 before:bg-(--ui-nav-hover) before:transform before:scale-x-0 before:origin-right before:transition-transform before:duration-300 before:ease-in-out hover:before:scale-x-100 hover:before:origin-left"
            type="button"
          >
            Store Location &amp; Hours
          </button>
        </div>

        <!-- Product Description -->
        {
          product.description && (
            <div class="mt-6 max-w-[52ch]">
              <p class="text-base text-(--content-body) text-pretty">
                {product.description}
              </p>
            </div>
          )
        }
      </div>
    </div>
  </section>

  <!-- Recently Viewed Section -->
  <div class="px-4 sm:px-6 lg:px-8 mt-8 lg:mt-12">
    <RecentlyViewed currentProductId={product.id} />
  </div>

  <Modal />
</Layout>

<script>
  import { PDPController } from "@/lib/product/pdpController";
  import { processSquareError, logError } from "@/lib/square/errorUtils";
  import { recentlyViewed } from "@/lib/product/recentlyViewed";
  import type { Product } from "@/lib/square/types";

  let pdpController: PDPController | null = null;

  /**
   * Initialize controller from DOM data - with resilient error handling
   */
  function initializePDP(): boolean {
    const dataInput = document.getElementById(
      "variation-data"
    ) as HTMLInputElement;
    if (!dataInput?.value) return false;

    // Clean up existing controller to prevent double event binding
    if (pdpController) {
      pdpController.cleanup();
      pdpController = null;
    }

    try {
      const productData = JSON.parse(dataInput.value);

      // Check if we have the minimum required elements for PDP controller
      const hasAttributeButtons =
        document.querySelectorAll(".attribute-button").length > 0;
      const hasVariationButtons =
        document.querySelectorAll("[data-variation-id]").length > 0;
      const hasQuantityControls =
        document.getElementById("quantity-input") !== null;

      // Only initialize PDP controller if we have interactive elements that need it
      if (hasAttributeButtons || hasVariationButtons || hasQuantityControls) {
        console.log("Initializing PDP controller...");
        console.log("Has attribute buttons:", hasAttributeButtons);
        console.log("Has variation buttons:", hasVariationButtons);
        console.log("Has quantity controls:", hasQuantityControls);
        console.log("Product data:", productData);

        pdpController = new PDPController(productData);
        console.log("PDP controller created:", pdpController);
        return true;
      } else {
        console.log("No interactive elements found - not initializing PDP");
        return true; // This is OK, not an error
      }
    } catch (error) {
      const appError = processSquareError(error, "initializePDP");
      logError(appError);
      console.log(
        "PDP controller failed to initialize, but page will continue working"
      );
      return true; // Don't fail the whole page for this
    }
  }

  /**
   * ✅ ASTRO VIEW TRANSITIONS: Initialize on page load
   */
  // Run immediately since view transitions are disabled
  function initializePage() {
    console.log("Page initialization started");

    const variationDataElement = document.getElementById("variation-data");
    const isProductPage = variationDataElement !== null;

    console.log("variation-data element found:", variationDataElement);
    console.log("isProductPage:", isProductPage);

    if (isProductPage) {
      console.log("Product page detected, calling initializePDP()");

      // Track recently viewed product
      try {
        const productButton = document.getElementById("add-to-cart-button");
        if (productButton) {
          const productDataStr = productButton.getAttribute("data-product");
          if (productDataStr) {
            const productData = JSON.parse(productDataStr);

            // Build full product object for recently viewed
            const productImage =
              (document.getElementById("product-image") as HTMLImageElement)
                ?.src || "";
            const productBrand =
              document.querySelector(".product-info h1 span.uppercase")?.textContent?.trim() ||
              undefined;

            const product: Product = {
              id: productData.id,
              catalogObjectId: productData.catalogObjectId,
              variationId: productData.variationId,
              title: productData.title,
              image: productImage,
              price: productData.price,
              url: window.location.pathname,
              brand: productBrand,
              unit: productData.unit,
            };

            recentlyViewed.add(product);
            console.log("Added to recently viewed:", product.title);
          }
        }
      } catch (error) {
        console.error("Failed to track recently viewed:", error);
        // Non-critical, don't fail page load
      }

      if (!initializePDP()) {
        console.error("Failed to initialize PDP controller");
      }
    } else {
      console.log("Not a product page, skipping PDP initialization");
    }
  }

  // Run on DOM ready
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initializePage);
  } else {
    initializePage();
  }

  // Also handle view transitions when re-enabled
  document.addEventListener("astro:page-load", initializePage);

  /**
   * ✅ ASTRO VIEW TRANSITIONS: Clean up on navigation
   */
  document.addEventListener("astro:after-swap", () => {
    pdpController?.cleanup();
    pdpController = null;
  });
</script>
