---
import Layout from "@/layouts/Layout.astro";
import Button from "@/components/Button.astro";
import { fetchProduct } from "@/lib/square/client";
import { MoneyUtils } from "@/lib/square/money";
import { checkBulkInventory } from "@/lib/square/inventory";

// Get product ID from URL params
const { id } = Astro.params;
const product = id ? await fetchProduct(id) : null;

if (!product) {
  return Astro.redirect("/404");
}

// Prepare for variation inventory checking
let variationInventory: Record<string, number> = {};
let inventoryError = false;
let selectedVariationInStock = false;
let selectedVariationQuantity = 0;

// Find an in-stock variation to use as default if needed
let defaultVariationId = product.variationId;

try {
  if (product.variations && product.variations.length > 0) {
    // Get all variation IDs
    const variationIds = product.variations.map((v) => v.variationId);

    // Check inventory for all variations at once using improved function with caching
    variationInventory = await checkBulkInventory(variationIds);

    // Set inventory status for each variation directly on product.variations
    product.variations = product.variations.map((v) => ({
      ...v,
      inStock: (variationInventory[v.variationId] || 0) > 0,
      quantity: variationInventory[v.variationId] || 0,
    }));

    // Try to find first in-stock variation if default is out of stock
    const defaultIsInStock = (variationInventory[defaultVariationId] || 0) > 0;

    if (!defaultIsInStock && product.variations.length > 0) {
      // Find first in-stock variation
      const firstInStockVariation = product.variations.find((v) => v.inStock);
      if (firstInStockVariation) {
        // Use this as the selected variation
        defaultVariationId = firstInStockVariation.variationId;
        if (firstInStockVariation.image) {
          product.image = firstInStockVariation.image;
        }
      }
    }

    // Set status for selected variation - avoid find by using a Map for O(1) lookup
    const variationMap = new Map(
      product.variations.map((v) => [v.variationId, v])
    );
    const currentVariation = variationMap.get(defaultVariationId);

    // Use the found variation or fall back to original selection
    selectedVariationInStock = currentVariation?.inStock || false;
    selectedVariationQuantity = currentVariation?.quantity || 0;

    // Update product with potentially new default variation
    product.variationId = defaultVariationId;
  } else {
    // For single variation products, use the cached inventory check
    selectedVariationQuantity = variationInventory[product.variationId] || 0;
    selectedVariationInStock = selectedVariationQuantity > 0;
  }
} catch (err) {
  // If inventory check fails, we'll still show the product
  console.error(
    `Inventory check error: ${err instanceof Error ? err.message : String(err)}`
  );
  inventoryError = true;
  selectedVariationInStock = true; // Default to allowing purchases if inventory check fails
}

const formattedPrice = MoneyUtils.format(MoneyUtils.fromFloat(product.price));

const pageTitle = product.title;
const fullTitle = `${pageTitle} | El Camino`;

// Get variation data for display
const hasMultipleVariations =
  product.variations && product.variations.length > 1;

// Use Map for O(1) lookups instead of find operations
const variationMap = product.variations
  ? new Map(product.variations.map((v) => [v.variationId, v]))
  : new Map();

// Get the unit display for the current variation
const selectedVariation = variationMap.get(product.variationId);
const unitDisplay = selectedVariation?.unit || product.unit || "";

// Create variation name lookup for Add to Cart button
const variationName = selectedVariation?.name || "";
---

<Layout title={fullTitle}>
  {/* Preload main product image */}
  <link rel="preload" href={product.image} as="image" />

  <section class="p-4 sm:p-6 lg:p-8 relative">
    <div
      class="lg:grid lg:grid-cols-2 lg:gap-x-8 xl:gap-x-12 2xl:gap-x-16 items-center"
    >
      <div
        class="aspect-square border-4 border-surface-secondary overflow-hidden bg-surface-secondary relative"
      >
        <img
          id="product-image"
          src={product.image}
          alt={product.title}
          class={`w-full h-full object-cover ${!selectedVariationInStock ? "opacity-75" : ""}`}
          loading="eager"
          fetchpriority="high"
          onerror="this.src='/images/placeholder.png'"
        />

        {/* Out of stock overlay */}
        {
          !selectedVariationInStock && (
            <div
              id="stock-overlay"
              class="absolute top-0 left-0 bg-state-error-surface text-state-error-text px-3 py-2 text-md font-bold rounded-sm"
            >
              Sold Out
            </div>
          )
        }
      </div>

      <div class="product-info mt-10 lg:mt-0">
        <h1
          class="flex flex-col text-4xl font-display mb-4 text-content-heading"
        >
          {/* Display the brand if available */}
          {
            product.brand && (
              <span class="text-xl uppercase">{product.brand}</span>
            )
          }
          {product.title}
        </h1>

        <div class="mt-3">
          <p
            id="price-display"
            class="text-5xl font-display text-content-emphasis"
          >
            {formattedPrice}
            {/* Display unit if available */}
            {
              unitDisplay && (
                <span class="text-xl" id="unit-display">
                  {unitDisplay}
                </span>
              )
            }
          </p>

          <!-- Inventory Status -->
          <div id="inventory-status">
            {
              !selectedVariationInStock ? (
                <p class="mt-2 text-state-error-surface text-md font-bold inline-block">
                  This item is currently unavailable
                </p>
              ) : selectedVariationQuantity > 1 ? (
                <p class="mt-2">({selectedVariationQuantity} available)</p>
              ) : null
            }
          </div>

          {
            inventoryError && (
              <p class="mt-2 text-yellow-500 text-sm">
                Note: Inventory information may not be current
              </p>
            )
          }
        </div>

        {
          product.description && (
            <div class="mt-6 max-w-[54ch]">
              <p class="text-base text-content-body">{product.description}</p>
            </div>
          )
        }

        {/* Display variation options with stock status */}
        {
          product.variations && (
            <div class="mt-4">
              {hasMultipleVariations ? (
                <div>
                  <label
                    for="variation-select"
                    class="block text-sm font-medium text-content-body mb-2"
                  >
                    Options
                  </label>
                  <div class="relative">
                    <select
                      id="variation-select"
                      class="border-ui-input-border bg-ui-input-surface text-ui-input-text p-2 pr-8 rounded-sm"
                      data-variations={JSON.stringify(product.variations)}
                    >
                      {product.variations.map((variation) => (
                        <option
                          value={variation.variationId}
                          selected={
                            variation.variationId === product.variationId
                          }
                          data-price={variation.price}
                          data-image={variation.image || ""}
                          data-unit={variation.unit || ""}
                          data-in-stock={variation.inStock ? "true" : "false"}
                          data-quantity={variation.quantity || 0}
                          disabled={!variation.inStock}
                          class={!variation.inStock ? "text-content-meta" : ""}
                        >
                          {variation.name}{" "}
                          {!variation.inStock ? "(Sold Out)" : ""}
                        </option>
                      ))}
                    </select>
                  </div>
                </div>
              ) : (
                <div class="inline-block max-w-[54ch]">
                  {variationName}
                  <input
                    type="hidden"
                    id="variation-select"
                    value={product.variationId}
                    data-variations={JSON.stringify(product.variations || [])}
                    data-in-stock={selectedVariationInStock ? "true" : "false"}
                    data-quantity={selectedVariationQuantity}
                  />
                </div>
              )}
            </div>
          )
        }

        <Button
          type="button"
          variant="primary"
          size="lg"
          classes={`w-full md:w-auto my-6 ${!selectedVariationInStock ? "opacity-50 cursor-not-allowed" : ""}`}
          data-product={JSON.stringify({
            id: product.id,
            catalogObjectId: product.catalogObjectId,
            variationId: product.variationId,
            title: product.title,
            price: product.price,
            image: product.image,
            unit: unitDisplay,
            variationName: variationName,
          })}
          id="add-to-cart-button"
          disabled={!selectedVariationInStock}
        >
          {selectedVariationInStock ? "Add to Cart" : "Sold Out"}
        </Button>
        <div class="">
          <h4>Available for pick up at El Camino</h4>
          <p>Usually ready in 2 hours</p>
          <a href="#">Store Location &amp; Hours</a>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
  import { cart } from "@/lib/cart";
  import { MoneyUtils } from "@/lib/square/money";
  import type { ProductData, ProductVariation } from "@/lib/square/types";

  let isProcessing = false;

  // Helper function for creating a compound variation key
  function getVariationKey(item: { id: string; variationId: string }) {
    return `${item.id}:${item.variationId}`;
  }

  // Price formatting helper with memoization
  const priceCache = new Map<number, string>();
  function getFormattedPrice(price: number): string {
    if (priceCache.has(price)) {
      return priceCache.get(price)!;
    }
    const formatted = MoneyUtils.format(MoneyUtils.fromFloat(price));
    priceCache.set(price, formatted);
    return formatted;
  }

  function setupVariationSelector(): void {
    const select = document.getElementById(
      "variation-select"
    ) as HTMLSelectElement;
    if (!select) return;

    const addToCartButton = document.getElementById("add-to-cart-button");
    if (!addToCartButton) return;

    const priceElement = document.getElementById("price-display");
    const inventoryStatusElement = document.getElementById("inventory-status");
    const productImage = document.getElementById(
      "product-image"
    ) as HTMLImageElement | null;

    // Parse variations data - only do this once
    const variations = JSON.parse(
      select.dataset.variations || "[]"
    ) as ProductVariation[];

    // Create a map for faster lookups
    const variationMap = new Map<string, ProductVariation>(
      variations.map((v) => [v.variationId, v])
    );

    // Update product display when variation changes
    select.addEventListener("change", () => {
      const selectedOption = select.options[select.selectedIndex];
      const selectedVariationId = select.value;

      // Use map for O(1) lookup instead of find
      const selectedVariation = variationMap.get(selectedVariationId);
      if (!selectedVariation) return;

      // Get variation properties using dataset for better performance
      const inStock = selectedOption.dataset.inStock === "true";
      const quantity = parseInt(selectedOption.dataset.quantity || "0", 10);
      const price = parseFloat(
        selectedOption.dataset.price || String(selectedVariation.price)
      );
      const unitDisplay =
        selectedOption.dataset.unit || selectedVariation.unit || "";

      // Update price display
      if (priceElement) {
        const formattedPrice = getFormattedPrice(price);

        // Update price and unit display
        if (unitDisplay) {
          priceElement.innerHTML = `${formattedPrice} <span class="text-xl">${unitDisplay}</span>`;
        } else {
          priceElement.textContent = formattedPrice;
        }
      }

      // Update inventory status text
      if (inventoryStatusElement) {
        if (inStock) {
          inventoryStatusElement.innerHTML =
            quantity > 1 ? `<p class="mt-2">(${quantity} available)</p>` : "";
        } else {
          inventoryStatusElement.innerHTML = `
            <p class="mt-2 text-state-error-surface text-md font-bold inline-block">
              This item is currently unavailable
            </p>
          `;
        }
      }

      // Update image if the variation has its own image
      if (productImage) {
        const variationImage =
          selectedOption.dataset.image || selectedVariation.image;
        if (variationImage) {
          productImage.src = variationImage;
        }

        // Update opacity based on stock
        if (!inStock) {
          productImage.classList.add("opacity-75");
        } else {
          productImage.classList.remove("opacity-75");
        }
      }

      // Update stock overlay
      const stockOverlay = document.getElementById("stock-overlay");
      if (inStock && stockOverlay) {
        stockOverlay.remove();
      } else if (!inStock && !stockOverlay && productImage?.parentElement) {
        const newOverlay = document.createElement("div");
        newOverlay.id = "stock-overlay";
        newOverlay.className =
          "absolute top-0 left-0 bg-state-error-surface text-state-error-text px-3 py-2 text-md font-bold rounded-sm";
        newOverlay.textContent = "Sold Out";
        productImage.parentElement.appendChild(newOverlay);
      }

      // Update product data on button
      const productData = JSON.parse(
        addToCartButton.dataset.product || "{}"
      ) as ProductData;

      // Update product data with selectedVariation properties
      Object.assign(productData, {
        variationId: selectedVariationId,
        variationName: selectedVariation.name,
        price: selectedVariation.price,
        unit: unitDisplay,
      });

      if (selectedVariation.image) {
        productData.image = selectedVariation.image;
      }

      // Save updated data back to the button
      addToCartButton.dataset.product = JSON.stringify(productData);

      // Update button state
      const btnElement = addToCartButton as HTMLButtonElement;
      btnElement.disabled = !inStock;
      btnElement.textContent = inStock ? "Add to Cart" : "Sold Out";

      if (inStock) {
        btnElement.classList.remove("opacity-50", "cursor-not-allowed");
      } else {
        btnElement.classList.add("opacity-50", "cursor-not-allowed");
      }
    });
  }

  function setupAddToCartHandler(): void {
    const button = document.getElementById("add-to-cart-button");
    if (!button) return;

    // Remove existing listener if any (more efficient than cloning)
    const newButton = button.cloneNode(true) as HTMLElement;
    button.parentNode?.replaceChild(newButton, button);

    newButton.addEventListener("click", async () => {
      // Check if button is disabled first
      const btnElement = newButton as HTMLButtonElement;
      if (btnElement.disabled || isProcessing) return;
      isProcessing = true;

      try {
        // Get the product data directly
        const baseProductData = newButton.dataset.product;
        if (!baseProductData) {
          throw new Error("No product data found");
        }

        // Parse the product data
        const product = JSON.parse(baseProductData) as ProductData;

        // Create the compound key for cart lookup
        const productKey = getVariationKey(product);

        // Check if already in cart - use O(1) lookup with Map
        const cartItems = cart.getItems();
        const cartItemMap = new Map(
          cartItems.map((item) => [getVariationKey(item), item])
        );

        if (cartItemMap.has(productKey)) {
          window.showNotification("Item already in cart", "info");
          isProcessing = false;
          return;
        }

        // Add to cart
        const result = await cart.addItem({
          ...product,
          quantity: 1,
        });

        if (result.success) {
          window.showNotification(result.message || "Added to cart");
        } else {
          window.showNotification(
            result.message || "Failed to add to cart",
            "error"
          );
        }
      } catch (error) {
        console.error("Error adding to cart:", error);
        window.showNotification("Failed to add to cart", "error");
      } finally {
        isProcessing = false;
      }
    });
  }

  // Set up event listeners
  document.addEventListener("astro:page-load", () => {
    setupVariationSelector();
    setupAddToCartHandler();
  });
</script>
