---
// src/pages/news/index.astro - Enhanced with pagination support
import Layout from "@/layouts/Layout.astro";
import ArticleGrid from "@/components/ArticleGrid.astro";
import NewsSearchSort from "@/components/NewsSearchSort.astro";
import NewsFilters from "@/components/NewsFilters.astro";
import NewsPaginationControls from "@/components/NewsPaginationControls.astro";
import {
  getNewsPagePosts,
  getAllCategories,
  getAllTags,
} from "@/lib/wordpress/api";
import { buildSearchIndex, buildFilterOptions } from "@/lib/wordpress/types";
import type {
  WordPressPost,
  NewsFilterOptions,
  NewsSearchIndex,
} from "@/lib/wordpress/types";

// Fetch all data at build time
const [newsData, categories, tags] = await Promise.all([
  getNewsPagePosts(),
  getAllCategories(),
  getAllTags(),
]);

const { featuredPost, regularPosts, allPosts } = newsData;

// Pagination configuration
const POSTS_PER_PAGE = 12;

// Build filter options and search index
const filterOptions: NewsFilterOptions = buildFilterOptions(
  allPosts,
  categories,
  tags
);
const searchIndex: NewsSearchIndex = buildSearchIndex(allPosts);

// Always start with most recent first
let displayPosts = [...allPosts].sort(
  (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()
);

// Enhanced URL parameter parsing
const currentParams = new URLSearchParams(Astro.url.search);
const searchQuery = currentParams.get("search")?.toLowerCase() || "";
const sortOrder = currentParams.get("sort") || "newest";
const currentView = (currentParams.get("view") as "grid" | "list") || "grid";
const currentPage = parseInt(currentParams.get("page") || "1", 10);
const categoryFilters = currentParams.getAll("categories");
const tagFilters = currentParams.getAll("tags");
const dateRange = currentParams.get("dateRange") || "";

const hasFilters =
  searchQuery ||
  categoryFilters.length > 0 ||
  tagFilters.length > 0 ||
  dateRange ||
  sortOrder !== "newest";

// Apply all filters with proper precedence
if (hasFilters) {
  // 1. Text search (if provided)
  if (searchQuery) {
    displayPosts = displayPosts.filter(
      (post) =>
        post.title.rendered.toLowerCase().includes(searchQuery) ||
        post.excerpt.rendered.toLowerCase().includes(searchQuery) ||
        post.content.rendered.toLowerCase().includes(searchQuery)
    );
  }

  // 2. Category filtering
  if (categoryFilters.length > 0) {
    displayPosts = displayPosts.filter((post) => {
      const postCategories =
        post._embedded?.["wp:term"]?.[0]
          ?.filter((term) => term.taxonomy === "category")
          ?.map((cat) => cat.slug) || [];
      return categoryFilters.some((filter) => postCategories.includes(filter));
    });
  }

  // 3. Tag filtering
  if (tagFilters.length > 0) {
    displayPosts = displayPosts.filter((post) => {
      const postTags =
        post._embedded?.["wp:term"]?.[0]
          ?.filter((term) => term.taxonomy === "post_tag")
          ?.map((tag) => tag.slug) || [];
      return tagFilters.some((filter) => postTags.includes(filter));
    });
  }

  // 4. Date range filtering
  if (dateRange) {
    const now = new Date();
    const cutoffDate = new Date();

    switch (dateRange) {
      case "week":
        cutoffDate.setDate(now.getDate() - 7);
        break;
      case "month":
        cutoffDate.setMonth(now.getMonth() - 1);
        break;
      case "year":
        cutoffDate.setFullYear(now.getFullYear() - 1);
        break;
    }

    if (dateRange !== "") {
      displayPosts = displayPosts.filter(
        (post) => new Date(post.date) >= cutoffDate
      );
    }
  }

  // 5. Apply sorting
  switch (sortOrder) {
    case "oldest":
      displayPosts.sort(
        (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()
      );
      break;
    case "alphabetical":
      displayPosts.sort((a, b) =>
        a.title.rendered.localeCompare(b.title.rendered)
      );
      break;
    case "alphabetical-desc":
      displayPosts.sort((a, b) =>
        b.title.rendered.localeCompare(a.title.rendered)
      );
      break;
    default: // newest
      displayPosts.sort(
        (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()
      );
  }
}

const totalPosts = allPosts.length;
const filteredCount = displayPosts.length;

// Pagination calculations
const totalPages = Math.ceil(displayPosts.length / POSTS_PER_PAGE);
const paginatedPosts = displayPosts.slice(
  (currentPage - 1) * POSTS_PER_PAGE,
  currentPage * POSTS_PER_PAGE
);
---

<Layout title="The Latest News | El Camino">
  <Fragment slot="head">
    <script define:vars={{ allPosts, searchIndex, filterOptions }}>
      window.newsData = { allPosts, searchIndex, filterOptions };
    </script>
    {hasFilters && <meta name="robots" content="noindex, follow" />}
    <link
      rel="alternate"
      type="application/rss+xml"
      title="El Camino News RSS"
      href="/rss.xml"
    />
  </Fragment>

  <!-- Enhanced layout with filterable grid/list support -->
  <div class="min-h-screen bg-(--surface-primary)">
    <!-- News Header -->
    <div class="p-4 pb-0">
      <div
        class="flex flex-col md:flex-row md:justify-between gap-1 md:gap-4 lg:items-baseline"
      >
        <h1
          class="font-display font-black text-6xl lg:text-7xl xl:text-8xl 2xl:text-9xl leading-[0.8] text-(--content-heading)"
        >
          News
        </h1>

        <!-- Enhanced Search and Sort Bar with View Toggle -->
        <NewsSearchSort
          currentSearch={searchQuery}
          currentSort={sortOrder}
          currentView={currentView}
          totalPosts={totalPosts}
          filteredCount={filteredCount}
        />
      </div>
    </div>

    <!-- Grid Layout -->
    <div class="grid grid-cols-1 lg:grid-cols-4 xl:grid-cols-5 gap-1 p-1">
      <!-- Filter Sidebar -->
      <aside class="lg:col-span-1">
        <NewsFilters
          filterOptions={filterOptions}
          totalPosts={totalPosts}
          filteredCount={filteredCount}
          newsPath="/news"
        />
      </aside>

      <!-- Main Content with Enhanced ArticleGrid -->
      <main class="lg:col-span-3 xl:col-span-4">
        {
          displayPosts.length > 0 ? (
            <ArticleGrid
              posts={displayPosts}
              showSidebar={false}
              filterable={true}
              view={currentView}
            />
          ) : (
            <div class="text-center py-16">
              <div class="text-6xl mb-4 opacity-20">ðŸ“°</div>
              <h2 class="text-2xl font-display font-bold text-(--content-heading) mb-2">
                {hasFilters
                  ? "No articles match your criteria"
                  : "No articles found"}
              </h2>
              <p class="text-(--content-meta) mb-6 max-w-md mx-auto">
                {hasFilters
                  ? "Try adjusting your search, filters, or browse all articles."
                  : "Check back soon for new articles!"}
              </p>
              {hasFilters && (
                <a
                  href="/news"
                  class="font-sans font-semibold text-sm text-center py-2 px-4 border-2 rounded-[4px] text-(--ui-button-text) bg-(--ui-button-surface) border-(--ui-button-border) hover:bg-(--ui-button-surface)/75 transition-all"
                >
                  Clear All Filters
                </a>
              )}
            </div>
          )
        }
      </main>
    </div>
  </div>
</Layout>

<script>
  // Enhanced functionality for view persistence with localStorage
  document.addEventListener("astro:page-load", () => {
    const urlParams = new URLSearchParams(window.location.search);
    let currentView = urlParams.get("view") || "grid";

    // Check localStorage preference if no URL param (without flash)
    if (!urlParams.has("view")) {
      const storedView = localStorage.getItem("newsViewPreference");
      if (storedView && storedView !== "grid") {
        currentView = storedView as "grid" | "list";
        // Update URL without reload
        urlParams.set("view", currentView);
        const newUrl = `${window.location.pathname}?${urlParams.toString()}`;
        window.history.replaceState({}, "", newUrl);
      }
    }

    // Store current view preference
    localStorage.setItem("newsViewPreference", currentView);

    // Update "Clear All Filters" link to preserve view
    const clearFiltersLink = document.querySelector('a[href="/news"]');
    if (clearFiltersLink && currentView !== "grid") {
      clearFiltersLink.setAttribute("href", `/news?view=${currentView}`);
    }

    // Add view parameter to all forms to preserve selection
    const preserveViewInForms = () => {
      const forms = document.querySelectorAll("form");
      forms.forEach((form) => {
        // Add hidden input for view if it doesn't exist
        let viewInput = form.querySelector(
          'input[name="view"]'
        ) as HTMLInputElement;
        if (!viewInput && currentView !== "grid") {
          viewInput = document.createElement("input");
          viewInput.type = "hidden";
          viewInput.name = "view";
          viewInput.value = currentView;
          form.appendChild(viewInput);
        }
      });
    };

    preserveViewInForms();

    // Handle view transitions with smooth animations
    const articleGrid = document.querySelector(
      "[class*='grid'], [class*='flex']"
    );
    if (articleGrid) {
      articleGrid.classList.add("transition-all", "duration-300");
    }

    // Enhanced keyboard shortcuts
    let shortcutHintShown = false;

    document.addEventListener("keydown", (e: KeyboardEvent) => {
      if (
        e.target instanceof HTMLInputElement ||
        e.target instanceof HTMLTextAreaElement
      )
        return;

      if (e.key === "h" && !shortcutHintShown) {
        showShortcutHint();
        shortcutHintShown = true;
        e.preventDefault();
      }
    });

    function showShortcutHint() {
      const hint = document.createElement("div");
      hint.className =
        "fixed top-4 right-4 bg-(--surface-secondary) text-(--content-body) p-3 rounded-lg shadow-lg z-50 text-sm";
      hint.innerHTML = `
        <div class="font-semibold mb-2">Keyboard Shortcuts:</div>
        <div>G - Grid view</div>
        <div>L - List view</div>
        <div>/ - Focus search</div>
      `;

      document.body.appendChild(hint);

      setTimeout(() => {
        hint.remove();
      }, 5000);
    }

    // Focus search with '/' key
    document.addEventListener("keydown", (e: KeyboardEvent) => {
      if (e.key === "/" && !(e.target instanceof HTMLInputElement)) {
        const searchInput = document.querySelector(
          'input[name="search"]'
        ) as HTMLInputElement;
        if (searchInput) {
          searchInput.focus();
          e.preventDefault();
        }
      }
    });

    // Analytics tracking for view changes
    const trackViewChange = (view: string) => {
      if (typeof window !== "undefined" && (window as any).gtag) {
        (window as any).gtag("event", "news_view_change", {
          view_type: view,
          page_path: window.location.pathname,
        });
      }
    };

    trackViewChange(currentView);

    // Accessibility improvements
    const announceViewChange = (view: string) => {
      const announcement = document.createElement("div");
      announcement.setAttribute("aria-live", "polite");
      announcement.setAttribute("aria-atomic", "true");
      announcement.className = "sr-only";
      announcement.textContent = `Switched to ${view} view`;

      document.body.appendChild(announcement);

      setTimeout(() => {
        announcement.remove();
      }, 1000);
    };

    // Listen for view changes via popstate (back/forward navigation)
    window.addEventListener("popstate", () => {
      const newParams = new URLSearchParams(window.location.search);
      const newView = newParams.get("view") || "grid";
      localStorage.setItem("newsViewPreference", newView);
      announceViewChange(newView);
      trackViewChange(newView);
    });
  });
</script>
