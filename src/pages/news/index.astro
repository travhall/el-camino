---
// src/pages/news/index.astro - Enhanced with pagination support
import Layout from "@/layouts/Layout.astro";
import ArticleGrid from "@/components/ArticleGrid.astro";
import NewsSearchSort from "@/components/NewsSearchSort.astro";
import NewsFilters from "@/components/NewsFilters.astro";
import NewsPaginationControls from "@/components/NewsPaginationControls.astro";
import {
  getNewsPagePosts,
  getAllCategories,
  getAllTags,
} from "@/lib/wordpress/api";
import { buildSearchIndex, buildFilterOptions } from "@/lib/wordpress/types";
import type {
  WordPressPost,
  NewsFilterOptions,
  NewsSearchIndex,
} from "@/lib/wordpress/types";

// Fetch all data at build time
const [newsData, categories, tags] = await Promise.all([
  getNewsPagePosts(),
  getAllCategories(),
  getAllTags(),
]);

const { featuredPost, regularPosts, allPosts } = newsData;

// Pagination configuration
const POSTS_PER_PAGE = 12;

// Build filter options and search index
const filterOptions: NewsFilterOptions = buildFilterOptions(
  allPosts,
  categories,
  tags
);
const searchIndex: NewsSearchIndex = buildSearchIndex(allPosts);

// Always start with most recent first
let displayPosts = [...allPosts].sort(
  (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()
);

// Enhanced URL parameter parsing
const currentParams = new URLSearchParams(Astro.url.search);
const searchQuery = currentParams.get("search")?.toLowerCase() || "";
const sortOrder = currentParams.get("sort") || "newest";
const currentView = (currentParams.get("view") as "grid" | "list") || "grid";
const currentPage = parseInt(currentParams.get("page") || "1", 10);
const categoryFilters = currentParams.getAll("categories");
const tagFilters = currentParams.getAll("tags");
const dateRange = currentParams.get("dateRange") || "";

const hasFilters =
  searchQuery ||
  categoryFilters.length > 0 ||
  tagFilters.length > 0 ||
  dateRange ||
  sortOrder !== "newest";

// Apply all filters with proper precedence
if (hasFilters) {
  // 1. Text search (if provided)
  if (searchQuery) {
    displayPosts = displayPosts.filter(
      (post) =>
        post.title.rendered.toLowerCase().includes(searchQuery) ||
        post.excerpt.rendered.toLowerCase().includes(searchQuery) ||
        post.content.rendered.toLowerCase().includes(searchQuery)
    );
  }

  // 2. Category filtering
  if (categoryFilters.length > 0) {
    displayPosts = displayPosts.filter((post) => {
      const postCategories =
        post._embedded?.["wp:term"]?.[0]
          ?.filter((term) => term.taxonomy === "category")
          ?.map((cat) => cat.slug) || [];
      return categoryFilters.some((filter) => postCategories.includes(filter));
    });
  }

  // 3. Tag filtering
  if (tagFilters.length > 0) {
    displayPosts = displayPosts.filter((post) => {
      const postTags =
        post._embedded?.["wp:term"]?.[0]
          ?.filter((term) => term.taxonomy === "post_tag")
          ?.map((tag) => tag.slug) || [];
      return tagFilters.some((filter) => postTags.includes(filter));
    });
  }

  // 4. Date range filtering
  if (dateRange) {
    const now = new Date();
    const cutoffDate = new Date();

    switch (dateRange) {
      case "week":
        cutoffDate.setDate(now.getDate() - 7);
        break;
      case "month":
        cutoffDate.setMonth(now.getMonth() - 1);
        break;
      case "year":
        cutoffDate.setFullYear(now.getFullYear() - 1);
        break;
    }

    if (dateRange !== "") {
      displayPosts = displayPosts.filter(
        (post) => new Date(post.date) >= cutoffDate
      );
    }
  }

  // 5. Apply sorting
  switch (sortOrder) {
    case "oldest":
      displayPosts.sort(
        (a, b) => new Date(a.date).getTime() - new Date(b.date).getTime()
      );
      break;
    case "alphabetical":
      displayPosts.sort((a, b) =>
        a.title.rendered.localeCompare(b.title.rendered)
      );
      break;
    case "alphabetical-desc":
      displayPosts.sort((a, b) =>
        b.title.rendered.localeCompare(a.title.rendered)
      );
      break;
    default: // newest
      displayPosts.sort(
        (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()
      );
  }
}

const totalPosts = allPosts.length;
const filteredCount = displayPosts.length;

// Pagination calculations
const totalPages = Math.ceil(displayPosts.length / POSTS_PER_PAGE);
const paginatedPosts = displayPosts.slice(
  (currentPage - 1) * POSTS_PER_PAGE,
  currentPage * POSTS_PER_PAGE
);

// === ISR CACHING: Enable Edge Caching for News Page ===
// WordPress content changes less frequently than inventory
// Cache for 10 min, serve stale for 7 days while revalidating
Astro.response.headers.set('Cache-Control', 'public, max-age=0, must-revalidate');
Astro.response.headers.set('Netlify-CDN-Cache-Control', 
  'public, durable, s-maxage=600, stale-while-revalidate=604800'
);

// === LCP OPTIMIZATION: Preload first article image ===
import { EnhancedImageOptimizer } from "@/lib/image/enhanced-optimizer";
import { extractEmbeddedData } from "@/lib/wordpress/types";

const firstPost = paginatedPosts[0];
const firstPostData = firstPost ? extractEmbeddedData(firstPost) : null;
const lcpImage = firstPostData?.featuredMedia?.source_url
  ? EnhancedImageOptimizer.generateOptimizedSources(firstPostData.featuredMedia.source_url, {
      width: currentView === "list" ? 160 : 600,
      height: currentView === "list" ? 120 : 400,
      quality: 85,
      priority: true,
    })
  : null;
---

<Layout title="The Latest News | El Camino">
  <Fragment slot="head">
    {/* Preconnect to WordPress CDN for faster image loading */}
    <link rel="preconnect" href="https://elcaminoskateshop.wordpress.com" crossorigin />
    <link rel="dns-prefetch" href="https://elcaminoskateshop.wordpress.com" />
    
    {/* OPTIMIZATION: Preload display font for article titles */}
    <link
      rel="preload"
      href="/fonts/AlumniSans.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />
    
    {/* LCP PRELOAD: Load first article image with format negotiation */}
    {lcpImage && (
      <>
        {/* Preload AVIF (best compression) if available */}
        {lcpImage.avif && (
          <link
            rel="preload"
            href={lcpImage.avif}
            as="image"
            type="image/avif"
            fetchpriority="high"
          />
        )}
        {/* Fallback to WebP if AVIF not available */}
        {!lcpImage.avif && lcpImage.webp && (
          <link
            rel="preload"
            href={lcpImage.webp}
            as="image"
            type="image/webp"
            fetchpriority="high"
          />
        )}
        {/* JPEG fallback */}
        {!lcpImage.avif && !lcpImage.webp && lcpImage.jpeg && (
          <link
            rel="preload"
            href={lcpImage.jpeg}
            as="image"
            type="image/jpeg"
            fetchpriority="high"
          />
        )}
      </>
    )}
    
    <script define:vars={{ allPosts, searchIndex, filterOptions }}>
      window.newsData = { allPosts, searchIndex, filterOptions };
    </script>
    {hasFilters && <meta name="robots" content="noindex, follow" />}
    <link
      rel="alternate"
      type="application/rss+xml"
      title="El Camino News RSS"
      href="/rss.xml"
    />
  </Fragment>

  <!-- Enhanced layout with filterable grid/list support -->
  <div class="min-h-screen bg-(--surface-primary)">
    <!-- News Header -->
    <div class="p-4 pb-0">
      <div
        class="flex flex-col md:flex-row md:justify-between gap-1 md:gap-4 lg:items-baseline"
      >
        <h1
          class="font-display font-black text-6xl lg:text-7xl xl:text-8xl 2xl:text-9xl leading-[0.8] text-(--content-heading)"
        >
          News
        </h1>

        <!-- Enhanced Search and Sort Bar with View Toggle -->
        <NewsSearchSort
          currentSearch={searchQuery}
          currentSort={sortOrder}
          currentView={currentView}
          totalPosts={totalPosts}
          filteredCount={filteredCount}
        />
      </div>
    </div>

    <!-- Grid Layout -->
    <div class="grid grid-cols-1 lg:grid-cols-4 xl:grid-cols-5 gap-1 p-1 pb-0">
      <!-- Filter Sidebar -->
      <aside class="lg:col-span-1">
        <NewsFilters
          filterOptions={filterOptions}
          totalPosts={totalPosts}
          filteredCount={filteredCount}
          newsPath="/news"
        />
      </aside>

      <!-- Main Content with Enhanced ArticleGrid -->
      <main class="lg:col-span-3 xl:col-span-4">
        {
          displayPosts.length > 0 ? (
            <ArticleGrid
              posts={paginatedPosts}
              showSidebar={false}
              filterable={true}
              view={currentView}
            />
            <NewsPaginationControls 
              currentPage={currentPage}
              totalPages={totalPages}
              totalPosts={filteredCount}
              postsPerPage={POSTS_PER_PAGE}
              baseURL="/news"
            />
          ) : (
            <div class="text-center py-16">
              <div class="text-6xl mb-4 opacity-20">ðŸ“°</div>
              <h2 class="text-2xl font-display font-bold text-(--content-heading) mb-2">
                {hasFilters
                  ? "No articles match your criteria"
                  : "No articles found"}
              </h2>
              <p class="text-(--content-meta) mb-6 max-w-md mx-auto">
                {hasFilters
                  ? "Try adjusting your search, filters, or browse all articles."
                  : "Check back soon for new articles!"}
              </p>
              {hasFilters && (
                <a
                  href="/news"
                  class="font-sans font-semibold text-sm text-center py-2 px-4 border-2 rounded-sm text-(--ui-button-text) bg-(--ui-button-surface) border-(--ui-button-border) hover:bg-(--ui-button-surface)/75 transition-all"
                >
                  Clear All Filters
                </a>
              )}
            </div>
          )
        }
      </main>
    </div>
  </div>
</Layout>

<script>
  // console.log("ðŸš¨ NEWS PAGE SCRIPT RUNNING!");
  // console.log("ðŸš¨ Location:", window.location.href);
  
  setTimeout(() => {
    // console.log("ðŸš¨ Testing DOM elements...");
    
    // Test if NewsSearchSort component rendered
    const newsSearchSort = document.querySelector('[class*="NewsSearchSort"], .news-search-sort');
    // console.log("ðŸš¨ NewsSearchSort element:", newsSearchSort);
    
    // Test view toggle buttons specifically
    const viewButtons = document.querySelectorAll('.view-toggle');
    // console.log("ðŸš¨ View toggle buttons:", viewButtons.length);
    viewButtons.forEach((btn, i) => {
      // console.log(`ðŸš¨ Button ${i}:`, btn, btn.getAttribute('data-view'));
    });
    
    // Test for any buttons at all
    const allButtons = document.querySelectorAll('button');
    // console.log("ðŸš¨ All buttons on page:", allButtons.length);
    
    // Test clear search button
    const clearBtn = document.querySelector('.clear-search-btn');
    // console.log("ðŸš¨ Clear search button:", clearBtn);
    
    // REAL FUNCTIONALITY - Add actual working handlers
    if (viewButtons.length > 0) {
      viewButtons.forEach((btn, i) => {
        btn.addEventListener('click', () => {
          // console.log(`ðŸš¨ REAL HANDLER - Button ${i} clicked!`);
          const view = btn.getAttribute('data-view');
          const currentParams = new URLSearchParams(window.location.search);
          
          if (view === 'grid') {
            currentParams.delete('view');
          } else if (view === 'list') {
            currentParams.set('view', 'list');
          }
          
          // Save preference
          try {
            localStorage.setItem('newsViewPreference', view || 'grid');
          } catch (e) {
            // console.log('localStorage failed:', e);
          }
          
          const newUrl = window.location.pathname + (currentParams.toString() ? '?' + currentParams.toString() : '');
          // console.log(`ðŸš¨ Navigating to: ${newUrl}`);
          window.location.href = newUrl;
        });
      });
      // console.log("ðŸš¨ Added REAL view toggle handlers");
    }
    
    // REAL CLEAR BUTTON FUNCTIONALITY
    if (clearBtn) {
      clearBtn.addEventListener('click', (e) => {
        e.preventDefault();
        // console.log("ðŸš¨ REAL CLEAR HANDLER clicked!");
        const currentParams = new URLSearchParams(window.location.search);
        currentParams.delete('search');
        currentParams.delete('page'); // Reset pagination
        
        const newUrl = window.location.pathname + (currentParams.toString() ? '?' + currentParams.toString() : '');
        // console.log(`ðŸš¨ Clearing search, navigating to: ${newUrl}`);
        window.location.href = newUrl;
      });
      // console.log("ðŸš¨ Added REAL clear button handler");
    }
    
  }, 2000);

  document.addEventListener("astro:page-load", () => {
    // CRITICAL: Only run on news pages  
    if (!window.location.pathname.startsWith('/news')) {
      return;
    }

    const urlParams = new URLSearchParams(window.location.search);
    const currentView = urlParams.get("view") || "grid";

    // Store current view preference (simplified)
    localStorage.setItem("newsViewPreference", currentView);

    // Clean form parameter handling - only add view to news-specific forms
    const preserveViewInForms = () => {
      const newsForms = document.querySelectorAll("form");
      newsForms.forEach((form) => {
        const action = form.getAttribute('action') || '';
        
        // Only add view parameter to forms that stay within news section
        if (action === '' || action.startsWith('/news')) {
          let viewInput = form.querySelector('input[name="view"]') as HTMLInputElement;
          if (!viewInput && currentView !== "grid") {
            viewInput = document.createElement("input");
            viewInput.type = "hidden";
            viewInput.name = "view";
            viewInput.value = currentView;
            form.appendChild(viewInput);
          }
        }
      });
    };

    preserveViewInForms();

    // Keyboard shortcuts
    document.addEventListener("keydown", (e: KeyboardEvent) => {
      if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) return;

      if (e.key === "/" && !(e.target instanceof HTMLInputElement)) {
        const searchInput = document.querySelector('input[name="search"]') as HTMLInputElement;
        if (searchInput) {
          searchInput.focus();
          e.preventDefault();
        }
      }
    });

    // Analytics tracking
    const trackViewChange = (view: string) => {
      if (typeof window !== "undefined" && (window as any).gtag) {
        (window as any).gtag("event", "news_view_change", {
          view_type: view,
          page_path: window.location.pathname,
        });
      }
    };

    trackViewChange(currentView);
  });

  // CRITICAL: Clean URL parameters when leaving news section
  document.addEventListener("astro:before-swap", (e: any) => {
    const newUrl = e.detail?.to?.pathname || '';
    
    // If we're leaving news section, clean up view parameters from forms
    if (window.location.pathname.startsWith('/news') && !newUrl.startsWith('/news')) {
      const forms = document.querySelectorAll('form');
      forms.forEach(form => {
        const viewInputs = form.querySelectorAll('input[name="view"]');
        viewInputs.forEach(input => input.remove());
      });
    }
  });
</script>
