---
// UPDATED: src/pages/news/[slug].astro - Using WordPress Block Parser
import Layout from "@/layouts/Layout.astro";
import { getPost, getPosts } from "@/lib/wordpress/api";
import { formatDate } from "@/utils/dates";
import type { WordPressPost } from "@/lib/wordpress/types";
import { extractEmbeddedData } from "@/lib/wordpress/types";
import Tag from "@/components/Tag.astro";
import WordPressBlockParser from "@/components/wordpress/WordPressBlockParser.astro";

export async function getStaticPaths() {
  const posts = await getPosts();
  return posts.map((post) => ({
    params: { slug: post.slug },
  }));
}

const { slug } = Astro.params;

if (!slug) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

let post: WordPressPost | null = null;
let error: string | null = null;

try {
  post = await getPost(slug);
  if (!post) {
    return new Response(null, {
      status: 404,
      statusText: "Post not found",
    });
  }
} catch (e) {
  error = e instanceof Error ? e.message : "An error occurred loading the post";
  return new Response(error, { status: 500 });
}

let prevPost: WordPressPost | null = null;
let nextPost: WordPressPost | null = null;

if (post) {
  try {
    const allPosts = await getPosts();
    const currentIndex = allPosts.findIndex((p) => p.slug === post.slug);

    if (currentIndex > 0) {
      nextPost = allPosts[currentIndex - 1];
    }

    if (currentIndex < allPosts.length - 1) {
      prevPost = allPosts[currentIndex + 1];
    }
  } catch (e) {
    console.warn("Could not load navigation posts:", e);
  }
}

const embeddedData = extractEmbeddedData(post);
const category = embeddedData.category;
const featuredMedia = embeddedData.featuredMedia;
const author = embeddedData.author;
const tags = embeddedData.tags;

const imageUrl = featuredMedia?.source_url;
const pageTitle = post.title.rendered;
const fullTitle = `${pageTitle} | El Camino`;

// Enhanced structured data
const structuredData = {
  "@context": "https://schema.org",
  "@type": "Article",
  headline: pageTitle,
  image: imageUrl,
  author: {
    "@type": "Person",
    name: author?.name || "El Camino",
  },
  publisher: {
    "@type": "Organization",
    name: "El Camino Skate Shop",
    logo: {
      "@type": "ImageObject",
      url: `${Astro.site}logo.png`,
    },
  },
  datePublished: post.date,
  dateModified: post.date,
  articleSection: category?.name,
  description: post.excerpt.rendered.replace(/<[^>]*>/g, "").substring(0, 160),
  keywords: tags.length > 0 ? tags.map((tag) => tag.name) : undefined,
};
---

<Layout title={fullTitle}>
  <script
    type="application/ld+json"
    set:html={JSON.stringify(structuredData)}
  />

  <article class="p-1 flex flex-col gap-1">
    <header
      class="flex flex-col lg:flex-row-reverse items-start lg:items-center gap-4 lg:gap-8"
    >
      <div class="basis-1/2 p-4 mt-8">
        {
          category?.name && (
            <span class="font-display font-semibold text-sm lg:text-lg tracking-wide uppercase text-(--ui-button-text) bg-(--ui-button-surface) px-2 py-0.5 rounded-xs mb-4 inline-block self-start">
              {category.name}
            </span>
          )
        }

        <h1
          class="font-display font-black text-6xl lg:text-7xl xl:text-8xl 2xl:text-9xl leading-[0.8] text-(--content-heading) text-balance mb-8"
          set:html={post.title.rendered}
        />

        {
          author && (
            <div class="flex items-center gap-4 text-(--content-meta) mb-6">
              {author.avatar_urls?.["96"] && (
                <img
                  src={author.avatar_urls["96"]}
                  alt={author.name}
                  class="w-12 h-12 rounded-full"
                  loading="lazy"
                />
              )}
              <div>
                <span class="font-medium text-(--content-body) block">
                  {author.name}
                </span>
                <time datetime={post.date} class="text-sm">
                  {formatDate(post.date)}
                </time>
              </div>
            </div>
          )
        }
      </div>

      <div
        class="aspect-square border-4 border-(--surface-secondary) overflow-hidden bg-(--surface-secondary) relative basis-1/2"
      >
        {
          imageUrl && (
            <img
              src={imageUrl}
              alt={featuredMedia?.alt_text || post.title.rendered}
              class="w-full h-full object-cover"
              loading="eager"
              fetchpriority="high"
            />
          )
        }
      </div>
    </header>

    <!-- UPDATED: Enhanced WordPress content with block parsing -->
    <section
      class="w-full md:max-w-3xl lg:max-w-4xl xl:max-w-5xl self-center p-4 lg:p-8 xl:p-12 2xl:p-20 bg-(--surface-secondary)"
    >
      <!-- WordPress content with enhanced block rendering -->
      <WordPressBlockParser
        content={post.content.rendered}
        enhanceBlocks={true}
      />

      <!-- Article Tags Section -->
      {
        tags.length > 0 && (
          <div class="mt-8 pt-6 border-t border-(--border-secondary) tags-section">
            <h3 class="text-(--content-meta) text-sm font-medium tracking-wide mb-3">
              Tagged
            </h3>
            <div class="flex flex-wrap gap-2">
              {tags.map((tag) => (
                <Tag tag={tag} variant="default" size="sm" clickable={true} />
              ))}
            </div>
          </div>
        )
      }
    </section>

    <!-- Article footer -->
    <footer class="md:p-4 pt-8 border-t border-(--border-primary)">
      {
        category && (
          <div class="mb-4">
            <span class="text-(--content-meta) text-sm">Filed under: </span>
            <span class="text-(--content-emphasis) font-medium">
              {category.name}
            </span>
          </div>
        )
      }

      <div class="flex justify-between items-center mb-8">
        <a
          href="/news"
          class="px-2.5 py-1.5 text-sm border rounded-sm bg-(--surface-primary)/50 hover:bg-(--surface-tertiary) transition-colors text-(--ui-input-text) border-(--ui-input-border)/50"
        >
          ‚Üê Back to News
        </a>

        <button
          class="px-2.5 py-1.5 text-sm border rounded-sm bg-(--surface-primary)/50 hover:bg-(--surface-tertiary) transition-colors text-(--ui-input-text) border-(--ui-input-border)/50"
          id="share-article-button"
        >
          Share Article
        </button>
      </div>

      <!-- Article Navigation (unchanged) -->
      {
        (prevPost || nextPost) && (
          <nav
            class="border-t border-(--border-primary)"
            aria-label="Article navigation"
          >
            <div class="grid grid-cols-1 md:grid-cols-2 gap-1">
              <div class="flex justify-start">
                {prevPost && (
                  <a
                    href={`/news/${prevPost.slug}`}
                    class="group flex flex-col w-full lg:max-w-sm p-4 bg-(--surface-tertiary) hover:bg-(--ui-card-surface-hover) border border-(--border-secondary) rounded-sm transition-all duration-200"
                  >
                    <span class="text-(--content-meta) text-sm font-medium mb-2 flex items-center">
                      <svg
                        class="w-4 h-4 mr-2"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M15 19l-7-7 7-7"
                        />
                      </svg>
                      Previous Article
                    </span>
                    <h3 class="text-(--content-heading) font-display font-semibold text-2xl md:text-3xl lg:text-4xl leading-tight group-hover:text-(--content-emphasis) transition-colors line-clamp-2">
                      {prevPost.title.rendered}
                    </h3>
                  </a>
                )}
              </div>

              <div class="flex justify-end">
                {nextPost && (
                  <a
                    href={`/news/${nextPost.slug}`}
                    class="group flex flex-col w-full lg:max-w-sm p-4 bg-(--surface-tertiary) hover:bg-(--ui-card-surface-hover) border border-(--border-secondary) rounded-sm transition-all duration-200 text-right"
                  >
                    <span class="text-(--content-meta) text-sm font-medium mb-2 flex items-center justify-end">
                      Next Article
                      <svg
                        class="w-4 h-4 ml-2"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M9 5l7 7-7 7"
                        />
                      </svg>
                    </span>
                    <h3 class="text-(--content-heading) font-display font-semibold text-2xl md:text-3xl lg:text-4xl leading-tight group-hover:text-(--content-emphasis) transition-colors line-clamp-2">
                      {nextPost.title.rendered}
                    </h3>
                  </a>
                )}
              </div>
            </div>
          </nav>
        )
      }
    </footer>
  </article>
</Layout>

<script>
  // Enhanced sharing functionality
  document.addEventListener("astro:page-load", () => {
    const shareButton = document.getElementById("share-article-button");

    if (shareButton) {
      shareButton.addEventListener("click", async (e) => {
        e.preventDefault();

        try {
          const shareData = {
            title: document.title,
            url: window.location.href,
            text:
              document
                .querySelector('meta[name="description"]')
                ?.getAttribute("content") || "",
          };

          if (
            navigator.share &&
            navigator.canShare &&
            navigator.canShare(shareData)
          ) {
            await navigator.share(shareData);

            // Analytics for successful share
            if (typeof window !== "undefined" && (window as any).gtag) {
              (window as any).gtag("event", "article_shared", {
                method: "native_share",
                article_title: document.title,
              });
            }
          } else {
            // Fallback to clipboard
            await navigator.clipboard.writeText(window.location.href);

            // Show feedback
            const originalText = shareButton.textContent;
            shareButton.textContent = "Link Copied!";
            shareButton.classList.add("text-(--ui-accent)");

            setTimeout(() => {
              shareButton.textContent = originalText;
              shareButton.classList.remove("text-(--ui-accent)");
            }, 2000);

            // Analytics for clipboard copy
            if (typeof window !== "undefined" && (window as any).gtag) {
              (window as any).gtag("event", "article_shared", {
                method: "clipboard",
                article_title: document.title,
              });
            }
          }
        } catch (error) {
          console.warn("Sharing failed:", error);

          // Fallback feedback
          const originalText = shareButton.textContent;
          shareButton.textContent = "Share Failed";
          shareButton.classList.add("text-(--state-error-text)");

          setTimeout(() => {
            shareButton.textContent = originalText;
            shareButton.classList.remove("text-(--state-error-text)");
          }, 2000);
        }
      });
    }
  });
</script>
