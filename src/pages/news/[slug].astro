---
// src/pages/news/[slug].astro - Updated with tags display
import Layout from "@/layouts/Layout.astro";
import { getPost, getPosts } from "@/lib/wordpress/api";
import { formatDate } from "@/utils/dates";
import type { WordPressPost } from "@/lib/wordpress/types";
import { extractEmbeddedData } from "@/lib/wordpress/types";

export async function getStaticPaths() {
  const posts = await getPosts();
  return posts.map((post) => ({
    params: { slug: post.slug },
  }));
}

const { slug } = Astro.params;

if (!slug) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

let post: WordPressPost | null = null;
let error: string | null = null;

try {
  post = await getPost(slug);
  if (!post) {
    return new Response(null, {
      status: 404,
      statusText: "Post not found",
    });
  }
} catch (e) {
  error = e instanceof Error ? e.message : "An error occurred loading the post";
  return new Response(error, { status: 500 });
}

let prevPost: WordPressPost | null = null;
let nextPost: WordPressPost | null = null;

if (post) {
  try {
    // Get all posts to find previous/next
    const allPosts = await getPosts();
    const currentIndex = allPosts.findIndex((p) => p.slug === post.slug);

    if (currentIndex > 0) {
      nextPost = allPosts[currentIndex - 1]; // Newer post (published later)
    }

    if (currentIndex < allPosts.length - 1) {
      prevPost = allPosts[currentIndex + 1]; // Older post (published earlier)
    }
  } catch (e) {
    console.warn("Could not load navigation posts:", e);
  }
}

// Extract embedded data including tags
const embeddedData = extractEmbeddedData(post);
const category = embeddedData.category;
const featuredMedia = embeddedData.featuredMedia;
const author = embeddedData.author;
const tags = embeddedData.tags; // NEW: Extract tags

const imageUrl = featuredMedia?.source_url;

// Get the title and content from the page
const pageTitle = post.title.rendered;
const fullTitle = `${pageTitle} | El Camino`;

// Generate structured data for SEO (now includes tags as keywords)
const structuredData = {
  "@context": "https://schema.org",
  "@type": "Article",
  headline: pageTitle,
  image: imageUrl,
  author: {
    "@type": "Person",
    name: author?.name || "El Camino",
  },
  publisher: {
    "@type": "Organization",
    name: "El Camino Skate Shop",
    logo: {
      "@type": "ImageObject",
      url: `${Astro.site}logo.png`,
    },
  },
  datePublished: post.date,
  dateModified: post.date,
  articleSection: category?.name,
  description: post.excerpt.rendered.replace(/<[^>]*>/g, "").substring(0, 160),
  keywords: tags.length > 0 ? tags.map(tag => tag.name) : undefined, // NEW: Include tags as keywords
};
---

<Layout title={fullTitle}>
  <!-- Structured Data for SEO -->
  <script
    type="application/ld+json"
    set:html={JSON.stringify(structuredData)}
  />

  <article class="p-2">
    <header
      class="mb-1 flex flex-col lg:flex-row-reverse items-center gap-4 lg:gap-8"
    >
      <div class="place-self-center basis-1/2 p-4">
        {
          category?.name && (
            <span class="font-display text-lg text-(--content-meta) inline-block">
              {category.name}
            </span>
          )
        }

        <h1
          class="font-display font-black text-6xl lg:text-7xl xl:text-8xl 2xl:text-9xl leading-[0.8] text-(--content-heading) text-balance mb-8"
          set:html={post.title.rendered}
        />

        {
          author && (
            <div class="flex items-center gap-4 text-(--content-meta) mb-6">
              {author.avatar_urls?.["96"] && (
                <img
                  src={author.avatar_urls["96"]}
                  alt={author.name}
                  class="w-12 h-12 rounded-full"
                  loading="lazy"
                />
              )}
              <div>
                <span class="font-medium text-(--content-body) block">
                  {author.name}
                </span>
                <time datetime={post.date} class="text-sm">
                  {formatDate(post.date)}
                </time>
              </div>
            </div>
          )
        }
      </div>

      <div
        class="aspect-square border-4 border-(--surface-secondary) overflow-hidden bg-(--surface-secondary) relative basis-1/2"
      >
        {
          imageUrl && (
            <img
              src={imageUrl}
              alt={featuredMedia?.alt_text || post.title.rendered}
              class="w-full h-full object-cover"
              loading="eager"
              fetchpriority="high"
            />
          )
        }
      </div>
    </header>

    <!-- Main Content Section with WordPress Block Styling -->
    <section
      class="max-w-5xl mx-auto p-4 lg:p-8 xl:p-12 bg-(--surface-secondary)"
    >
      <!-- Main WordPress content with proper block styling -->
      <div class="prose prose-lg max-w-none" set:html={post.content.rendered} />

      <!-- NEW: Article Tags Section -->
      {
        tags.length > 0 && (
          <div class="mt-8 pt-6 border-t border-(--border-secondary)">
            <h3 class="text-(--content-meta) text-sm font-medium uppercase tracking-wide mb-3">
              Tagged
            </h3>
            <div class="flex flex-wrap gap-2">
              {tags.map((tag) => (
                <span
                  class="inline-flex items-center px-3 py-1 text-sm font-medium bg-(--surface-tertiary) text-(--content-body) border border-(--border-secondary) rounded-full hover:bg-(--ui-button-primary-hover) hover:text-(--ui-button-primary-text) transition-colors duration-200 cursor-pointer"
                  title={`View all posts tagged with "${tag.name}"`}
                >
                  #{tag.name}
                </span>
              ))}
            </div>
          </div>
        )
      }

      <!-- Article footer with sharing/navigation -->
      <footer class="mt-12 pt-8 border-t border-(--border-primary)">
        {category && (
          <div class="mb-4">
            <span class="text-(--content-meta) text-sm">Filed under: </span>
            <span class="text-(--content-emphasis) font-medium">{category.name}</span>
          </div>
        )}
        
        <div class="flex justify-between items-center mb-8">
          <a 
            href="/news"
            class="text-(--content-emphasis) hover:text-(--content-heading) transition-colors"
          >
            ‚Üê Back to News
          </a>
          
          <button 
            class="text-(--content-meta) hover:text-(--content-emphasis) transition-colors text-sm"
            onclick="navigator.share ? navigator.share({title: document.title, url: window.location.href}) : navigator.clipboard.writeText(window.location.href)"
          >
            Share Article
          </button>
        </div>

        <!-- Article Navigation -->
        {(prevPost || nextPost) && (
          <nav class="border-t border-(--border-primary) pt-8" aria-label="Article navigation">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <!-- Previous Article -->
              <div class="flex justify-start">
                {prevPost && (
                  <a 
                    href={`/news/${prevPost.slug}`}
                    class="group flex flex-col w-full max-w-sm p-4 bg-(--surface-tertiary) hover:bg-(--ui-card-hover) border border-(--border-secondary) rounded-lg transition-all duration-200 hover:shadow-lg"
                  >
                    <span class="text-(--content-meta) text-sm font-medium mb-2 flex items-center">
                      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                      </svg>
                      Previous Article
                    </span>
                    <h3 class="text-(--content-heading) font-display font-semibold text-lg leading-tight group-hover:text-(--content-emphasis) transition-colors line-clamp-2">
                      {prevPost.title.rendered}
                    </h3>
                    {prevPost.excerpt.rendered && (
                      <p class="text-(--content-meta) text-sm mt-2 line-clamp-2">
                        {prevPost.excerpt.rendered.replace(/<[^>]*>/g, '').substring(0, 100)}...
                      </p>
                    )}
                  </a>
                )}
              </div>

              <!-- Next Article -->
              <div class="flex justify-end">
                {nextPost && (
                  <a 
                    href={`/news/${nextPost.slug}`}
                    class="group flex flex-col w-full max-w-sm p-4 bg-(--surface-tertiary) hover:bg-(--ui-card-hover) border border-(--border-secondary) rounded-lg transition-all duration-200 hover:shadow-lg text-right"
                  >
                    <span class="text-(--content-meta) text-sm font-medium mb-2 flex items-center justify-end">
                      Next Article
                      <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                      </svg>
                    </span>
                    <h3 class="text-(--content-heading) font-display font-semibold text-lg leading-tight group-hover:text-(--content-emphasis) transition-colors line-clamp-2">
                      {nextPost.title.rendered}
                    </h3>
                    {nextPost.excerpt.rendered && (
                      <p class="text-(--content-meta) text-sm mt-2 line-clamp-2">
                        {nextPost.excerpt.rendered.replace(/<[^>]*>/g, '').substring(0, 100)}...
                      </p>
                    )}
                  </a>
                )}
              </div>
            </div>
          </nav>
        )}
      </footer>
    </section>
  </article>
</Layout>

<style>
  /* Component-specific WordPress content optimizations */
  .prose {
    /* Ensure WordPress images work well with your layout */
    overflow-wrap: break-word;
    word-wrap: break-word;
  }

  /* Handle WordPress alignment classes within your design */
  .prose .alignfull {
    width: 100vw;
    margin-left: calc(50% - 50vw);
    margin-right: calc(50% - 50vw);
    max-width: 100vw;
  }

  .prose .alignwide {
    width: calc(100% + 4rem);
    margin-left: -2rem;
    margin-right: -2rem;
  }

  nav[aria-label="Article navigation"] a {
    text-decoration: none;
  }
  
  nav[aria-label="Article navigation"] .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* NEW: Tag styling enhancements */
  .tags-section span:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  @media (max-width: 768px) {
    .prose .alignwide {
      width: 100%;
      margin-left: 0;
      margin-right: 0;
    }
    nav[aria-label="Article navigation"] .grid-cols-1 > div {
      max-width: 100%;
    }
    
    nav[aria-label="Article navigation"] a {
      text-align: left !important;
    }
    
    nav[aria-label="Article navigation"] .justify-end {
      justify-content: flex-start !important;
    }
    
    nav[aria-label="Article navigation"] .text-right {
      text-align: left !important;
    }
    
    nav[aria-label="Article navigation"] .justify-end .flex {
      justify-content: flex-start !important;
    }
  }
</style>

<script>
  // NEW: Tag click analytics and future functionality
  document.addEventListener("astro:page-load", () => {
    const tagElements = document.querySelectorAll('.tags-section span');
    
    tagElements.forEach((tag) => {
      tag.addEventListener('click', (e) => {
        const tagName = tag.textContent?.replace('#', '') || '';
        
        // Analytics tracking
        if (typeof window !== "undefined" && (window as any).gtag) {
          (window as any).gtag("event", "tag_click", {
            tag_name: tagName,
            page_title: document.title,
          });
        }
        
        // Future: Navigate to tag archive page
        // window.location.href = `/news/tag/${tagName.toLowerCase().replace(/\s+/g, '-')}`;
        
        // For now, show a message
        console.log(`Tag clicked: ${tagName}`);
        // TODO: Replace with actual tag archive navigation once implemented
      });
    });
  });

  // Enhanced sharing functionality
  document.addEventListener("astro:page-load", () => {
    const shareButton = document.querySelector('button[onclick*="navigator.share"]');
    if (shareButton) {
      shareButton.addEventListener('click', async () => {
        try {
          if (navigator.share) {
            await navigator.share({
              title: document.title,
              url: window.location.href,
              text: document.querySelector('meta[name="description"]')?.getAttribute('content') || ''
            });
          } else {
            await navigator.clipboard.writeText(window.location.href);
            // Show a temporary message
            const originalText = shareButton.textContent;
            shareButton.textContent = 'Link Copied!';
            setTimeout(() => {
              shareButton.textContent = originalText;
            }, 2000);
          }
        } catch (error) {
          console.warn('Sharing failed:', error);
        }
      });
    }
  });
</script>