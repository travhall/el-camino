---
/**
 * Performance Test Page
 * File: src/pages/performance-test.astro
 */

import Layout from "../layouts/Layout.astro";
import PerformanceDashboard from "../components/PerformanceDashboard.astro";
---

<Layout title="Performance Test - El Camino Skate Shop">
  <main class="container mx-auto px-4 py-8">
    <div class="max-w-6xl mx-auto">
      <!-- Page Header -->
      <header class="text-center mb-12">
        <h1 class="text-4xl font-bold text-content-heading mb-4">
          Performance Optimization Test
        </h1>
        <p class="text-lg text-content-body max-w-2xl mx-auto">
          Real-time performance monitoring dashboard showcasing Core Web Vitals, 
          PWA status, and image optimization metrics.
        </p>
      </header>

      <!-- Performance Dashboard -->
      <PerformanceDashboard class="mb-12" />

      <!-- Test Content Section -->
      <section class="mb-12">
        <h2 class="text-2xl font-semibold text-content-heading mb-6">
          Image Optimization Test
        </h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <!-- Test images to demonstrate format optimization -->
          <div class="bg-surface-secondary p-4 rounded-sm border border-border-primary">
            <h3 class="font-medium mb-3">Square CDN Image</h3>
            <img 
              src="https://squarecdn.com/s/dtzFZhLa-Y66Kj1yzC_Phq_q_gAaO3tLCUyQA2Q7eWs/image-1.jpg"
              alt="Test image for optimization"
              class="w-full h-48 object-cover rounded"
              loading="lazy"
              decoding="async"
            />
            <p class="text-sm text-content-body mt-2">
              This image should be optimized to AVIF/WebP format automatically
            </p>
          </div>

          <div class="bg-surface-secondary p-4 rounded-sm border border-border-primary">
            <h3 class="font-medium mb-3">Priority Image</h3>
            <img 
              src="https://squarecdn.com/s/dtzFZhLa-Y66Kj1yzC_Phq_q_gAaO3tLCUyQA2Q7eWs/image-2.jpg"
              alt="Priority test image"
              class="w-full h-48 object-cover rounded"
              loading="eager"
              fetchpriority="high"
              decoding="async"
            />
            <p class="text-sm text-content-body mt-2">
              Priority image loaded eagerly
            </p>
          </div>

          <div class="bg-surface-secondary p-4 rounded-sm border border-border-primary">
            <h3 class="font-medium mb-3">Lazy Loaded Image</h3>
            <img 
              src="https://squarecdn.com/s/dtzFZhLa-Y66Kj1yzC_Phq_q_gAaO3tLCUyQA2Q7eWs/image-3.jpg"
              alt="Lazy loaded test image"
              class="w-full h-48 object-cover rounded"
              loading="lazy"
              decoding="async"
            />
            <p class="text-sm text-content-body mt-2">
              Lazy loaded for performance
            </p>
          </div>
        </div>
      </section>

      <!-- PWA Test Section -->
      <section class="mb-12">
        <h2 class="text-2xl font-semibold text-content-heading mb-6">
          PWA Features Test
        </h2>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="bg-surface-secondary p-6 rounded-sm border border-border-primary">
            <h3 class="font-medium text-content-emphasis mb-4">Service Worker Status</h3>
            <div id="sw-test-status" class="space-y-2">
              <div class="flex justify-between">
                <span>Service Worker:</span>
                <span id="sw-registered" class="font-mono">Checking...</span>
              </div>
              <div class="flex justify-between">
                <span>Update Available:</span>
                <span id="sw-update" class="font-mono">No</span>
              </div>
              <div class="flex justify-between">
                <span>Offline Ready:</span>
                <span id="sw-offline" class="font-mono">No</span>
              </div>
            </div>
          </div>

          <div class="bg-surface-secondary p-6 rounded-sm border border-border-primary">
            <h3 class="font-medium text-content-emphasis mb-4">Installation Test</h3>
            <div class="space-y-4">
              <div class="flex justify-between">
                <span>Display Mode:</span>
                <span id="display-mode" class="font-mono">Browser</span>
              </div>
              <button 
                id="install-test-btn"
                class="w-full px-4 py-2 bg-primary text-primary-foreground rounded hover:bg-primary/90 transition-colors"
                disabled
              >
                Install App
              </button>
            </div>
          </div>
        </div>
      </section>

      <!-- Performance Actions -->
      <section class="mb-12">
        <h2 class="text-2xl font-semibold text-content-heading mb-6">
          Performance Actions
        </h2>
        
        <div class="flex flex-wrap gap-4">
          <button 
            id="trigger-cls-btn"
            class="px-4 py-2 bg-state-warning text-white rounded hover:bg-state-warning/90 transition-colors"
          >
            Trigger Layout Shift (Test CLS)
          </button>
          
          <button 
            id="cache-test-btn"
            class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-600/90 transition-colors"
          >
            Test Cache Performance
          </button>
          
          <button 
            id="export-metrics-btn"
            class="px-4 py-2 bg-green-600 text-white rounded hover:bg-green-600/90 transition-colors"
          >
            Export Performance Data
          </button>
          
          <button 
            id="simulate-offline-btn"
            class="px-4 py-2 bg-gray-600 text-white rounded hover:bg-gray-600/90 transition-colors"
          >
            Simulate Offline
          </button>
        </div>
      </section>

      <!-- Debug Information -->
      <section>
        <h2 class="text-2xl font-semibold text-content-heading mb-6">
          Debug Information
        </h2>
        
        <div class="bg-surface-secondary p-6 rounded-sm border border-border-primary">
          <pre id="debug-output" class="text-sm text-content-body font-mono whitespace-pre-wrap max-h-96 overflow-y-auto">
Loading debug information...
          </pre>
        </div>
      </section>
    </div>
  </main>
</Layout>

<script>
  import { performanceManager } from '../lib/performance/PerformanceManager';
  import { pwaManager } from '../pwa';

  class PerformanceTestController {
    constructor() {
      this.init();
    }

    private init(): void {
      this.setupPWATests();
      this.setupPerformanceActions();
      this.updateDebugInfo();
      
      // Update debug info every 5 seconds
      setInterval(() => this.updateDebugInfo(), 5000);
    }

    private setupPWATests(): void {
      // Service Worker status
      if ('serviceWorker' in navigator) {
        navigator.serviceWorker.ready.then(() => {
          document.getElementById('sw-registered')!.textContent = 'Active';
        }).catch(() => {
          document.getElementById('sw-registered')!.textContent = 'Failed';
        });
      } else {
        document.getElementById('sw-registered')!.textContent = 'Not Supported';
      }

      // Display mode detection
      const displayMode = window.matchMedia('(display-mode: standalone)').matches ? 'Standalone' : 'Browser';
      document.getElementById('display-mode')!.textContent = displayMode;

      // Install button functionality
      const installBtn = document.getElementById('install-test-btn') as HTMLButtonElement;
      
      window.addEventListener('beforeinstallprompt', (e) => {
        e.preventDefault();
        installBtn.disabled = false;
        installBtn.onclick = async () => {
          (e as any).prompt();
          const { outcome } = await (e as any).userChoice;
          console.log('Install prompt outcome:', outcome);
        };
      });
    }

    private setupPerformanceActions(): void {
      // CLS trigger
      document.getElementById('trigger-cls-btn')?.addEventListener('click', () => {
        this.triggerLayoutShift();
      });

      // Cache test
      document.getElementById('cache-test-btn')?.addEventListener('click', () => {
        this.testCachePerformance();
      });

      // Export metrics
      document.getElementById('export-metrics-btn')?.addEventListener('click', () => {
        this.exportMetrics();
      });

      // Simulate offline
      document.getElementById('simulate-offline-btn')?.addEventListener('click', () => {
        this.simulateOffline();
      });
    }

    private triggerLayoutShift(): void {
      // Create element that will cause layout shift
      const testDiv = document.createElement('div');
      testDiv.style.cssText = `
        height: 100px;
        background: red;
        margin: 20px 0;
        animation: slideIn 1s ease-out;
      `;
      
      const style = document.createElement('style');
      style.textContent = `
        @keyframes slideIn {
          from { height: 0; }
          to { height: 100px; }
        }
      `;
      document.head.appendChild(style);
      
      const main = document.querySelector('main');
      main?.insertBefore(testDiv, main.firstChild);
      
      setTimeout(() => {
        testDiv.remove();
        style.remove();
      }, 2000);
    }

    private async testCachePerformance(): Promise<void> {
      const startTime = performance.now();
      
      try {
        const response = await fetch(window.location.href);
        const endTime = performance.now();
        const responseTime = endTime - startTime;
        
        console.log(`Cache test - Response time: ${responseTime.toFixed(2)}ms`);
        console.log(`Cache status: ${response.headers.get('X-Cache') || 'Unknown'}`);
        
        this.updateDebugInfo();
      } catch (error) {
        console.error('Cache test failed:', error);
      }
    }

    private exportMetrics(): void {
      const metrics = performanceManager.exportMetrics();
      const blob = new Blob([metrics], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      
      const a = document.createElement('a');
      a.href = url;
      a.download = `performance-metrics-${new Date().toISOString()}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }

    private simulateOffline(): void {
      // Dispatch offline event
      window.dispatchEvent(new Event('offline'));
      
      setTimeout(() => {
        window.dispatchEvent(new Event('online'));
      }, 5000);
    }

    private updateDebugInfo(): void {
      const debugOutput = document.getElementById('debug-output');
      if (!debugOutput) return;

      const metrics = performanceManager.getAllMetrics();
      const health = performanceManager.getHealthScore();
      
      const debugInfo = {
        timestamp: new Date().toISOString(),
        userAgent: navigator.userAgent,
        viewport: {
          width: window.innerWidth,
          height: window.innerHeight
        },
        connection: (navigator as any).connection ? {
          effectiveType: (navigator as any).connection.effectiveType,
          downlink: (navigator as any).connection.downlink,
          saveData: (navigator as any).connection.saveData
        } : 'Not available',
        metrics,
        healthScore: health,
        pwa: {
          serviceWorkerActive: 'serviceWorker' in navigator,
          installed: pwaManager?.isInstalled() || false,
          displayMode: window.matchMedia('(display-mode: standalone)').matches ? 'standalone' : 'browser'
        }
      };

      debugOutput.textContent = JSON.stringify(debugInfo, null, 2);
    }
  }

  // Initialize test controller
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new PerformanceTestController();
    });
  } else {
    new PerformanceTestController();
  }
</script>

<style>
  .container {
    max-width: 1200px;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  main > * {
    animation: fadeIn 0.6s ease-out;
  }
</style>
