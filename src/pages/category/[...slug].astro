---
// src/pages/category/[...slug].astro
import ProductFilters from "@/components/ProductFilters.astro";
import AppliedFilters from "@/components/AppliedFilters.astro";
import ProductGrid from "@/components/ProductGrid.astro";
import { fetchProductsByCategory } from "@/lib/square/categories";
import { fetchCategoryHierarchyWithProducts } from "@/lib/square/categoryUtils";
import {
  parseFiltersFromURL,
  filterProductsWithCache,
  extractFilterOptions,
} from "@/lib/square/filterUtils";
import Layout from "@/layouts/Layout.astro";

const { slug } = Astro.params;
if (!slug) return Astro.redirect("/404");

// === EXISTING CATEGORY RESOLUTION ===
const categoryHierarchy = await fetchCategoryHierarchyWithProducts();
const slugParts = slug.split("/");
const topLevelSlug = slugParts[0];
const subCategorySlug = slugParts.length > 1 ? slugParts[1] : null;

const topLevelItem = categoryHierarchy.find(
  (item) => item.category.slug === topLevelSlug
);
if (!topLevelItem?.category) return Astro.redirect("/404");

let category = topLevelItem.category;
let parentCategory = null;

if (subCategorySlug) {
  const subCategory = topLevelItem.subcategories.find(
    (sub) => sub.slug === subCategorySlug
  );
  if (!subCategory) return Astro.redirect("/404");
  category = subCategory;
  parentCategory = topLevelItem.category;
}

// === PARSE URL PARAMETERS FOR FILTERING ===
const filters = parseFiltersFromURL(Astro.url.searchParams);

console.log(`[Category] üîç URL Parsing:`, {
  searchParams: Astro.url.search,
  parsedFilters: filters,
  hasBrands: filters.brands.length > 0,
  hasAvailability: filters.availability,
});

// Check for active filters
const hasFilters = Object.values(filters).some((f) =>
  Array.isArray(f) ? f.length > 0 : f === true
);

console.log(`[Category] üìä Filter Analysis:`, {
  hasFilters,
  filterValues: Object.values(filters),
  filtersBreakdown: filters,
});

import type { Product } from "@/lib/square/types";

let allProducts: Product[] = [];
let filteredProducts: Product[] = [];
let filterOptions = {
  brands: [] as Array<{ name: string; count: number; slug: string }>,
};

try {
  // Fetch ALL products for infinite scroll and client-side filtering
  console.log(
    `[Category] Fetching all products for category: ${category.name}`
  );

  const productData = await fetchProductsByCategory(category.id, {
    limit: 200,
  });
  allProducts = productData.products;

  // Extract filter options from all products using the same logic as shop/all
  filterOptions = extractFilterOptions(allProducts);

  console.log(`[Category] Loaded ${allProducts.length} products for filtering`);

  if (hasFilters) {
    console.log(`[Category] üîÑ Applying server-side filtering...`);
    console.log(
      `[Category] üìã Before filtering: ${allProducts.length} products`
    );
    console.log(`[Category] üéØ Filter criteria:`, filters);

    // Apply server-side filtering using the same logic as shop/all
    filteredProducts = await filterProductsWithCache(allProducts, filters);

    console.log(
      `[Category] ‚úÖ After filtering: ${filteredProducts.length} products`
    );
    console.log(
      `[Category] üìã Sample filtered products:`,
      filteredProducts
        .slice(0, 3)
        .map((p) => ({ id: p.id, brand: p.brand, title: p.title }))
    );
  } else {
    console.log(
      `[Category] ‚ö™ No filters applied - showing all ${allProducts.length} products`
    );
    // No filters applied - show all products
    filteredProducts = [...allProducts];
  }
} catch (error) {
  console.error("Error fetching products:", error);
  allProducts = [];
  filteredProducts = [];
}

// Generate page metadata
const subcategories = !subCategorySlug ? topLevelItem.subcategories : [];
const pageTitle = parentCategory
  ? `${parentCategory.name} - ${category.name}`
  : category.name;

const fullPageTitle = `Shop ${pageTitle} | El Camino`;

// Preload critical images (first 8 products)
const preloadImages = allProducts
  .slice(0, 8)
  .map((p) => p.image)
  .filter((img) => !img.includes("placeholder"));

// Current category path for filter URLs
const categoryPath = parentCategory
  ? `/category/${parentCategory.slug}/${category.slug}`
  : `/category/${category.slug}`;

// Check for active filters (for display purposes)
const hasActiveFilters =
  filters.brands.length > 0 || filters.availability === true;

console.log(`[Category] üé¨ Final data summary:`, {
  allProductsCount: allProducts.length,
  filteredProductsCount: filteredProducts.length,
  hasActiveFilters,
  categoryPath,
  sampleFilteredProducts: filteredProducts.slice(0, 2).map((p) => p.brand),
});
---

<Layout title={fullPageTitle}>
  {preloadImages.map((img) => <link rel="preload" href={img} as="image" />)}

  <!-- Responsive Grid Layout -->
  <div class="min-h-screen bg-(--surface-primary)">
    <!-- Category Header -->
    <div class="p-4 pb-0">
      <div
        class="flex flex-col md:flex-row justify-between gap-4 items-baseline"
      >
        <div
          class="flex flex-row w-full lg:w-auto justify-between gap-4 items-baseline"
        >
          <h1
            class="font-display font-black text-6xl lg:text-7xl xl:text-8xl 2xl:text-9xl leading-[0.8] text-(--content-heading) mb-2"
          >
            {category.name}
          </h1>
        </div>
        <div class="hidden md:block min-w-fit">
          <!-- Subcategory Navigation -->
          {
            subcategories.length > 0 && (
              <div class="flex flex-wrap gap-2 mb-1.5">
                {subcategories.map((subcategory) => (
                  <a
                    href={`/category/${category.slug}/${subcategory.slug}`}
                    class="px-2.5 py-1.5 text-sm border rounded-sm bg-(--surface-primary)/50 hover:bg-(--surface-tertiary) transition-colors text-(--ui-input-text) border-(--ui-input-border)/50"
                  >
                    {subcategory.name}
                  </a>
                ))}
              </div>
            )
          }

          {
            parentCategory && (
              <div class="flex flex-wrap gap-2 mb-1.5">
                <a
                  href={`/category/${parentCategory.slug}`}
                  class="px-2.5 py-1.5 text-sm border rounded-sm bg-(--surface-primary) hover:bg-(--surface-tertiary) transition-colors text-(--ui-input-text) border-(--ui-input-border)/50"
                >
                  See all products in {parentCategory.name}
                </a>
              </div>
            )
          }
        </div>
      </div>
    </div>

    <!-- Page Body -->
    <div class="grid grid-cols-1 lg:grid-cols-4 xl:grid-cols-5 gap-1 p-1 pb-0">
      <!-- Filter Sidebar -->
      <aside class="lg:col-span-1">
        <ProductFilters
          filterOptions={filterOptions}
          totalProducts={allProducts.length}
          filteredCount={filteredProducts.length}
          categoryPath={categoryPath}
        />
      </aside>

      <!-- Main Content -->
      <main class="lg:col-span-3 xl:col-span-4">
        <!-- Applied Filters Above Product Grid -->
        <AppliedFilters categoryPath={categoryPath} classes="hidden lg:block" />

        <!-- Products -->
        {
          filteredProducts.length > 0 ? (
            <>
              <ProductGrid
                products={filteredProducts}
                allProducts={allProducts}
                categoryPath={categoryPath}
              />
            </>
          ) : (
            <div class="text-center py-16">
              <div class="text-6xl mb-4 opacity-20">
                {hasActiveFilters ? "üîç" : "üõπ"}
              </div>
              <h2 class="text-2xl font-display font-bold text-(--content-heading) mb-2">
                {hasActiveFilters
                  ? "No products match your filters"
                  : "No products found"}
              </h2>
              <p class="text-(--content-meta) mb-6 max-w-md mx-auto">
                {hasActiveFilters
                  ? "Try adjusting your filters or browse all products."
                  : subcategories.length > 0
                    ? "Try browsing our subcategories above, or check out other product categories."
                    : "This category is currently empty. Check back soon for new products!"}
              </p>
              {hasActiveFilters ? (
                <a
                  href={categoryPath}
                  class="font-sans font-semibold text-sm text-center lg:text-base py-2 px-3 lg:py-2 lg:px-4 border-2 rounded-sm text-(--ui-button-text) bg-(--ui-button-surface) border-(--ui-button-border) hover:bg-(--ui-button-surface)/75 outline-0 focus-visible:ring focus-visible:ring-offset-2 focus-visible:ring-(--ui-button-ring) transition-all ease-in-out duration-300"
                >
                  Clear Filters
                </a>
              ) : (
                <a
                  href="/shop/all"
                  class="font-sans font-semibold text-sm text-center lg:text-base py-2 px-3 lg:py-2 lg:px-4 border-2 rounded-sm text-(--ui-button-text) bg-(--ui-button-surface) border-(--ui-button-border) hover:bg-(--ui-button-surface)/75 outline-0 focus-visible:ring focus-visible:ring-offset-2 focus-visible:ring-(--ui-button-ring) transition-all ease-in-out duration-300"
                >
                  Browse All Products
                </a>
              )}
            </div>
          )
        }
      </main>
    </div>
  </div>
</Layout>

<script>
  // Add View Transitions fallback detection
  if (!document.startViewTransition) {
    document.documentElement.classList.add("no-view-transitions");
  }
</script>

<style>
  .no-view-transitions .filtering-in-progress {
    opacity: 0.7;
    transition: opacity 0.3s ease;
  }
</style>
