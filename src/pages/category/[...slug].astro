---
// src/pages/category/[...slug].astro
import ProductFilters from "@/components/ProductFilters.astro";
import FilterableProductGrid from "@/components/FilterableProductGrid.astro";
import {
  fetchCategoryHierarchy,
  fetchProductsByCategory,
} from "@/lib/square/categories";
import { extractFilterOptions } from "@/lib/square/filterUtils";
import Layout from "@/layouts/Layout.astro";
import type { Category, Product } from "@/lib/square/types";

const { slug } = Astro.params;
if (!slug) return Astro.redirect("/404");

// === EXISTING CATEGORY RESOLUTION ===
const categoryHierarchy = await fetchCategoryHierarchy();
const slugParts = slug.split("/");
const topLevelSlug = slugParts[0];
const subCategorySlug = slugParts.length > 1 ? slugParts[1] : null;

const topLevelItem = categoryHierarchy.find(
  (item) => item.category.slug === topLevelSlug
);
if (!topLevelItem?.category) return Astro.redirect("/404");

let category = topLevelItem.category;
let parentCategory = null;

if (subCategorySlug) {
  const subCategory = topLevelItem.subcategories.find(
    (sub) => sub.slug === subCategorySlug
  );
  if (!subCategory) return Astro.redirect("/404");
  category = subCategory;
  parentCategory = topLevelItem.category;
}

// === ENHANCED PRODUCT FETCHING FOR FILTERING ===
let products: Product[] = [];
let nextCursor: string | undefined;
let hasMore = false;

try {
  // Fetch more products initially for better filtering experience
  const result = await fetchProductsByCategory(category.id, { limit: 48 });
  products = result.products;
  nextCursor = result.nextCursor;
  hasMore = result.hasMore;
} catch (error) {
  console.error("Error fetching products:", error);
}

// Extract filter options from current category products
const filterOptions = extractFilterOptions(products);

const subcategories = !subCategorySlug ? topLevelItem.subcategories : [];
const pageTitle = parentCategory
  ? `${parentCategory.name} - ${category.name}`
  : category.name;
const preloadImages = products
  .slice(0, 8)
  .map((p) => p.image)
  .filter((img) => !img.includes("placeholder"));
---

<Layout title={`Shop ${pageTitle} | El Camino`}>
  {preloadImages.map((img) => <link rel="preload" href={img} as="image" />)}

  <!-- Responsive Grid Layout -->
  <div class="min-h-screen bg-surface-primary">
    <div
      class="grid grid-cols-1 lg:grid-cols-4 xl:grid-cols-5 gap-2 p-2 max-w-[120rem] mx-auto"
    >
      <!-- Filter Sidebar -->
      <aside class="lg:col-span-1">
        <ProductFilters
          filterOptions={filterOptions}
          totalProducts={products.length}
          filteredCount={products.length}
        />
      </aside>

      <!-- Main Content -->
      <main class="lg:col-span-3 xl:col-span-4">
        <!-- Category Header -->
        <div class="mb-6">
          <div
            class="flex flex-col lg:flex-row justify-between gap-4 items-baseline"
          >
            <h1
              class="font-display font-black text-4xl lg:text-5xl xl:text-6xl 2xl:text-7xl leading-[0.8] text-content-heading"
            >
              {category.name}
            </h1>

            <!-- Subcategory Navigation (Above Products per UX research) -->
            {
              subcategories.length > 0 && (
                <div class="flex flex-wrap gap-2">
                  {subcategories.map((subcategory) => (
                    <a
                      href={`/category/${category.slug}/${subcategory.slug}`}
                      class="px-2.5 py-1.5 text-sm bg-ui-button-surface text-ui-button-text border border-ui-button-border rounded-sm lg:hover:bg-ui-button-hover transition-colors"
                    >
                      {subcategory.name}
                    </a>
                  ))}
                </div>
              )
            }

            {
              parentCategory && (
                <div>
                  <a
                    href={`/category/${parentCategory.slug}`}
                    class="text-content-meta lg:hover:text-content-emphasis"
                  >
                    ‚Üê Back to {parentCategory.name}
                  </a>
                </div>
              )
            }
          </div>
        </div>

        <!-- Products -->
        {
          products.length > 0 ? (
            <FilterableProductGrid products={products} />
          ) : (
            <div class="text-center py-16">
              <div class="text-6xl mb-4 opacity-20">üõπ</div>
              <h2 class="text-2xl font-display font-bold text-content-heading mb-2">
                No products found
              </h2>
              <p class="text-content-meta mb-6 max-w-md mx-auto">
                {subcategories.length > 0
                  ? `Try browsing our subcategories above, or check out other product categories.`
                  : `This category is currently empty. Check back soon for new products!`}
              </p>
              <a
                href="/all-products"
                class="px-6 py-2 bg-ui-button-surface text-ui-button-text border border-ui-button-border rounded hover:bg-ui-button-hover transition-colors"
              >
                Browse All Products
              </a>
            </div>
          )
        }

        <!-- Infinite Scroll Trigger -->
        {
          hasMore && (
            <div
              id="scroll-trigger"
              class="flex justify-center py-8"
              data-category-id={category.id}
              data-cursor={nextCursor}
            >
              <div
                id="loading-indicator"
                class="flex items-center text-content-meta"
              >
                <div class="w-5 h-5 border-2 border-gray-300 border-t-blue-600 rounded-full animate-spin mr-2" />
                Loading more products...
              </div>
            </div>
          )
        }
      </main>
    </div>
  </div>
</Layout>

<script>
  class CategoryInfiniteScroll {
    private trigger: HTMLElement | null;
    private categoryId: string = "";
    private cursor: string | null = null;
    private isLoading = false;
    private observer?: IntersectionObserver;

    constructor() {
      this.trigger = document.getElementById("scroll-trigger");
      if (!this.trigger) return;

      this.categoryId = this.trigger.dataset.categoryId!;
      this.cursor = this.trigger.dataset.cursor || null;
      this.setupObserver();
    }

    private setupObserver(): void {
      this.observer = new IntersectionObserver(
        (entries) => {
          if (entries[0].isIntersecting && !this.isLoading) {
            this.loadMore();
          }
        },
        { rootMargin: "200px" }
      );
      this.observer.observe(this.trigger!);
    }

    private async loadMore(): Promise<void> {
      if (!this.cursor || this.isLoading) return;
      this.isLoading = true;

      const loadingIndicator = document.getElementById("loading-indicator");
      if (loadingIndicator) {
        loadingIndicator.innerHTML = `
          <div class="w-5 h-5 border-2 border-gray-300 border-t-blue-600 rounded-full animate-spin mr-2"></div>
          Loading more products...
        `;
      }

      try {
        const response = await fetch("/api/load-more-products", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            categoryId: this.categoryId,
            cursor: this.cursor,
            limit: 24,
          }),
        });

        const data = await response.json();

        if (data.success && data.products?.length > 0) {
          // Dispatch event to FilterableProductGrid to add new products
          window.dispatchEvent(
            new CustomEvent("addMoreProducts", {
              detail: { products: data.products },
            })
          );

          this.cursor = data.nextCursor;
          if (!data.hasMore) {
            this.trigger!.style.display = "none";
            this.observer?.disconnect();
          }
        } else {
          this.trigger!.style.display = "none";
          this.observer?.disconnect();
        }
      } catch (error) {
        console.error("Failed to load products:", error);
        this.trigger!.innerHTML = `
          <div class="text-center py-4">
            <p class="text-content-meta mb-2">Failed to load more products</p>
            <button 
              onclick="location.reload()" 
              class="px-4 py-2 text-sm bg-ui-button-surface text-ui-button-text border border-ui-button-border rounded hover:bg-ui-button-hover"
            >
              Try Again
            </button>
          </div>
        `;
      } finally {
        this.isLoading = false;
      }
    }
  }

  document.addEventListener(
    "astro:page-load",
    () => new CategoryInfiniteScroll()
  );
</script>
