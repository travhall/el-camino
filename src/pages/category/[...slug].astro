---
// src/pages/category/[...slug].astro
import ProductCardSkeleton from "@/components/ProductCardSkeleton.astro";
import {
  fetchCategoryHierarchy,
  fetchProductsByCategory,
} from "@/lib/square/categories";
import Layout from "@/layouts/Layout.astro";
import ProductCard from "@/components/ProductCard.astro";
import type { Category, Product } from "@/lib/square/types";

const { slug } = Astro.params;
if (!slug) return Astro.redirect("/404");

// === EXISTING CATEGORY RESOLUTION ===
const categoryHierarchy = await fetchCategoryHierarchy();
const slugParts = slug.split("/");
const topLevelSlug = slugParts[0];
const subCategorySlug = slugParts.length > 1 ? slugParts[1] : null;

const topLevelItem = categoryHierarchy.find(
  (item) => item.category.slug === topLevelSlug
);
if (!topLevelItem?.category) return Astro.redirect("/404");

let category = topLevelItem.category;
let parentCategory = null;

if (subCategorySlug) {
  const subCategory = topLevelItem.subcategories.find(
    (sub) => sub.slug === subCategorySlug
  );
  if (!subCategory) return Astro.redirect("/404");
  category = subCategory;
  parentCategory = topLevelItem.category;
}

// === STREAMLINED PRODUCT FETCHING ===
let products: Product[] = [];
let nextCursor: string | undefined;
let hasMore = false;

try {
  const result = await fetchProductsByCategory(category.id, { limit: 24 });
  products = result.products;
  nextCursor = result.nextCursor;
  hasMore = result.hasMore;
} catch (error) {
  console.error("Error fetching products:", error);
}

const subcategories = !subCategorySlug ? topLevelItem.subcategories : [];
const pageTitle = parentCategory
  ? `${parentCategory.name} - ${category.name}`
  : category.name;
const preloadImages = products
  .slice(0, 8)
  .map((p) => p.image)
  .filter((img) => !img.includes("placeholder"));
---

<Layout title={`Shop ${pageTitle} | El Camino`}>
  <section>
    {preloadImages.map((img) => <link rel="preload" href={img} as="image" />)}

    <div
      class="flex flex-col lg:flex-row justify-between gap-4 w-full items-baseline p-4"
    >
      <h1
        class="font-display font-black text-4xl lg:text-5xl xl:text-6xl 2xl:text-7xl leading-[0.8] text-content-heading"
      >
        {category.name}
      </h1>

      {
        parentCategory && (
          <div>
            <a
              href={`/category/${parentCategory.slug}`}
              class="text-content-meta lg:hover:text-content-emphasis"
            >
              &larr; Back to {parentCategory.name}
            </a>
          </div>
        )
      }

      {
        subcategories.length > 0 && (
          <div class="flex flex-wrap gap-2">
            {subcategories.map((subcategory) => (
              <a
                href={`/category/${category.slug}/${subcategory.slug}`}
                class="px-2 py-1 text-sm bg-ui-button-surface text-ui-button-text border border-ui-button-border rounded-sm lg:hover:bg-ui-button-hover"
              >
                {subcategory.name}
              </a>
            ))}
          </div>
        )
      }
    </div>

    {
      products.length > 0 ? (
        <!-- Products exist - show them -->
        <div
          id="products-grid"
          class="card-grid grid justify-center sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8 xl:grid-cols-12 w-full max-w-[120rem] mx-auto gap-1 p-1"
        >
          {products.map((product, index) => (
            <ProductCard product={product} priority={index < 8} />
          ))}
        </div>
      ) : (
        <!-- No products found - show proper empty state -->
        <div
          id="products-grid"
          class="card-grid grid justify-center sm:grid-cols-4 md:grid-cols-6 lg:grid-cols-8 xl:grid-cols-12 w-full max-w-[120rem] mx-auto gap-1 p-1"
        >
          <div class="col-span-full flex flex-col items-center justify-center py-16 text-center">
            <div class="text-6xl mb-4 opacity-20">ðŸ›¹</div>
            <h2 class="text-2xl font-display font-bold text-content-heading mb-2">
              No products found
            </h2>
            <p class="text-content-meta mb-6 max-w-md">
              {subcategories.length > 0 
                ? `Try browsing our subcategories above, or check out other product categories.`
                : `This category is currently empty. Check back soon for new products!`
              }
            </p>
            <a 
              href="/category/all" 
              class="px-6 py-2 bg-ui-button-surface text-ui-button-text border border-ui-button-border rounded hover:bg-ui-button-hover transition-colors"
            >
              Browse All Products
            </a>
          </div>
        </div>
      )
    }

    <!-- Loading indicator at bottom -->
    {
      hasMore && (
        <div
          id="scroll-trigger"
          class="flex justify-center py-8"
          data-category-id={category.id}
          data-cursor={nextCursor}
        >
          <div
            id="loading-indicator"
            class="flex items-center text-content-meta"
          >
            <div class="w-5 h-5 border-2 border-gray-300 border-t-blue-600 rounded-full animate-spin mr-2" />
            Loading more products...
          </div>
        </div>
      )
    }
  </section>
</Layout>

<script>
  class InfiniteScroll {
    private grid!: HTMLElement;
    private trigger!: HTMLElement | null;
    private categoryId!: string;
    private cursor!: string | null;
    private isLoading = false;
    private observer?: IntersectionObserver;

    constructor() {
      this.grid = document.getElementById("products-grid") as HTMLElement;
      this.trigger = document.getElementById("scroll-trigger");

      if (!this.trigger) return;

      this.categoryId = this.trigger.dataset.categoryId!;
      this.cursor = this.trigger.dataset.cursor || null;
      this.setupObserver();
    }

    private setupObserver(): void {
      this.observer = new IntersectionObserver(
        (entries) => {
          if (entries[0].isIntersecting && !this.isLoading) {
            this.loadMore();
          }
        },
        { rootMargin: "200px" }
      );
      this.observer.observe(this.trigger!);
    }

    private async loadMore(): Promise<void> {
      if (!this.cursor || this.isLoading) return;

      this.isLoading = true;
      
      // Show simple loading indicator instead of skeletons
      const loadingIndicator = document.getElementById('loading-indicator');
      if (loadingIndicator) {
        loadingIndicator.innerHTML = `
          <div class="w-5 h-5 border-2 border-gray-300 border-t-blue-600 rounded-full animate-spin mr-2"></div>
          Loading more products...
        `;
      }

      try {
        const response = await fetch("/api/load-more-products", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            categoryId: this.categoryId,
            cursor: this.cursor,
            limit: 24,
          }),
        });

        const data = await response.json();

        if (data.success && data.products?.length > 0) {
          // Add products with staggered animation
          data.products.forEach((product: any, index: number) => {
            setTimeout(() => {
              const card = this.createProductCard(product);
              this.grid.appendChild(card);
            }, index * 30); // Reduced from 50ms to 30ms for better performance
          });

          this.cursor = data.nextCursor;

          if (!data.hasMore) {
            this.trigger!.style.display = "none";
            this.observer?.disconnect();
          }
        } else {
          // No more products available
          this.trigger!.style.display = "none";
          this.observer?.disconnect();
        }
      } catch (error) {
        console.error("Failed to load products:", error);
        
        // Show retry button instead of skeletons
        this.trigger!.innerHTML = `
          <div class="text-center py-4">
            <p class="text-content-meta mb-2">Failed to load more products</p>
            <button 
              onclick="location.reload()" 
              class="px-4 py-2 text-sm bg-ui-button-surface text-ui-button-text border border-ui-button-border rounded hover:bg-ui-button-hover"
            >
              Try Again
            </button>
          </div>
        `;
      } finally {
        this.isLoading = false;
      }
    }

    private createProductCard(product: any): HTMLElement {
      const card = document.createElement("a");
      card.href = product.url;
      card.className =
        "group flex flex-col col-span-full sm:col-span-2 p-1 bg-ui-card-surface text-ui-card-text border-2 border-ui-card-border lg:hover:bg-ui-card-hover";

      const price = new Intl.NumberFormat("en-US", {
        style: "currency",
        currency: "USD",
      }).format(product.price);

      card.innerHTML = `
        <div class="relative aspect-video sm:aspect-square overflow-hidden mb-4">
          <img
            src="${product.image}"
            alt="${product.title}"
            class="object-cover w-full h-full transition-all duration-200 lg:group-hover:scale-105"
            loading="lazy"
            onerror="this.src='/images/placeholder.png'"
          />
        </div>
        <div class="flex flex-col grow px-1">
          ${product.brand ? `<p class="text-xs uppercase text-content-meta">${product.brand}</p>` : ""}
          <h2 class="text-product-heading font-light leading-tight line-clamp-2 mb-1">
            ${product.title}
          </h2>
          <div class="text-product-price">
            <span class="font-display text-2xl whitespace-nowrap">
              ${price}${product.unit ? `<span class="text-lg">${product.unit}</span>` : ""}
            </span>
          </div>
        </div>
      `;

      // Smooth entrance animation
      card.style.opacity = "0";
      card.style.transform = "translateY(20px)";

      requestAnimationFrame(() => {
        card.style.transition =
          "opacity 0.4s ease-out, transform 0.4s ease-out";
        card.style.opacity = "1";
        card.style.transform = "translateY(0)";
      });

      return card;
    }
  }

  document.addEventListener("astro:page-load", () => new InfiniteScroll());
</script>
