---
// src/pages/category/[...slug].astro 
import ProductFilters from "@/components/ProductFilters.astro";
import AppliedFilters from "@/components/AppliedFilters.astro";
import ProductGrid from "@/components/ProductGrid.astro";
import PaginationControls from "@/components/PaginationControls.astro";
import {
  fetchProductsByCategoryWithPagination,
} from "@/lib/square/categories";
import { fetchCategoryHierarchyWithProducts } from "@/lib/square/categoryUtils";
import { parseURLParams } from "@/lib/square/filterUtils";
import Layout from "@/layouts/Layout.astro";

const { slug } = Astro.params;
if (!slug) return Astro.redirect("/404");

// === EXISTING CATEGORY RESOLUTION ===
const categoryHierarchy = await fetchCategoryHierarchyWithProducts();
const slugParts = slug.split("/");
const topLevelSlug = slugParts[0];
const subCategorySlug = slugParts.length > 1 ? slugParts[1] : null;

const topLevelItem = categoryHierarchy.find(
  (item) => item.category.slug === topLevelSlug
);
if (!topLevelItem?.category) return Astro.redirect("/404");

let category = topLevelItem.category;
let parentCategory = null;

if (subCategorySlug) {
  const subCategory = topLevelItem.subcategories.find(
    (sub) => sub.slug === subCategorySlug
  );
  if (!subCategory) return Astro.redirect("/404");
  category = subCategory;
  parentCategory = topLevelItem.category;
}

// === NEW: PARSE URL PARAMETERS FOR PAGINATION + FILTERING ===
const urlParams = parseURLParams(Astro.url.searchParams);
const { filters, page, pageSize } = urlParams;

import type { Product } from "@/lib/square/types";

// === DAY 1: ENHANCED DATA ARCHITECTURE FOR CLIENT-SIDE FILTERING ===
let productData;
let allProducts: Product[] = [];

try {
  // Fetch paginated products for server-side rendering
  productData = await fetchProductsByCategoryWithPagination(category.id, {
    page,
    pageSize,
    filters,
  });

  // DAY 1: Also fetch ALL products for client-side filtering
  // This enables instant filtering without page reloads
  console.log(`[Category] Fetching all products for client-side filtering in category: ${category.name}`);
  
  const allProductsData = await fetchProductsByCategoryWithPagination(category.id, {
    page: 1,
    pageSize: 1000, // Fetch up to 1000 products for client-side filtering
    filters: { brands: [] }, // No filters to get all products
  });
  
  allProducts = allProductsData.products;
  console.log(`[Category] Loaded ${allProducts.length} products for client-side filtering`);
  
} catch (error) {
  console.error("Error fetching products:", error);
  productData = {
    products: [],
    pagination: {
      currentPage: page,
      totalPages: 1,
      pageSize,
      totalProducts: 0,
      hasNextPage: false,
      hasPrevPage: false,
    },
    appliedFilters: filters,
    filterOptions: { brands: [] },
    hasMore: false,
  };
  allProducts = [];
}

const { products, pagination, appliedFilters, filterOptions } = productData;

// Generate page metadata
const subcategories = !subCategorySlug ? topLevelItem.subcategories : [];
const pageTitle = parentCategory
  ? `${parentCategory.name} - ${category.name}`
  : category.name;

// Add pagination info to title if not on page 1
const fullPageTitle = page > 1
  ? `${pageTitle} - Page ${page} | El Camino`
  : `Shop ${pageTitle} | El Camino`;

// Preload critical images (first 8 products)
const preloadImages = products
  .slice(0, 8)
  .map((p) => p.image)
  .filter((img) => !img.includes("placeholder"));

// Current category path for pagination URLs
const categoryPath = parentCategory 
  ? `/category/${parentCategory.slug}/${category.slug}`
  : `/category/${category.slug}`;
---

<Layout title={fullPageTitle}>
  {preloadImages.map((img) => <link rel="preload" href={img} as="image" />)}

  <!-- Responsive Grid Layout -->
  <div class="min-h-screen bg-(--surface-primary)">

    <!-- Category Header -->
    <div class="p-4 pb-0">
      <div class="flex flex-col md:flex-row justify-between gap-4 items-baseline">
        <div
          class="flex flex-row w-full lg:w-auto justify-between gap-4 items-baseline"
        >
          <h1
            class="font-display font-black text-6xl lg:text-7xl xl:text-8xl 2xl:text-9xl leading-[0.8] text-(--content-heading) mb-2"
          >
            {category.name}
          </h1>
          <!-- Page indicator for non-first pages -->
          {page > 1 && (
            <p class="text-(--content-meta) text-sm mt-2">
              Page {page} of {pagination.totalPages}
            </p>
          )}
        </div>
        <div class="hidden md:block min-w-fit">
        <!-- Subcategory Navigation -->
        {
          subcategories.length > 0 && (
            <div class="flex flex-wrap gap-2 mb-1.5">
              {subcategories.map((subcategory) => (
                <a
                  href={`/category/${category.slug}/${subcategory.slug}`}
                  class="px-2.5 py-1.5 text-sm border rounded-sm bg-(--surface-primary)/50 hover:bg-(--surface-tertiary) transition-colors text-(--ui-input-text) border-(--ui-input-border)/50"
                >
                  {subcategory.name}
                </a>
              ))}
            </div>
          )
        }

        {
          parentCategory && (
            <div class="flex flex-wrap gap-2 mb-1.5">
              <a
                href={`/category/${parentCategory.slug}`}
                class="px-2.5 py-1.5 text-sm border rounded-sm bg-(--surface-primary) hover:bg-(--surface-tertiary) transition-colors text-(--ui-input-text) border-(--ui-input-border)/50"
              >
                See all products in {parentCategory.name}
              </a>
            </div>
          )
        }
      </div>
      </div>
    </div>

    <!-- Page Body -->
    <div
      class="grid grid-cols-1 lg:grid-cols-4 xl:grid-cols-5 gap-1 p-1 pb-0"
    >
      <!-- Filter Sidebar -->
      <aside class="lg:col-span-1">
        <ProductFilters
          filterOptions={filterOptions}
          totalProducts={pagination.totalProducts}
          filteredCount={products.length}
          categoryPath={categoryPath}
        />
      </aside>

      <!-- Main Content -->
      <main class="lg:col-span-3 xl:col-span-4">

        <!-- Applied Filters Above Product Grid -->
        <AppliedFilters categoryPath={categoryPath} classes="hidden lg:block" />

        <!-- Products -->
        {
          products.length > 0 ? (
            <>
              <!-- Products Grid - DAY 1: Enhanced with ALL products for client-side filtering -->
              <ProductGrid
                products={products}
                allProducts={allProducts}
                paginationMode={true}
                categoryPath={categoryPath}
              />

              <!-- Pagination Controls - Hidden by default, only shown as fallback -->
              <div id="server-side-pagination" style="display: none;">
                <PaginationControls
                  pagination={pagination}
                  basePath={categoryPath}
                  filters={appliedFilters}
                  pageSize={pageSize}
                />
              </div>
            </>
          ) : (
            <div class="text-center py-16">
              <div class="text-6xl mb-4 opacity-20">
                {appliedFilters.brands.length > 0 ? "üîç" : "üõπ"}
              </div>
              <h2 class="text-2xl font-display font-bold text-(--content-heading) mb-2">
                {appliedFilters.brands.length > 0 ? "No products match your filters" : "No products found"}
              </h2>
              <p class="text-(--content-meta) mb-6 max-w-md mx-auto">
                {appliedFilters.brands.length > 0 
                  ? "Try adjusting your filters or browse all products."
                  : subcategories.length > 0
                  ? "Try browsing our subcategories above, or check out other product categories."
                  : "This category is currently empty. Check back soon for new products!"
                }
              </p>
              {appliedFilters.brands.length > 0 ? (
                <a
                  href={categoryPath}
                  class="font-sans font-semibold text-sm text-center lg:text-base py-2 px-3 lg:py-2 lg:px-4 border-2 rounded-sm text-(--ui-button-text) bg-(--ui-button-surface) border-(--ui-button-border) hover:bg-(--ui-button-surface)/75 outline-0 focus-visible:ring focus-visible:ring-offset-2 focus-visible:ring-(--ui-button-ring) transition-all ease-in-out duration-300"
                >
                  Clear Filters
                </a>
              ) : (
                <a
                  href="/shop/all"
                  class="font-sans font-semibold text-sm text-center lg:text-base py-2 px-3 lg:py-2 lg:px-4 border-2 rounded-sm text-(--ui-button-text) bg-(--ui-button-surface) border-(--ui-button-border) hover:bg-(--ui-button-surface)/75 outline-0 focus-visible:ring focus-visible:ring-offset-2 focus-visible:ring-(--ui-button-ring) transition-all ease-in-out duration-300"
                >
                  Browse All Products
                </a>
              )}
            </div>
          )
        }
      </main>
    </div>
  </div>
</Layout>