---
// src/components/CartItem.astro - Shared cart item component
import { Icon } from "astro-icon/components";
import { MoneyUtils } from "@/lib/square/money";
import Button from "./Button.astro";
import type { CartItem } from "@/lib/cart/types";

interface Props {
  item: CartItem;
  variant: 'full' | 'mini';
  inventory: number;
  
  // Feature flags
  showSubtotal?: boolean;
  showProductLink?: boolean;
  showInventoryCount?: boolean;
  quantityControlType?: 'input' | 'buttons';
  
  // Styling
  imageSize?: 'sm' | 'md' | 'lg';
  compact?: boolean;
}

const {
  item,
  variant = 'full',
  inventory = 0,
  showSubtotal = variant === 'full',
  showProductLink = variant === 'full',
  showInventoryCount = true,
  quantityControlType = variant === 'full' ? 'input' : 'buttons',
  imageSize = variant === 'full' ? 'lg' : 'sm',
  compact = variant === 'mini'
} = Astro.props;

const itemKey = `${item.id}:${item.variationId}`;
const itemSubtotal = item.price * item.quantity;
const isLowStock = inventory > 0 && inventory <= 5;
const isOutOfStock = inventory <= 0;
const maxQuantity = Math.min(inventory, 99);

// Image size classes
const imageSizes = {
  sm: 'w-16 h-16',
  md: 'w-20 h-20',
  lg: 'w-16 h-16 lg:w-24 lg:h-24'
};

// Layout classes based on variant
const containerClasses = compact 
  ? "flex gap-3 p-3 border border-ui-border rounded-sm"
  : "bg-surface-secondary p-4 flex gap-4 self-start";

const contentClasses = compact
  ? "flex-1 min-w-0"
  : "flex-grow flex flex-col justify-between min-w-0";
---

<div class={containerClasses} data-item-container={itemKey}>
  <!-- Product Image -->
  <div class="flex-shrink-0">
    {item.image ? (
      <img 
        src={item.image} 
        alt={item.title}
        class={`${imageSizes[imageSize]} object-cover rounded ${compact ? 'bg-surface-secondary' : 'border border-border-secondary'}`}
        loading="lazy"
        onerror="this.src='/images/placeholder.png'"
      />
    ) : (
      <div class={`${imageSizes[imageSize]} bg-surface-secondary rounded flex items-center justify-center`}>
        <Icon name="uil:image" class="w-8 h-8 text-content-meta" />
      </div>
    )}
  </div>

  <!-- Product Info -->
  <div class={contentClasses}>
    {variant === 'full' ? (
      <!-- Full cart layout -->
      <div class="flex flex-row justify-between">
        <div class="flex flex-col mb-2 lg:mb-0">
          <h3 class="font-display text-2xl text-content-heading leading-tight">
            {showProductLink ? (
              <a href={`/product/${item.id}`} class="lg:hover:text-content-emphasis transition-colors">
                {item.title}
              </a>
            ) : (
              item.title
            )}
          </h3>
          {item.variationName && (
            <p class="text-content-meta text-sm mt-1">{item.variationName}</p>
          )}
        </div>
        
        {showSubtotal && (
          <div class="text-right">
            <div class="text-content-meta text-xs">
              {MoneyUtils.format(MoneyUtils.fromFloat(item.price))} each
            </div>
            <div class="font-display font-bold text-2xl text-content-emphasis">
              {MoneyUtils.format(MoneyUtils.fromFloat(itemSubtotal))}
            </div>
          </div>
        )}
      </div>
    ) : (
      <!-- Mini cart layout -->
      <div>
        <h3 class="font-medium text-content-heading text-sm leading-tight line-clamp-2">
          {item.title}
        </h3>
        {item.variationName && (
          <p class="text-xs text-content-meta mt-1">{item.variationName}</p>
        )}
        
        <div class="flex items-center justify-between mt-2">
          <div class="flex items-center gap-2">
            <span class="text-sm font-medium text-content-heading">
              {MoneyUtils.format(MoneyUtils.fromFloat(item.price))}
            </span>
            {item.unit && <span class="text-xs text-content-meta">{item.unit}</span>}
          </div>
        </div>
      </div>
    )}

    <!-- Quantity Controls & Actions -->
    <div class={`flex ${variant === 'full' ? 'justify-between items-end gap-4' : 'items-center justify-between mt-2'}`}>
      <!-- Quantity Controls -->
      <div class="flex items-center gap-2">
        {quantityControlType === 'input' && variant === 'full' ? (
          <!-- Input + buttons for full cart -->
          <>
            <label for={`quantity-${itemKey}`} class="text-sm text-content-body hidden lg:block">Qty:</label>
            <div class="flex items-center border border-border-primary rounded">
              <button 
                type="button" 
                class="quantity-decrease px-2 py-1 lg:hover:bg-surface-primary transition-colors" 
                data-action="decrease"
                data-item-key={itemKey}
                data-current-qty={item.quantity}
                aria-label="Decrease quantity"
              >
                âˆ’
              </button>
              <input 
                type="number" 
                id={`quantity-${itemKey}`}
                class="quantity-input w-16 text-center py-1 border-0 bg-surface-primary text-content-body focus:ring-1 focus:ring-content-emphasis [appearance:textfield] [&::-webkit-outer-spin-button]:appearance-none [&::-webkit-inner-spin-button]:appearance-none" 
                value={item.quantity} 
                min="1" 
                max={maxQuantity} 
                data-item-key={itemKey}
              />
              <button 
                type="button" 
                class={`quantity-increase px-2 py-1 lg:hover:bg-surface-primary transition-colors ${item.quantity >= maxQuantity ? 'opacity-50 cursor-not-allowed' : ''}`}
                data-action="increase"
                data-item-key={itemKey}
                disabled={item.quantity >= maxQuantity}
                aria-label="Increase quantity"
              >
                +
              </button>
            </div>
            {showInventoryCount && (
              <div class="text-xs text-content-meta">{inventory} available</div>
            )}
          </>
        ) : (
          <!-- Button controls for mini cart -->
          <div class="flex items-center gap-1">
            <button 
              class={`w-6 h-6 flex items-center justify-center border border-ui-border rounded-sm hover:bg-ui-button-surface transition-colors ${item.quantity <= 1 ? 'opacity-50' : ''}`}
              data-action="decrease"
              data-item-key={itemKey}
              disabled={item.quantity <= 1}
              aria-label="Decrease quantity"
            >
              <Icon name="uil:minus" class="w-3 h-3" />
            </button>
            
            <span class="w-8 text-center text-sm font-medium">{item.quantity}</span>
            
            <button 
              class={`w-6 h-6 flex items-center justify-center border border-ui-border rounded-sm hover:bg-ui-button-surface transition-colors ${item.quantity >= maxQuantity ? 'opacity-50' : ''}`}
              data-action="increase"
              data-item-key={itemKey}
              disabled={item.quantity >= maxQuantity}
              aria-label="Increase quantity"
            >
              <Icon name="uil:plus" class="w-3 h-3" />
            </button>
          </div>
        )}
      </div>

      <!-- Stock Status & Remove -->
      <div class={`flex items-center ${variant === 'full' ? 'gap-4' : 'flex-col items-end'}`}>
        <!-- Stock status -->
        {showInventoryCount && (
          <div class="text-xs">
            {isOutOfStock ? (
              <span class="text-red-600 font-medium">Out of Stock</span>
            ) : isLowStock ? (
              <span class="text-amber-600 font-medium">Only {inventory} left</span>
            ) : variant === 'mini' && (
              <span class="text-content-meta">{inventory} available</span>
            )}
          </div>
        )}
        
        <!-- Remove button -->
        <button 
          class={`text-xs ${variant === 'full' ? 'text-content-meta lg:hover:text-state-error-surface font-medium' : 'text-red-600 hover:text-red-700 underline'} transition-colors`}
          data-action="remove"
          data-item-key={itemKey}
          data-item-title={item.title}
          aria-label={`Remove ${item.title} from cart`}
        >
          Remove
        </button>
      </div>
    </div>
  </div>
</div>