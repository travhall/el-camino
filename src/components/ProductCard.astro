---
import Button from "./Button.astro";

const {
  title = "Card Title",
  description = "Use description for the body text of the Promo Card.",
  category = "Category",
  price = "Price",
  brand = "Brand",
  color = "Color",
  size = "Size",
  image = "/images/placeholder.png",
  url = "http://www.travishall.design",
  label = "Button Label",
  id,
} = Astro.props;
---

<div
  class:list={[
    "card relative flex flex-col aspect-[3_/_4] md:aspect-auto col-span-full md:col-span-2 md:row-span-5 2xl:row-span-4",
  ]}
>
  <img
    src={image}
    alt={title}
    class:list={[
      "card-img object-cover -z-10 w-full h-full transition-all opacity-10",
    ]}
  />
  <div
    class:list={[
      "card-content flex flex-col gap-4 lg:gap-6 px-6 py-12 xl:p-12 absolute bottom-0 w-full",
    ]}
  >
    {
      title.length > 1 && (
        <h1 class="card-heading font-display font-black tracking-wide">
          {title}
        </h1>
      )
    }
    {
      category.length > 1 && (
        <span class="card-category font-display font-semibold text-base tracking-wide uppercase -mb-4">
          {category}
        </span>
      )
    }
    {
      price.length > 1 && (
        <span class="card-price font-display font-semibold text-base tracking-wide">
          {price}
        </span>
      )
    }
    {
      brand.length > 1 && (
        <span class="card-brand font-display font-semibold text-base tracking-wide">
          {brand}
        </span>
      )
    }
    {
      color.length > 1 && (
        <span class="card-color font-display font-semibold text-base tracking-wide">
          {color}
        </span>
      )
    }
    {
      size.length > 1 && (
        <span class="card-size font-display font-semibold text-base tracking-wide">
          {size}
        </span>
      )
    }
    {
      description.length > 1 && (
        <p class="description text-sm leading-snug md:text-base md:leading-snug 2xl:text-lg 2xl:leading-snug">
          {description}
        </p>
      )
    }
    {
      url.length > 1 && label.length > 1 && (
        <Button classes="card-btn self-start" data-url={url}>
          {label}
        </Button>
      )
    }
  </div>
</div>

<script>
  function applyHoverEffects() {
    const cardBtns =
      document.querySelectorAll<HTMLButtonElement>(".card .card-btn");
    const cardImgs =
      document.querySelectorAll<HTMLImageElement>(".card .card-img");

    // Remove existing event listeners
    cardBtns.forEach((cardBtn) => {
      cardBtn.removeEventListener("mouseover", handleMouseOver);
      cardBtn.removeEventListener("mouseout", handleMouseOut);
    });

    if (window.innerWidth >= 1024) {
      cardBtns.forEach((cardBtn, index) => {
        const cardImg = cardImgs[index];

        if (cardImg) {
          cardBtn.addEventListener("mouseover", handleMouseOver);
          cardBtn.addEventListener("mouseout", handleMouseOut);
        }
      });
    }
  }

  function handleMouseOver(this: HTMLButtonElement) {
    const cardImg = (
      this.closest(".card") as HTMLElement
    )?.querySelector<HTMLImageElement>(".card-img");
    if (cardImg) {
      cardImg.style.opacity = "0.6";
    }
  }

  function handleMouseOut(this: HTMLButtonElement) {
    const cardImg = (
      this.closest(".card") as HTMLElement
    )?.querySelector<HTMLImageElement>(".card-img");
    if (cardImg) {
      cardImg.style.opacity = "0.1";
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    applyHoverEffects();
    window.addEventListener("resize", applyHoverEffects);
  });

  const routerLinks = document.querySelectorAll<HTMLButtonElement>(".card-btn");

  routerLinks.forEach((routerLink) => {
    routerLink.addEventListener("click", () => {
      const url = routerLink.getAttribute("data-url");
      if (url) {
        window.location.href = url;
      }
    });
  });
</script>
