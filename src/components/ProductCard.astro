---
import type { Product } from "@/lib/square/types";
import { MoneyUtils } from "@/lib/square/money";
import { getProductStockStatus } from "@/lib/square/inventory";

interface Props {
  product: Product;
  priority?: boolean;
}

const { product, priority = false } = Astro.props;

// Get stock status using existing inventory system
const { isOutOfStock } = await getProductStockStatus(product);

// Format price
const formattedPrice = MoneyUtils.format(MoneyUtils.fromFloat(product.price));

// Schema.org availability
const availabilitySchema = isOutOfStock
  ? "https://schema.org/OutOfStock"
  : "https://schema.org/InStock";

// Generate unique IDs for progressive loading
const imageId = `img-${product.id}`;
const placeholderId = `placeholder-${product.id}`;
---

<a
  href={product.url}
  class={`group grid grid-rows-[auto_1fr] gap-2 w-full p-1 bg-ui-card-surface text-ui-card-text lg:hover:bg-ui-card-hover transition-all duration-200 ${isOutOfStock ? "opacity-75" : ""}`}
  itemscope
  itemtype="http://schema.org/Product"
>
  <!-- Product Image Container with Progressive Loading -->
  <div class="relative aspect-video sm:aspect-square overflow-hidden">
    <!-- Subtle gradient placeholder -->
    <div
      class="absolute inset-0 bg-gradient-to-br from-surface-secondary to-surface-tertiary animate-pulse transition-opacity duration-300"
      id={placeholderId}
    >
    </div>

    <img
      id={imageId}
      src={product.image}
      alt={product.title}
      class={`object-cover w-full h-full transition-all duration-300 opacity-0 lg:group-hover:scale-105 ${isOutOfStock ? "opacity-75" : ""}`}
      loading={priority ? "eager" : "lazy"}
      fetchpriority={priority ? "high" : "auto"}
      decoding={priority ? "sync" : "async"}
      onerror={`this.src='/images/placeholder.png'; this.style.opacity='1'; document.getElementById('${placeholderId}')?.remove()`}
      onload={`this.style.opacity='1'; document.getElementById('${placeholderId}')?.remove()`}
    />

    <!-- Stock Status Overlay (preserved) -->
    {
      isOutOfStock && (
        <div class="absolute top-0 left-0 bg-state-error-surface text-state-error-text px-2 py-1 text-sm font-bold">
          Sold Out
        </div>
      )
    }
  </div>

  <!-- Product Info -->
  <div class="grid px-1">
    <div class="self-start">
      <!-- Brand + Title -->
      {
        product.brand && (
          <p class="text-xs uppercase text-content-meta" itemprop="brand">
            {product.brand}
          </p>
        )
      }
      <h2
        class="text-product-heading font-light leading-tight line-clamp-2 mb-1"
        itemprop="name"
      >
        {product.title}
      </h2>
    </div>

    <!-- Price and Availability -->
    <div class="text-product-price self-end">
      <meta itemprop="availability" content={availabilitySchema} />
      <span
        class="font-display text-2xl whitespace-nowrap"
        itemprop="offers"
        itemscope
        itemtype="http://schema.org/Offer"
      >
        <meta itemprop="price" content={product.price.toString()} />
        <meta itemprop="priceCurrency" content="USD" />
        <meta itemprop="availability" content={availabilitySchema} />
        {formattedPrice}
        {product.unit && <span class="text-lg">{product.unit}</span>}
      </span>
    </div>
  </div>
</a>
