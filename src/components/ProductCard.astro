---
// src/components/ProductCard.astro - Enhanced with Quick View
import type { Product, InventoryStatus } from "@/lib/square/types";
import { MoneyUtils } from "@/lib/square/money";
import { checkItemInventory } from "@/lib/square/inventory";
import { Icon } from "astro-icon/components";
import {
  EL_CAMINO_LOGO_DATA_URI,
  EL_CAMINO_LOADER_DATA_URI,
} from "@/lib/constants/assets";
import { EnhancedImageOptimizer } from "@/lib/image/enhanced-optimizer";

interface Props {
  product: Product;
  priority?: boolean;
  index?: number;
  skipInventoryCheck?: boolean;
  inventoryStatus?: InventoryStatus;
}

const {
  product,
  priority = false,
  index = 0,
  skipInventoryCheck = false,
  inventoryStatus,
} = Astro.props;

// Use inventory status if provided, otherwise perform individual check
let isOutOfStock = false;

// If we have batch inventory status, use it
if (inventoryStatus) {
  isOutOfStock = inventoryStatus.isOutOfStock;
} else if (!skipInventoryCheck && product.variationId) {
  // Fallback to individual inventory check
  try {
    const quantity = await checkItemInventory(product.variationId);
    isOutOfStock = quantity <= 0;
  } catch (error) {
    console.error(
      `ProductCard inventory check failed for ${product.title}:`,
      error
    );
    // Default to in stock on error
  }
}

// Enhanced alt text generation for better accessibility
function generateProductAltText(
  product: Product,
  isOutOfStock: boolean
): string {
  const brand = product.brand ? `${product.brand} ` : "";
  const price = product.price
    ? `, priced at $${MoneyUtils.format(MoneyUtils.fromFloat(product.price))}`
    : "";
  const stock = isOutOfStock ? ", currently sold out" : ", in stock";

  return `${brand}${product.title}${price}${stock}`;
}

// Generate enhanced alt text
const enhancedAltText = generateProductAltText(product, isOutOfStock);

// Format price for display
const formattedPrice = MoneyUtils.format(MoneyUtils.fromFloat(product.price));

// Schema.org availability
const availabilitySchema = isOutOfStock
  ? "https://schema.org/OutOfStock"
  : "https://schema.org/InStock";

// Generate unique IDs
const imageId = `img-${product.id}`;
const placeholderId = `placeholder-${product.id}`;

// Dynamic priority
const isDynamicPriority = priority || index < 12;

// Enhanced image optimization using new system
const imageSet = EnhancedImageOptimizer.generateOptimizedSources(
  product.image,
  {
    width: 600,
    height: 400,
    quality: 85,
    priority: isDynamicPriority,
  }
);

const optimizedImageSrc = imageSet.avif || imageSet.webp || imageSet.jpeg;
---

<div
  class="group relative w-full h-full product-card"
  data-title={product.title}
  data-price={product.price.toString()}
  data-id={product.id}
>
  <a
    href={product.url}
    data-astro-prefetch="hover"
    class={`grid grid-rows-[auto_1fr] gap-2 w-full h-full p-1 bg-(--ui-card-surface) text-(--ui-card-text) hover:bg-(--ui-card-surface-hover) transition-all duration-200 ${isOutOfStock ? "opacity-75" : ""}`}
    itemscope
    itemtype="http://schema.org/Product"
  >
    <!-- Product Image Container -->
    <div class="relative aspect-video sm:aspect-square overflow-hidden">
      <!-- Unified Loading Placeholder with Logo -->
      <div
        class="loading-skeleton loading-image absolute inset-0"
        id={placeholderId}
        aria-hidden="true"
      >
        <!-- El Camino logo using data URI -->
        <div
          class="absolute inset-0 flex items-center justify-center"
          style={`background-image: url('${EL_CAMINO_LOADER_DATA_URI}'); background-size: auto; background-position: center; background-repeat: no-repeat; opacity: 0.7;`}
        >
        </div>
      </div>
      <!-- Enhanced Image -->
      <img
        id={imageId}
        src={optimizedImageSrc}
        alt={enhancedAltText}
        class={`object-cover w-full h-full opacity-0 lg:group-hover:scale-105 transition-all duration-300 ${isOutOfStock ? "opacity-50" : ""} image-enhanced will-change-transform`}
        loading={isDynamicPriority ? "eager" : "lazy"}
        fetchpriority={isDynamicPriority ? "high" : "auto"}
        decoding={isDynamicPriority ? "sync" : "async"}
        data-placeholder-id={placeholderId}
        onload={`this.classList.add('opacity-100', 'loaded'); document.getElementById('${placeholderId}')?.remove()`}
        onerror={`this.src='${EL_CAMINO_LOGO_DATA_URI}'; this.classList.add('opacity-100', 'error'); document.getElementById('${placeholderId}')?.remove()`}
      />

      <!-- Stock status overlay - only Sold Out -->
      {
        isOutOfStock ? (
          <div class="absolute top-0 left-0 bg-state-error-surface text-state-error-text px-3 py-2 text-sm font-bold rounded-br-sm z-20">
            Sold Out
          </div>
        ) : null
      }

      <!-- Quick View Trigger (appears on hover) -->
      <div
        class="absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-end justify-end z-10 pointer-events-none"
      >
        <button
          type="button"
          class="quick-view-trigger hidden lg:block text-(--ui-button-text) bg-(--ui-button-surface) border-(--ui-button-border) focus-visible:ring-(--ui-button-secondary-ring) px-4 py-2 font-semibold text-sm rounded-tl-sm transition-colors duration-200 transform translate-y-4 group-hover:translate-y-0 pointer-events-auto"
          data-product-id={product.id}
          aria-label={`Quick view ${product.title}`}
        >
          <Icon name="uil:eye" class="w-4 h-4 inline mr-2" />
          Quick View
        </button>
      </div>
    </div>

    <!-- Product Info -->
    <div class="grid px-1">
      <div class={`self-start ${isOutOfStock ? "opacity-50" : ""}`}>
        {
          product.brand && (
            <p
              class="text-xs uppercase text-(--content-meta) !mb-0"
              itemprop="brand"
            >
              {product.brand}
            </p>
          )
        }
        <p
          id={`product-title-${product.id}`}
          class="text-base text-(--product-heading) font-light leading-tight line-clamp-2 mb-1"
          itemprop="name"
        >
          {product.title}
        </p>
      </div>

      <div
        class={`text-(--product-price) self-end mb-2 lg:mb-0 ${isOutOfStock ? "opacity-50" : ""}`}
      >
        <meta itemprop="availability" content={availabilitySchema} />
        <span
          id={`product-price-${product.id}`}
          class="font-display font-semibold text-3xl whitespace-nowrap"
          itemprop="offers"
          itemscope
          itemtype="http://schema.org/Offer"
        >
          <meta itemprop="price" content={product.price.toString()} />
          <meta itemprop="priceCurrency" content="USD" />
          <meta itemprop="availability" content={availabilitySchema} />
          {formattedPrice}
          {product.unit && <span class="text-lg ml-1">{product.unit}</span>}
        </span>
      </div>
    </div>
  </a>
</div>

<style>
  .image-enhanced.error {
    filter: grayscale(100%);
  }

  @media (prefers-reduced-motion: reduce) {
    .image-enhanced {
      transition: none !important;
    }
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    // Mobile detection function
    function isMobileDevice(): boolean {
      return window.innerWidth < 1024; // lg breakpoint
    }

    // Enhanced mobile interaction for product cards
    function setupMobileQuickView(): void {
      const productCards = document.querySelectorAll(
        '[itemtype="http://schema.org/Product"]'
      );

      productCards.forEach((card) => {
        const link = card as HTMLAnchorElement;
        const productId = card
          .querySelector(".quick-view-trigger")
          ?.getAttribute("data-product-id");

        if (!productId) return;

        // Clone the link to remove existing listeners
        const newLink = link.cloneNode(true) as HTMLAnchorElement;
        link.parentNode?.replaceChild(newLink, link);

        // Add mobile-specific behavior
        newLink.addEventListener("click", (e) => {
          if (isMobileDevice()) {
            // On mobile: prevent navigation, open Quick View
            e.preventDefault();
            e.stopPropagation();

            // Trigger Quick View if function exists
            if (typeof (window as any).openQuickView === "function") {
              (window as any).openQuickView(productId);
            } else {
              // Fallback to PDP if Quick View not available
              window.location.href = newLink.href;
            }
          }
          // On desktop: let the link work normally (no preventDefault)
        });

        // Ensure Quick View button still works on desktop
        const quickViewButton = newLink.querySelector(".quick-view-trigger");
        if (quickViewButton) {
          quickViewButton.addEventListener("click", (e) => {
            // Always prevent link navigation when Quick View button clicked
            e.preventDefault();
            e.stopPropagation();

            if (typeof (window as any).openQuickView === "function") {
              (window as any).openQuickView(productId);
            }
          });
        }
      });
    }

    // Setup mobile behavior
    setupMobileQuickView();

    // Re-setup on window resize (desktop/mobile transitions)
    let resizeTimeout: number;
    window.addEventListener("resize", () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = window.setTimeout(() => {
        setupMobileQuickView();
      }, 250);
    });
  });
</script>
