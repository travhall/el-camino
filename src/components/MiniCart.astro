---
// src/components/MiniCart.astro - ZERO TypeScript errors, just works
import { Icon } from "astro-icon/components";
---

<!-- Overlay -->
<div
  id="mini-cart-overlay"
  class="fixed inset-0 bg-surface-tertiary/80 dark:bg-surface-primary/80 backdrop-blur-sm z-50 hidden opacity-0 transition-opacity duration-300"
  aria-hidden="true"
>
</div>

<!-- Slide Panel -->
<div
  id="mini-cart-panel"
  class="fixed top-0 right-0 h-screen w-96 max-w-full bg-surface-primary border-4 border-surface-primary z-50 transform translate-x-full transition-transform duration-300 shadow-lg overflow-y-scroll"
  role="dialog"
  aria-labelledby="mini-cart-title"
  aria-hidden="true"
>
  <div class="container grid grid-rows-[auto_1fr_auto] h-full">
    <!-- Header -->
    <div
      class="flex items-center justify-between p-4 border-b-4 border-border-secondary bg-surface-secondary sticky top-0"
    >
      <h2
        id="mini-cart-title"
        class="font-display text-xl text-content-heading"
      >
        Cart (<span id="mini-cart-count">0</span>)
      </h2>
      <button
        id="close-mini-cart"
        type="button"
        class="p-2 hover:border-ui-nav-border border rounded-sm transition-colors"
        aria-label="Close cart"
      >
        <Icon name="uil:times" class="w-6 h-6" />
      </button>
    </div>

    <!-- Content Area -->
    <div id="mini-cart-content" class="flex-1 overflow-y-auto">
      <div id="mini-cart-loading" class="text-center py-8">
        <div
          class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-content-heading"
        >
        </div>
        <p class="mt-2 text-content-meta">Loading cart...</p>
      </div>

      <div id="mini-cart-empty" class="text-center py-8 px-4 hidden">
        <Icon
          name="uil:shopping-cart"
          class="w-16 h-16 mx-auto text-content-meta mb-4"
        />
        <p class="text-content-meta mb-2">Your cart is empty</p>
        <button
          id="continue-shopping"
          class="font-sans font-semibold text-sm lg:text-base py-2 px-3 lg:py-2 lg:px-4 border-2 rounded-[4px] text-ui-button-text bg-ui-button-surface border-ui-button-border lg:hover:bg-ui-button-surface/75 outline-0 focus-visible:ring focus-visible:ring-offset-2 focus-visible:ring-ui-button-ring transition-all ease-in-out duration-300"
        >
          Continue Shopping
        </button>
      </div>

      <div id="mini-cart-items" class="hidden">
        <div class="space-y-1" id="items-list">
          <!-- Items with controls populated here -->
        </div>
      </div>
    </div>

    <!-- Footer -->
    <div
      id="mini-cart-footer"
      class="border-t-4 border-border-secondary bg-surface-secondary p-4 sticky bottom-0 hidden"
    >
      <div class="flex justify-between items-start mb-4">
        <span class="font-medium text-content-heading">Subtotal:</span>
        <span
          id="mini-cart-total"
          class="font-display text-3xl text-content-heading">$0.00</span
        >
      </div>

      <div class="space-y-2">
        <button
          id="mini-cart-checkout"
          class="w-full font-sans font-semibold text-sm text-center lg:text-base py-2 px-3 lg:py-2 lg:px-4 border-2 rounded-[4px] text-ui-button-text bg-ui-button-surface border-ui-button-border lg:hover:bg-ui-button-surface/75 outline-0 focus-visible:ring focus-visible:ring-offset-2 focus-visible:ring-ui-button-ring transition-all ease-in-out duration-300"
          disabled
        >
          <span class="checkout-text">Proceed to Checkout</span>
          <div class="checkout-loading hidden">
            <div
              class="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2"
            >
            </div>
            Processing...
          </div>
        </button>
        <button
          id="view-full-cart"
          class="w-full font-sans font-semibold text-sm text-center lg:text-base py-2 px-3 lg:py-2 lg:px-4 border-2 rounded-[4px] text-ui-button-surface bg-ui-button-surface border-ui-button-border bg-ui-button-surface/0 lg:hover:bg-ui-button-surface/20 outline-0 focus-visible:ring focus-visible:ring-offset-2 focus-visible:ring-ui-button-ring transition-all ease-in-out duration-300"
        >
          View Full Cart
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  import type { CartItem } from "@/lib/cart/types";

  let cart: any = null;
  let inventoryData: Record<string, number> = {};

  async function loadCart() {
    if (!cart) {
      const module = await import("@/lib/cart");
      cart = module.cart;
    }
    return cart;
  }

  function formatPrice(price: number): string {
    return new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "USD",
    }).format(price);
  }

  function showNotification(
    message: string,
    type: "success" | "error" = "success"
  ): void {
    // Use existing system if available
    if (typeof window !== "undefined" && (window as any).showNotification) {
      (window as any).showNotification(message, type);
      return;
    }

    // Fallback (should not be needed but kept for safety)
    const notification = document.createElement("div");
    notification.className = `fixed top-4 right-4 z-70 px-4 py-2 rounded-sm text-white transform translate-x-full transition-transform duration-300 ${
      type === "success" ? "bg-green-600" : "bg-red-600"
    }`;
    notification.textContent = message;

    document.body.appendChild(notification);
    requestAnimationFrame(() =>
      notification.classList.remove("translate-x-full")
    );

    setTimeout(() => {
      notification.classList.add("translate-x-full");
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }

  async function handleCheckout(): Promise<void> {
    const checkoutButton = document.getElementById(
      "mini-cart-checkout"
    ) as HTMLButtonElement;
    const checkoutText = document.querySelector(
      ".checkout-text"
    ) as HTMLElement;
    const checkoutLoading = document.querySelector(
      ".checkout-loading"
    ) as HTMLElement;

    if (!checkoutButton || !checkoutText || !checkoutLoading) return;

    try {
      const cartInstance = await loadCart();
      const items = cartInstance.getItems();

      if (items.length === 0) {
        showNotification("Your cart is empty", "error");
        return;
      }

      checkoutButton.disabled = true;
      checkoutText.classList.add("hidden");
      checkoutLoading.classList.remove("hidden");

      const response = await fetch("/api/create-checkout", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ items }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error?.message || "Checkout failed");
      }

      if (!data.checkoutUrl) {
        throw new Error("No checkout URL returned");
      }

      showNotification("Redirecting to checkout...", "success");
      window.location.href = data.checkoutUrl;
    } catch (error) {
      console.error("Checkout error:", error);
      showNotification(
        error instanceof Error
          ? error.message
          : "Checkout failed. Please try again.",
        "error"
      );

      checkoutButton.disabled = false;
      checkoutText.classList.remove("hidden");
      checkoutLoading.classList.add("hidden");
    }
  }

  function renderCartItem(item: CartItem): string {
    const itemKey = `${item.id}:${item.variationId}`;
    const inventory = inventoryData[item.variationId] || 999;
    const isOutOfStock = inventory <= 0;
    const isLowStock = inventory > 0 && inventory <= 5;
    const maxQuantity = Math.min(inventory, 99);

    return `
      <div class="flex gap-3 p-3 border border-ui-border bg-surface-secondary rounded-sm" data-item-key="${itemKey}">
        ${
          item.image
            ? `
          <img 
            src="${item.image}" 
            alt="${item.title}"
            class="w-16 h-16 object-cover rounded-sm bg-surface-secondary"
            loading="lazy"
          />
        `
            : `
          <div class="w-16 h-16 bg-surface-secondary rounded-sm flex items-center justify-center">
            <svg class="w-8 h-8 text-content-meta" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path>
            </svg>
          </div>
        `
        }

        <div class="flex-1 min-w-0">
          <h3 class="font-medium text-content-heading text-sm leading-tight line-clamp-2">
            <a href="/product/${item.id}" class="lg:hover:text-content-emphasis transition-colors">
            ${item.title}
            </a>
          </h3>

          ${
            item.variationName
              ? `
            <p class="text-xs text-content-meta mt-1">${item.variationName}</p>
          `
              : ""
          }

          <div class="flex items-center justify-between mt-2">
            <div class="flex items-center gap-2">
              <span class="text-sm font-medium text-content-heading">
                ${formatPrice(item.price)}
              </span>
              ${item.unit ? `<span class="text-xs text-content-meta">${item.unit}</span>` : ""}
            </div>

            <!-- Quantity Controls -->
            <div class="flex items-center gap-1">
              <button
                class="w-6 h-6 flex items-center justify-center border border-ui-border rounded-sm hover:bg-ui-button-surface transition-colors ${
                  item.quantity <= 1 ? "opacity-50" : ""
                }"
                data-action="decrease"
                data-item-key="${itemKey}"
                ${item.quantity <= 1 ? "disabled" : ""}
                aria-label="Decrease quantity"
              >
                <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path>
                </svg>
              </button>

              <span class="w-8 text-center text-sm font-medium">${item.quantity}</span>

              <button
                class="w-6 h-6 flex items-center justify-center border border-ui-border rounded-sm hover:bg-ui-button-surface transition-colors ${
                  item.quantity >= maxQuantity ? "opacity-50" : ""
                }"
                data-action="increase"
                data-item-key="${itemKey}"
                ${item.quantity >= maxQuantity ? "disabled" : ""}
                aria-label="Increase quantity"
              >
                <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"></path>
                </svg>
              </button>
            </div>
          </div>

          <div class="flex items-center justify-between mt-2">
            <!-- Stock status -->
            <div class="text-xs">
              ${
                isOutOfStock
                  ? `<span class="text-red-600 font-medium">Out of Stock</span>`
                  : isLowStock
                    ? `<span class="text-amber-600 font-medium">Only ${inventory} left</span>`
                    : ""
              }
            </div>

            <!-- Remove button -->
            <button
              class="text-xs relative lg:hover:text-ui-nav-hover before:absolute before:-bottom-0.5 before:left-0 before:w-full before:h-0.5 before:bg-ui-nav-hover before:transform before:scale-x-0 before:origin-right before:transition-transform before:duration-300 before:ease-in-out lg:hover:before:scale-x-100 lg:hover:before:origin-left"
              data-action="remove"
              data-item-key="${itemKey}"
              data-item-title="${item.title}"
            >
              Remove
            </button>
          </div>
        </div>
      </div>
    `;
  }

  async function loadInventoryData(items: CartItem[]): Promise<void> {
    if (items.length === 0) return;

    try {
      const variationIds = items.map((item) => item.variationId);
      const response = await fetch("/api/cart-inventory", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ variationIds }),
      });

      if (response.ok) {
        const data = await response.json();
        inventoryData = data.inventory || {};
      }
    } catch (error) {
      console.warn("Failed to load inventory data:", error);
    }
  }

  async function updateMiniCartDisplay(): Promise<void> {
    const loadingEl = document.getElementById("mini-cart-loading");
    const emptyEl = document.getElementById("mini-cart-empty");
    const itemsEl = document.getElementById("mini-cart-items");
    const footerEl = document.getElementById("mini-cart-footer");
    const countEl = document.getElementById("mini-cart-count");
    const totalEl = document.getElementById("mini-cart-total");
    const itemsListEl = document.getElementById("items-list");
    const checkoutButton = document.getElementById(
      "mini-cart-checkout"
    ) as HTMLButtonElement;

    if (
      !loadingEl ||
      !emptyEl ||
      !itemsEl ||
      !footerEl ||
      !countEl ||
      !totalEl ||
      !itemsListEl
    ) {
      console.error("Mini cart elements not found");
      return;
    }

    try {
      const cartInstance = await loadCart();
      const items = cartInstance.getItems();
      const total = cartInstance.getTotal();
      const count = cartInstance.getItemCount();

      await loadInventoryData(items);

      countEl.textContent = count.toString();
      loadingEl.classList.add("hidden");

      if (items.length === 0) {
        emptyEl.classList.remove("hidden");
        itemsEl.classList.add("hidden");
        footerEl.classList.add("hidden");
        if (checkoutButton) checkoutButton.disabled = true;
      } else {
        emptyEl.classList.add("hidden");
        itemsEl.classList.remove("hidden");
        footerEl.classList.remove("hidden");

        itemsListEl.innerHTML = items.map(renderCartItem).join("");
        totalEl.textContent = formatPrice(total);

        if (checkoutButton) checkoutButton.disabled = false;

        setupQuantityControls();
      }
    } catch (error) {
      console.error("Error updating mini cart display:", error);
      loadingEl.classList.add("hidden");
      emptyEl.classList.remove("hidden");
    }
  }

  function setupQuantityControls(): void {
    const itemsListEl = document.getElementById("items-list");
    if (!itemsListEl) return;

    // Remove existing listeners to prevent conflicts
    const newItemsList = itemsListEl.cloneNode(true) as HTMLElement;
    const parent = itemsListEl.parentNode;
    if (parent) {
      parent.replaceChild(newItemsList, itemsListEl);
    }

    // Add single event listener
    newItemsList.addEventListener("click", async (e) => {
      const button = (e.target as HTMLElement).closest(
        "button[data-action]"
      ) as HTMLButtonElement;
      if (!button || button.disabled) return;

      e.preventDefault();

      const action = button.dataset.action;
      const itemKey = button.dataset.itemKey;
      const itemTitle = button.dataset.itemTitle;

      if (!itemKey) return;

      try {
        const cartInstance = await loadCart();

        switch (action) {
          case "increase":
            const items = cartInstance.getItems();
            const item = items.find(
              (i: CartItem) => `${i.id}:${i.variationId}` === itemKey
            );
            if (item) {
              const newQty = item.quantity + 1;
              const inventory = inventoryData[item.variationId] || 999;

              if (newQty <= inventory) {
                await cartInstance.updateQuantity(itemKey, newQty);
                await updateMiniCartDisplay();
              } else {
                showNotification(`Only ${inventory} available`, "error");
              }
            }
            break;

          case "decrease":
            const currentItems = cartInstance.getItems();
            const currentItem = currentItems.find(
              (i: CartItem) => `${i.id}:${i.variationId}` === itemKey
            );
            if (currentItem) {
              if (currentItem.quantity === 1) {
                // Use existing modal system if available, fallback to confirm
                if (
                  typeof window !== "undefined" &&
                  (window as any).showModal
                ) {
                  (window as any).showModal(
                    "Remove Item",
                    `Remove "${currentItem.title}" from your cart?`,
                    async () => {
                      cartInstance.removeItem(itemKey);
                      await updateMiniCartDisplay();
                      showNotification("Item removed from cart", "success");
                    },
                    "Remove",
                    "Cancel"
                  );
                } else if (
                  confirm(`Remove "${currentItem.title}" from your cart?`)
                ) {
                  cartInstance.removeItem(itemKey);
                  await updateMiniCartDisplay();
                  showNotification("Item removed from cart", "success");
                }
              } else {
                await cartInstance.updateQuantity(
                  itemKey,
                  currentItem.quantity - 1
                );
                await updateMiniCartDisplay();
              }
            }
            break;

          case "remove":
            if (itemTitle) {
              // Use existing modal system if available, fallback to confirm
              if (typeof window !== "undefined" && (window as any).showModal) {
                (window as any).showModal(
                  "Remove Item",
                  `Remove "${itemTitle}" from your cart?`,
                  async () => {
                    cartInstance.removeItem(itemKey);
                    await updateMiniCartDisplay();
                    showNotification("Item removed from cart", "success");
                  },
                  "Remove",
                  "Cancel"
                );
              } else if (confirm(`Remove "${itemTitle}" from your cart?`)) {
                cartInstance.removeItem(itemKey);
                await updateMiniCartDisplay();
                showNotification("Item removed from cart", "success");
              }
            }
            break;
        }
      } catch (error) {
        console.error("Error handling quantity action:", error);
        showNotification("Error updating cart", "error");
      }
    });
  }

  function initMiniCart() {
    const overlay = document.getElementById("mini-cart-overlay");
    const panel = document.getElementById("mini-cart-panel");
    const closeButton = document.getElementById("close-mini-cart");
    const continueShoppingButton = document.getElementById("continue-shopping");
    const checkoutButton = document.getElementById("mini-cart-checkout");
    const viewCartButton = document.getElementById("view-full-cart");

    // Early return if essential elements missing
    if (!overlay || !panel || !closeButton) {
      console.error("Mini cart elements not found");
      return;
    }

    function openMiniCart() {
      if (overlay && panel && closeButton) {
        overlay.classList.remove("hidden");
        panel.setAttribute("aria-hidden", "false");

        // Prevent page scrolling when MiniCart is open
        document.body.style.overflow = "hidden";

        requestAnimationFrame(() => {
          overlay.classList.remove("opacity-0");
          panel.classList.remove("translate-x-full");
        });

        closeButton.focus();
        updateMiniCartDisplay();
      }
    }

    function closeMiniCart() {
      if (overlay && panel) {
        overlay.classList.add("opacity-0");
        panel.classList.add("translate-x-full");
        panel.setAttribute("aria-hidden", "true");

        // Restore page scrolling when MiniCart is closed
        document.body.style.overflow = "unset";

        setTimeout(() => {
          overlay.classList.add("hidden");
        }, 300);
      }
    }

    closeButton.addEventListener("click", closeMiniCart);
    overlay.addEventListener("click", closeMiniCart);

    if (continueShoppingButton) {
      continueShoppingButton.addEventListener("click", closeMiniCart);
    }

    if (checkoutButton) {
      checkoutButton.addEventListener("click", handleCheckout);
    }

    if (viewCartButton) {
      viewCartButton.addEventListener("click", () => {
        window.location.href = "/cart";
      });
    }

    window.addEventListener("openMiniCart", openMiniCart);
    window.addEventListener("cartUpdated", updateMiniCartDisplay);

    document.addEventListener("keydown", (e) => {
      if (
        e.key === "Escape" &&
        panel &&
        !panel.classList.contains("translate-x-full")
      ) {
        closeMiniCart();
      }
    });
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initMiniCart);
  } else {
    initMiniCart();
  }

  document.addEventListener("astro:page-load", initMiniCart);
</script>
