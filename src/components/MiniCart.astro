---
// src/components/MiniCart.astro
import { Icon } from "astro-icon/components";
import Button from "@/components/Button.astro";
---

<style>
  @keyframes shimmer {
    0% {
      background-position: -200% 0;
    }
    100% {
      background-position: 200% 0;
    }
  }

  .loading-skeleton {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: shimmer 1.5s ease-in-out infinite;
  }
</style>

<!-- Overlay -->
<div
  id="mini-cart-overlay"
  class="fixed inset-0 bg-(--ui-modal-overlay)/90 z-50 hidden opacity-0 transition-opacity duration-300"
>
</div>

<!-- Slide Panel -->
<div
  id="mini-cart-panel"
  class="fixed top-0 right-0 h-screen w-96 max-w-full bg-(--surface-primary) border-4 border-(--surface-primary) z-50 transform translate-x-full transition-transform duration-300 shadow-lg overflow-y-scroll"
  role="dialog"
  aria-labelledby="mini-cart-title"
>
  <div class="container grid grid-rows-[auto_1fr_auto] h-full">
    <!-- Header -->
    <div
      class="flex items-center justify-between p-4 border-b-4 border-(--border-secondary) bg-(--surface-secondary) sticky top-0"
    >
      <h2
        id="mini-cart-title"
        class="font-display text-xl text-(--content-heading)"
      >
        Cart (<span id="mini-cart-count">0</span>)
      </h2>
      <button
        id="close-mini-cart"
        type="button"
        class="p-2 border-(--border-secondary) hover:border-(--ui-nav-border) border-2 rounded-sm transition-colors"
        aria-label="Close cart"
      >
        <Icon name="uil:times" class="w-6 h-6" />
      </button>
    </div>

    <!-- Content Area -->
    <div id="mini-cart-content" class="flex-1 overflow-y-auto">
      <div
        id="mini-cart-loading"
        class="text-center py-8 h-full place-content-center"
      >
        <div
          class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-(--content-emphasis)"
        >
        </div>
        <p class="mt-2 text-(--content-meta)">Loading cart...</p>
      </div>

      <div
        id="mini-cart-empty"
        class="text-center py-8 px-4 h-full place-content-center hidden bg-(--surface-secondary)"
      >
        <Icon
          name="uil:shopping-cart"
          class="w-16 h-16 mx-auto text-(--content-meta) mb-4"
        />
        <p class="text-(--content-meta) mb-2">Your cart is empty</p>
        <Button id="continue-shopping" variant="ghost">
          Continue Shopping
        </Button>
      </div>

      <div id="mini-cart-items" class="hidden">
        <div class="space-y-1" id="items-list">
          <!-- Items with controls populated here -->
        </div>
      </div>
    </div>

    <!-- Footer -->
    <div
      id="mini-cart-footer"
      class="border-t-4 border-(--border-secondary) bg-(--surface-secondary) p-4 sticky bottom-0 hidden"
    >
      <div class="flex justify-between items-start">
        <span class="font-medium text-(--content-heading)">Subtotal:</span>
        <span
          id="mini-cart-total"
          class="font-display text-3xl text-(--content-heading)">$0.00</span
        >
      </div>
      <small class="italic mb-4 block text-(--content-meta)"
        >Shipping &amp; taxes are calculated at checkout</small
      >

      <div class="space-y-2">
        <Button id="mini-cart-checkout" variant="primary" classes="w-full">
          <span class="checkout-text">Proceed to Checkout</span>
          <div class="checkout-loading hidden">
            <div
              class="inline-block animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2"
            >
            </div>
            Processing...
          </div>
        </Button>
        <Button id="view-full-cart" variant="outline" classes="w-full">
          View Full Cart
        </Button>
      </div>
    </div>
  </div>
</div>

<script>
  import type { CartItem } from "@/lib/cart/types";
  import { createSlug } from "@/lib/square/slugUtils";

  let cart: any = null;
  let inventoryData: Record<string, number> = {};

  async function loadCart() {
    if (!cart) {
      const module = await import("@/lib/cart");
      cart = module.cart;
    }
    return cart;
  }

  // Client-side image optimization for cart items
  function optimizeCartImage(src: string): string {
    if (!src || !src.includes("squarecdn.com")) {
      return src;
    }

    try {
      const url = new URL(src);

      // Cart images are small (64x64), optimize accordingly
      url.searchParams.set("w", "64");
      url.searchParams.set("h", "64");
      url.searchParams.set("q", "85");
      url.searchParams.set("auto", "compress");
      url.searchParams.set("fit", "crop");

      // Use AVIF if supported, fallback to WebP, then auto
      if (typeof window !== "undefined") {
        const testCanvas = document.createElement("canvas");
        if (
          testCanvas.toDataURL("image/avif").indexOf("data:image/avif") === 0
        ) {
          url.searchParams.set("f", "avif");
        } else if (
          testCanvas.toDataURL("image/webp").indexOf("data:image/webp") === 0
        ) {
          url.searchParams.set("f", "webp");
        } else {
          url.searchParams.set("f", "auto");
        }
      }

      return url.toString();
    } catch {
      return src;
    }
  }

  function formatPrice(price: number): string {
    return new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "USD",
    }).format(price);
  }

  function showNotification(
    message: string,
    type: "success" | "error" = "success"
  ): void {
    // Use existing system if available
    if (typeof window !== "undefined" && (window as any).showNotification) {
      (window as any).showNotification(message, type);
      return;
    }

    // Fallback (should not be needed but kept for safety)
    const notification = document.createElement("div");
    notification.className = `fixed top-4 right-4 z-70 px-4 py-2 rounded-sm text-white transform translate-x-full transition-transform duration-300 ${
      type === "success" ? "bg-green-600" : "bg-red-600"
    }`;
    notification.textContent = message;

    document.body.appendChild(notification);
    requestAnimationFrame(() =>
      notification.classList.remove("translate-x-full")
    );

    setTimeout(() => {
      notification.classList.add("translate-x-full");
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }

  async function handleCheckout(): Promise<void> {
    const checkoutButton = document.getElementById(
      "mini-cart-checkout"
    ) as HTMLButtonElement;
    const checkoutText = document.querySelector(
      ".checkout-text"
    ) as HTMLElement;
    const checkoutLoading = document.querySelector(
      ".checkout-loading"
    ) as HTMLElement;

    if (!checkoutButton || !checkoutText || !checkoutLoading) return;

    try {
      const cartInstance = await loadCart();
      const items = cartInstance.getItems();

      if (items.length === 0) {
        showNotification("Your cart is empty", "error");
        return;
      }

      checkoutButton.disabled = true;
      checkoutText.classList.add("hidden");
      checkoutLoading.classList.remove("hidden");

      const response = await fetch("/api/create-checkout", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ items }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error?.message || "Checkout failed");
      }

      if (!data.checkoutUrl) {
        throw new Error("No checkout URL returned");
      }

      showNotification("Redirecting to checkout...", "success");
      window.location.href = data.checkoutUrl;
    } catch (error) {
      console.error("Checkout error:", error);
      showNotification(
        error instanceof Error
          ? error.message
          : "Checkout failed. Please try again.",
        "error"
      );

      checkoutButton.disabled = false;
      checkoutText.classList.remove("hidden");
      checkoutLoading.classList.add("hidden");
    }
  }

  function renderCartItem(item: CartItem): string {
    const itemKey = `${item.id}:${item.variationId}`;
    const inventory = inventoryData[item.variationId] || 999;
    const isOutOfStock = inventory <= 0;
    const isLowStock = inventory > 0 && inventory <= 5;
    const maxQuantity = Math.min(inventory, 99);

    // Generate proper slug from product title
    const productSlug = createSlug(item.title);
    const productUrl = `/product/${productSlug}`;

    // Optimize cart image using client-side optimization
    const optimizedImageSrc = item.image ? optimizeCartImage(item.image) : null;

    return `
    <div class="flex gap-3 p-3 bg-(--surface-secondary)" data-item-key="${itemKey}">
      <div class="relative w-16 h-16">
        ${
          optimizedImageSrc
            ? `
          <!-- Shimmer loading placeholder - absolutely positioned -->
          <div 
            class="loading-skeleton absolute inset-0 rounded-sm transition-opacity duration-300"
            id="mini-cart-placeholder-${itemKey}"
            style="animation: shimmer 1.5s ease-in-out infinite;"
          >
            <!-- El Camino logo as loading indicator -->
            <div 
              class="absolute inset-0 flex items-center justify-center rounded-sm opacity-70"
              style="background-image: url('data:image/svg+xml,%3Csvg%20width%3D%2222%22%20height%3D%2220%22%20viewBox%3D%220%200%2022%2020%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Cpath%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%20d%3D%22M4.897%2020h-.042a7.8%207.8%200%200%201-2.111-.285c-.958-.276-1.51-.79-1.616-.889-.107-.102-.65-.62-.947-1.558S.035%2015.235.06%2015.06c.17-1.238.59-1.978.68-2.134a4.8%204.8%200%200%201%201.306-1.472c.13-.095.797-.583%201.83-.859a9%209%200%200%201%202.259-.276%2010.5%2010.5%200%200%201%202.395.258c.466.11.751.226.815.251l.63.264q-.196%201.41-.388%202.821h-1.91c-.262-.441-.57-.614-.634-.65-.364-.208-.718-.208-.783-.208-.058%200-.355%200-.71.135a2.2%202.2%200%200%200-.644.392c-.049.043-.295.258-.505.632-.036.062-.21.368-.275.846-.013.093-.109.79-.021%201.17.087.38.28.584.32.625.039.04.239.245.61.362l.44.091.695.02c.103-.004.667-.025%201.29-.102%202.586-.447%203.186-2.894%203.489-3.547l.06-.146c.297-.68.665-1.121.737-1.208l.002-.002c.13-.163.8-1.01%202.158-1.496l.08-.03c.11-.04.669-.245%201.408-.361a10%2010%200%200%201%201.532-.117h.006c.783%200%201.376.097%201.494.117.714.116%201.214.32%201.314.362.601.245.987.563%201.063.625.074.06.468.38.763.908.274.49.368%201.108.384%201.208.018.12.105.68-.004%201.521-.175%201.343-.644%202.111-.745%202.275a5.2%205.2%200%200%201-1.43%201.546%205.8%205.8%200%200%201-1.926.859c-.176.041-1.106.26-2.25.26-.119%200-.705%200-1.483-.1-.704-.093-1.205-.303-1.304-.344a4.3%204.3%200%200%201-1.06-.644l-.37-.372c-1.833%201.092-4.53%201.335-4.939%201.372-.122.011-.902.084-1.536.088zm10.944-6.774a1.7%201.7%200%200%200-.493.264c-.2.166-.304.34-.324.374l-.204.423-.108.417-.056.356-.042.356-.007.423.086.43c.01.033.066.214.22.386.028.028.161.165.42.27.05.02.264.104.67.104s.641-.085.694-.104c.293-.105.465-.242.5-.27.207-.172.312-.352.332-.387.131-.215.193-.393.205-.429l.109-.423.062-.356.036-.356.006-.417a1.6%201.6%200%200%200-.087-.423c-.011-.033-.067-.208-.228-.374a1.1%201.1%200%200%200-.427-.264c-.05-.02-.258-.104-.664-.104s-.647.085-.7.104M6.723%207.798c1.63%200%202.551-.563%202.738-.853h1.089l-.376%202.736H1.458l.376-2.736.856-.157.534-3.882-.813-.158L2.79%200h8.716l-.376%202.735h-1.05c-.144-.243-1.067-.853-2.542-.853l-.31%202.259%202.011-.41-.306%202.231-1.9-.41zm10.005-.485c.287.004%202.728.038%203.474-.86H21.3l-.443%203.228H10.832l.377-2.736.856-.157.533-3.882-.81-.17L12.162%200h6.405l-.376%202.735-.858.17z%22%20fill%3D%22%2359564F%22%20fill-opacity%3D%22.7%22%2F%3E%3C%2Fsvg%3E'); background-size: 20px 18px; background-position: center; background-repeat: no-repeat;"
            ></div>
          </div>
          
          <!-- Optimized product image - absolutely positioned -->
          <img 
            src="${optimizedImageSrc}" 
            alt="${item.title}"
            class="absolute inset-0 w-full h-full object-cover rounded-sm bg-(--surface-secondary) opacity-0 transition-opacity duration-300"
            loading="eager"
            onload="this.style.opacity='0.9'; const p = document.getElementById('mini-cart-placeholder-${itemKey}'); if(p) p.style.opacity='0';"
            onerror="this.src='data:image/svg+xml,%3Csvg%20width%3D%2248%22%20height%3D%2244%22%20viewBox%3D%220%200%2048%2044%22%20fill%3D%22none%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%3E%3Crect%20width%3D%2248%22%20height%3D%2244%22%20fill%3D%22white%22%20fill-opacity%3D%220.7%22%2F%3E%3Cpath%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%20d%3D%22M12.904%2039.9998L12.827%2040C10.7973%2040%209.28558%2039.5717%208.98823%2039.4875C7.2466%2038.9908%206.24507%2038.0664%206.05024%2037.8868C5.85673%2037.7041%204.86739%2036.7717%204.32907%2035.0827C3.79098%2033.393%204.06438%2031.424%204.10835%2031.1083C4.41789%2028.8789%205.18323%2027.5482%205.34541%2027.2665C6.28447%2025.6546%207.48735%2024.7851%207.72026%2024.617C7.95644%2024.4461%209.16912%2023.5682%2011.049%2023.0713C11.3683%2022.9875%2012.9403%2022.5746%2015.1546%2022.5746C16.5158%2022.5746%2017.3886%2022.6832%2017.5815%2022.7072C18.6588%2022.8396%2019.3555%2023.0028%2019.5075%2023.0382C20.3568%2023.2372%2020.8753%2023.4448%2020.9903%2023.4909L22.1355%2023.9657C21.9004%2025.6583%2021.6653%2027.3511%2021.4303%2029.0439H17.9585C17.4809%2028.2493%2016.9223%2027.9384%2016.8061%2027.8736C16.1433%2027.4983%2015.5003%2027.4983%2015.3821%2027.4983C15.2767%2027.4983%2014.7362%2027.4983%2014.0913%2027.7413C13.9885%2027.7807%2013.4576%2027.9843%2012.9203%2028.4478C12.8311%2028.5247%2012.3829%2028.9116%2012.0013%2029.5847C11.9369%2029.6968%2011.6208%2030.2474%2011.5013%2031.1083C11.478%2031.2752%2011.3041%2032.5284%2011.4628%2033.2133C11.6213%2033.8974%2011.9737%2034.2651%2012.0446%2034.3393C12.1158%2034.4118%2012.4791%2034.7808%2013.1537%2034.9906L13.9563%2035.1554L15.2175%2035.1904C15.4058%2035.1835%2016.431%2035.1461%2017.5641%2035.0065C22.2646%2034.2029%2023.3571%2029.7977%2023.9069%2028.6215L24.0171%2028.3595C24.5561%2027.1344%2025.2245%2026.3417%2025.3573%2026.1846L25.3606%2026.1806C25.5954%2025.8873%2026.8158%2024.3632%2029.2838%2023.4893L29.4298%2023.4357C29.6279%2023.3638%2030.6452%2022.994%2031.9888%2022.7844C32.2096%2022.7503%2033.3443%2022.5746%2034.7747%2022.5746H34.786C36.2098%2022.5754%2037.2871%2022.7496%2037.5022%2022.7844C38.7998%2022.9942%2039.7083%2023.3617%2039.8914%2023.4357C40.9837%2023.8774%2041.6851%2024.4495%2041.8228%2024.5618C41.9576%2024.6701%2042.6738%2025.2462%2043.2108%2026.1956C43.7088%2027.0762%2043.8808%2028.1905%2043.9086%2028.3705C43.9426%2028.5869%2044.1002%2029.5933%2043.9014%2031.1083C43.5843%2033.5256%2042.7306%2034.9081%2042.5479%2035.204C41.5044%2036.9042%2040.1994%2037.8105%2039.9469%2037.986C39.6973%2038.1595%2038.3898%2039.0678%2036.4452%2039.5317C36.1249%2039.6062%2034.4344%2040%2032.3546%2040C32.1384%2040%2031.0728%2040%2029.6578%2039.8188C28.3773%2039.6531%2027.4671%2039.2752%2027.2868%2039.2004C26.2078%2038.7479%2025.4973%2038.1557%2025.3599%2038.0412L24.6875%2037.3722C21.3547%2039.3369%2016.4519%2039.7748%2015.7077%2039.8414C15.4848%2039.8619%2014.0673%2039.9923%2012.9147%2039.9998H12.904ZM32.8021%2027.8074C32.2814%2027.9843%2031.9688%2028.2322%2031.9057%2028.2822C31.5413%2028.5803%2031.3528%2028.8947%2031.3163%2028.9555L30.9453%2029.7173L30.7488%2030.4681L30.6482%2031.1083L30.5709%2031.7486L30.5574%2032.5103L30.7153%2033.2832C30.7339%2033.3441%2030.8345%2033.6693%2031.1147%2033.9787C31.1649%2034.0297%2031.4077%2034.2766%2031.8776%2034.4643C31.9693%2034.4999%2032.3589%2034.652%2033.0973%2034.652C33.8354%2034.652%2034.2618%2034.4987%2034.3574%2034.4643C34.8907%2034.2768%2035.2028%2034.0295%2035.2671%2033.9787C35.6443%2033.6695%2035.8341%2033.3461%2035.8711%2033.2832C36.1097%2032.8959%2036.2213%2032.5748%2036.2438%2032.5103L36.4418%2031.7486L36.5538%2031.1083L36.6197%2030.4681L36.6317%2029.7173C36.6273%2029.6553%2036.6047%2029.3318%2036.4721%2028.9555C36.4528%2028.8957%2036.3511%2028.5801%2036.0581%2028.2822C36.0076%2028.2307%2035.7647%2027.984%2035.2818%2027.8074C35.1915%2027.7713%2034.8119%2027.6198%2034.074%2027.6198C33.3356%2027.6198%2032.8988%2027.7734%2032.8021%2027.8074ZM16.2243%2018.0371C19.1879%2018.0371%2020.8618%2017.0233%2021.2023%2016.5018H23.1817C22.9538%2018.1432%2022.7258%2019.7843%2022.4979%2021.4254H6.6506C6.87851%2019.7843%207.10642%2018.1432%207.33433%2016.5018L8.89093%2016.2182C9.2144%2013.8888%209.53787%2011.5593%209.86133%209.23003L8.38374%208.94627C8.61252%207.29765%208.84152%205.64882%209.07052%204H24.9178C24.6899%205.64133%2024.462%207.28244%2024.2341%208.92377H22.3258C22.0638%208.48625%2020.3852%207.38828%2017.7032%207.38828C17.5148%208.74334%2017.3268%2010.0984%2017.1385%2011.4535C18.3579%2011.2076%2019.5773%2010.962%2020.7968%2010.7161C20.6108%2012.0547%2020.425%2013.3934%2020.2391%2014.7322C19.088%2014.4863%2017.9368%2014.2404%2016.7857%2013.9947C16.5984%2015.3422%2016.4113%2016.6898%2016.2243%2018.0371ZM34.4142%2017.164C34.9358%2017.171%2039.3738%2017.2315%2040.7318%2015.617H42.7278C42.4589%2017.5531%2042.1901%2019.4892%2041.9213%2021.4254H23.6953C23.9233%2019.7843%2024.1512%2018.1432%2024.3791%2016.5018L25.9357%2016.2182C26.2592%2013.8888%2026.5826%2011.5593%2026.9061%209.23003L25.4316%208.92356C25.6594%207.28244%2025.8873%205.64133%2026.1153%204H37.7597C37.5318%205.64133%2037.3038%207.28244%2037.0759%208.92356L35.5161%209.23003C35.1488%2011.8745%2034.7814%2014.5192%2034.4142%2017.164Z%22%20fill%3D%22%2559564F%22%20fill-opacity%3D%220.7%22%2F%3E%3C%2Fsvg%3E'; this.style.opacity='1'; const p = document.getElementById('mini-cart-placeholder-${itemKey}'); if(p) p.style.opacity='0';"
          />
        `
            : `
          <!-- No image fallback with El Camino logo -->
          <div class="w-16 h-16 bg-(--surface-secondary) rounded-sm flex items-center justify-center">
            <svg class="w-8 h-8 text-(--content-meta)" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path>
            </svg>
          </div>
        `
        }
      </div>

      <div class="flex-1 min-w-0">
        <h3 class="font-medium text-(--content-heading) text-sm leading-tight line-clamp-2">
          <a 
            href="${productUrl}" 
            class="hover:text-(--content-emphasis) transition-colors product-link"
            data-product-url="${productUrl}"
          >
          ${item.title}
          </a>
        </h3>

        ${
          item.variationName
            ? `
          <p class="text-xs text-(--content-meta) mt-1">${item.variationName}</p>
        `
            : ""
        }

        <div class="flex items-center justify-between mt-2">
          <!-- Remove button on the left -->
          <button
            class="font-sans font-semibold transition-all ease-in-out duration-300 border-2 rounded-[4px] focus-visible:ring-2 outline-0 focus-visible:ring-offset-2 focus-visible:ring-offset-(--surface-primary) inline-flex items-center justify-center text-xs py-1 px-2 text-(--content-body) bg-(--ui-button-surface)/0 border-(--ui-button-border)/0 hover:bg-(--ui-button-surface)/0 focus-visible:ring-(--ui-button-ring) underline underline-offset-1 decoration-(--content-body)/0 hover:decoration-(--content-body)/80 hover:underline-offset-4"
            data-action="remove"
            data-item-key="${itemKey}"
            data-item-title="${item.title}"
          >
            Remove
          </button>

          <!-- Quantity Controls on the right -->
          <div class="flex items-center">
            <button
              class="w-7 h-7 flex items-center justify-center border-2 rounded-[4px] transition-all ease-in-out duration-300 focus-visible:ring-2 outline-0 focus-visible:ring-offset-2 focus-visible:ring-(--ui-button-ring) text-(--content-body) bg-(--surface-secondary) border-(--border-primary) hover:bg-(--surface-primary) ${
                item.quantity <= 1 ? "opacity-50 cursor-not-allowed" : ""
              }"
              data-action="decrease"
              data-item-key="${itemKey}"
              ${item.quantity <= 1 ? "disabled" : ""}
              aria-label="Decrease quantity"
            >
              <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path>
              </svg>
            </button>

            <span class="w-10 text-center text-base font-medium bg-(--surface-primary)">${item.quantity}</span>

            <button
              class="w-7 h-7 flex items-center justify-center border-2 rounded-[4px] transition-all ease-in-out duration-300 focus-visible:ring-2 outline-0 focus-visible:ring-offset-2 focus-visible:ring-(--ui-button-ring) text-(--content-body) bg-(--surface-secondary) border-(--border-primary) hover:bg-(--surface-primary) ${
                item.quantity >= maxQuantity
                  ? "opacity-50 cursor-not-allowed"
                  : ""
              }"
              data-action="increase"
              data-item-key="${itemKey}"
              ${item.quantity >= maxQuantity ? "disabled" : ""}
              aria-label="Increase quantity"
            >
              <svg class="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>
  `;
  }

  async function loadInventoryData(items: CartItem[]): Promise<void> {
    if (items.length === 0) return;

    try {
      const variationIds = items.map((item) => item.variationId);
      const response = await fetch("/api/cart-inventory", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ variationIds }),
      });

      if (response.ok) {
        const data = await response.json();
        inventoryData = data.inventory || {};
      }
    } catch (error) {
      console.warn("Failed to load inventory data:", error);
    }
  }

  async function updateMiniCartItemQuantity(itemKey: string): Promise<void> {
    const cartInstance = await loadCart();
    const items = cartInstance.getItems();
    const item = items.find(
      (i: CartItem) => `${i.id}:${i.variationId}` === itemKey
    );

    if (!item) {
      // Item was removed, do full update
      await updateMiniCartDisplay();
      return;
    }

    const inventory = inventoryData[item.variationId] || 999;
    const total = cartInstance.getTotal();
    const count = cartInstance.getItemCount();

    // Update cart count
    const countEl = document.getElementById("mini-cart-count");
    if (countEl) {
      countEl.textContent = count.toString();
    }

    // Update item quantity display
    const itemContainer = document
      .querySelector(`[data-item-key="${itemKey}"]`)
      ?.closest(".p-3") as HTMLElement;
    if (itemContainer) {
      const quantitySpan = itemContainer.querySelector(".w-8.text-center");
      if (quantitySpan) {
        quantitySpan.textContent = item.quantity.toString();
      }

      // Update button states
      const decreaseBtn = itemContainer.querySelector(
        '[data-action="decrease"]'
      ) as HTMLButtonElement;
      const increaseBtn = itemContainer.querySelector(
        '[data-action="increase"]'
      ) as HTMLButtonElement;

      if (decreaseBtn) {
        decreaseBtn.disabled = item.quantity <= 1;
        decreaseBtn.classList.toggle("opacity-50", item.quantity <= 1);
      }

      if (increaseBtn) {
        const maxQuantity = Math.min(inventory, 99);
        const canIncrement = item.quantity < maxQuantity;
        increaseBtn.disabled = !canIncrement;
        increaseBtn.classList.toggle("opacity-50", !canIncrement);
      }
    }

    // Update cart total
    const totalEl = document.getElementById("mini-cart-total");
    if (totalEl) {
      totalEl.textContent = formatPrice(total);
    }
  }

  async function updateMiniCartDisplay(): Promise<void> {
    const loadingEl = document.getElementById("mini-cart-loading");
    const emptyEl = document.getElementById("mini-cart-empty");
    const itemsEl = document.getElementById("mini-cart-items");
    const footerEl = document.getElementById("mini-cart-footer");
    const countEl = document.getElementById("mini-cart-count");
    const totalEl = document.getElementById("mini-cart-total");
    const itemsListEl = document.getElementById("items-list");
    const checkoutButton = document.getElementById(
      "mini-cart-checkout"
    ) as HTMLButtonElement;

    if (
      !loadingEl ||
      !emptyEl ||
      !itemsEl ||
      !footerEl ||
      !countEl ||
      !totalEl ||
      !itemsListEl
    ) {
      console.error("Mini cart elements not found");
      return;
    }

    try {
      const cartInstance = await loadCart();
      const items = cartInstance.getItems();
      const total = cartInstance.getTotal();
      const count = cartInstance.getItemCount();

      await loadInventoryData(items);

      countEl.textContent = count.toString();
      loadingEl.classList.add("hidden");

      if (items.length === 0) {
        emptyEl.classList.remove("hidden");
        itemsEl.classList.add("hidden");
        footerEl.classList.add("hidden");
        if (checkoutButton) checkoutButton.disabled = true;
      } else {
        emptyEl.classList.add("hidden");
        itemsEl.classList.remove("hidden");
        footerEl.classList.remove("hidden");

        itemsListEl.innerHTML = items.map(renderCartItem).join("");
        totalEl.textContent = formatPrice(total);

        if (checkoutButton) checkoutButton.disabled = false;

        setupQuantityControls();
      }
    } catch (error) {
      console.error("Error updating mini cart display:", error);
      loadingEl.classList.add("hidden");
      emptyEl.classList.remove("hidden");
    }
  }

  function setupQuantityControls(): void {
    const itemsListEl = document.getElementById("items-list");
    if (!itemsListEl) return;

    // Remove existing listeners to prevent conflicts
    const newItemsList = itemsListEl.cloneNode(true) as HTMLElement;
    const parent = itemsListEl.parentNode;
    if (parent) {
      parent.replaceChild(newItemsList, itemsListEl);
    }

    // Add event listener for both quantity controls AND product links
    newItemsList.addEventListener("click", async (e) => {
      // Handle product links
      const productLink = (e.target as HTMLElement).closest(
        "a.product-link"
      ) as HTMLAnchorElement;
      if (productLink) {
        // Don't prevent default - let link work naturally
        // Just close the mini cart and let Astro handle navigation
        closeMiniCart();
        return;
      }

      // Handle quantity control buttons (existing logic)
      const button = (e.target as HTMLElement).closest(
        "button[data-action]"
      ) as HTMLButtonElement;
      if (!button || button.disabled) return;

      e.preventDefault();

      const action = button.dataset.action;
      const itemKey = button.dataset.itemKey;
      const itemTitle = button.dataset.itemTitle;

      if (!itemKey) return;

      try {
        const cartInstance = await loadCart();

        switch (action) {
          case "increase":
            const items = cartInstance.getItems();
            const item = items.find(
              (i: CartItem) => `${i.id}:${i.variationId}` === itemKey
            );
            if (item) {
              const newQty = item.quantity + 1;
              const inventory = inventoryData[item.variationId] || 999;

              if (newQty <= inventory) {
                await cartInstance.updateQuantity(itemKey, newQty);
                await updateMiniCartItemQuantity(itemKey);
              } else {
                showNotification(`Only ${inventory} available`, "error");
              }
            }
            break;

          case "decrease":
            const currentItems = cartInstance.getItems();
            const currentItem = currentItems.find(
              (i: CartItem) => `${i.id}:${i.variationId}` === itemKey
            );
            if (currentItem) {
              if (currentItem.quantity === 1) {
                // Use existing modal system if available, fallback to confirm
                if (
                  typeof window !== "undefined" &&
                  (window as any).showModal
                ) {
                  (window as any).showModal(
                    "Remove Item",
                    `Remove "${currentItem.title}" from your cart?`,
                    async () => {
                      cartInstance.removeItem(itemKey);
                      await updateMiniCartDisplay();
                      showNotification("Item removed from cart", "success");
                    },
                    "Remove",
                    "Cancel"
                  );
                } else if (
                  confirm(`Remove "${currentItem.title}" from your cart?`)
                ) {
                  cartInstance.removeItem(itemKey);
                  await updateMiniCartDisplay();
                  showNotification("Item removed from cart", "success");
                }
              } else {
                await cartInstance.updateQuantity(
                  itemKey,
                  currentItem.quantity - 1
                );
                await updateMiniCartItemQuantity(itemKey);
              }
            }
            break;

          case "remove":
            if (itemTitle) {
              // Use existing modal system if available, fallback to confirm
              if (typeof window !== "undefined" && (window as any).showModal) {
                (window as any).showModal(
                  "Remove Item",
                  `Remove "${itemTitle}" from your cart?`,
                  async () => {
                    cartInstance.removeItem(itemKey);
                    await updateMiniCartDisplay();
                    showNotification("Item removed from cart", "success");
                  },
                  "Remove",
                  "Cancel"
                );
              } else if (confirm(`Remove "${itemTitle}" from your cart?`)) {
                cartInstance.removeItem(itemKey);
                await updateMiniCartDisplay();
                showNotification("Item removed from cart", "success");
              }
            }
            break;
        }
      } catch (error) {
        console.error("Error handling quantity action:", error);
        showNotification("Error updating cart", "error");
      }
    });

    // Make closeMiniCart function accessible to this scope
    function closeMiniCart() {
      const overlay = document.getElementById("mini-cart-overlay");
      const panel = document.getElementById("mini-cart-panel");

      if (overlay && panel) {
        // Use inert to immediately disable interaction (modern approach)
        panel.setAttribute("inert", "");

        overlay.classList.add("opacity-0");
        panel.classList.add("translate-x-full");

        // Restore page scrolling when MiniCart is closed
        document.body.style.overflow = "unset";

        setTimeout(() => {
          overlay.classList.add("hidden");
          // Clean up inert attribute after modal is fully closed
          panel.removeAttribute("inert");
        }, 300);
      }
    }
  }

  function initMiniCart() {
    const overlay = document.getElementById("mini-cart-overlay");
    const panel = document.getElementById("mini-cart-panel");
    const closeButton = document.getElementById("close-mini-cart");
    const continueShoppingButton = document.getElementById("continue-shopping");
    const checkoutButton = document.getElementById("mini-cart-checkout");
    const viewCartButton = document.getElementById("view-full-cart");

    // Early return if essential elements missing
    if (!overlay || !panel || !closeButton) {
      console.error("Mini cart elements not found");
      return;
    }

    function openMiniCart() {
      if (overlay && panel && closeButton) {
        overlay.classList.remove("hidden");

        // Prevent page scrolling when MiniCart is open
        document.body.style.overflow = "hidden";

        requestAnimationFrame(() => {
          overlay.classList.remove("opacity-0");
          panel.classList.remove("translate-x-full");
        });

        closeButton.focus();
        updateMiniCartDisplay();
      }
    }

    function closeMiniCart() {
      if (overlay && panel) {
        overlay.classList.add("opacity-0");
        panel.classList.add("translate-x-full");

        // Restore page scrolling when MiniCart is closed
        document.body.style.overflow = "unset";

        setTimeout(() => {
          overlay.classList.add("hidden");
        }, 300);
      }
    }

    closeButton.addEventListener("click", closeMiniCart);
    overlay.addEventListener("click", closeMiniCart);

    if (continueShoppingButton) {
      continueShoppingButton.addEventListener("click", closeMiniCart);
    }

    if (checkoutButton) {
      checkoutButton.addEventListener("click", handleCheckout);
    }

    if (viewCartButton) {
      viewCartButton.addEventListener("click", () => {
        window.location.href = "/cart";
      });
    }

    window.addEventListener("openMiniCart", openMiniCart);
    window.addEventListener("cartUpdated", updateMiniCartDisplay);

    document.addEventListener("keydown", (e) => {
      if (
        e.key === "Escape" &&
        panel &&
        !panel.classList.contains("translate-x-full")
      ) {
        closeMiniCart();
      }
    });
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initMiniCart);
  } else {
    initMiniCart();
  }

  document.addEventListener("astro:page-load", initMiniCart);
</script>
