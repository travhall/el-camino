---
// src/components/ThemeToggle.astro
import { Icon } from "astro-icon/components";
const { classes, ...rest } = Astro.props;
---

<button
  class:list={[
    "theme-toggle-button inline-flex rounded-full items-center cursor-pointer select-none",
    classes,
  ]}
  {...rest}
  data-theme-toggle
  role="switch"
  aria-checked="false"
  aria-label="Toggle theme"
>
  <!-- Toggle switch track and thumb -->
  <div
    class="theme-toggle-track relative inline-flex items-center h-7 w-12 rounded-full transition-all duration-300 ease-out border border-elco-fig-leaf-900 dark:border-elco-honey-cream-50"
  >
    <!-- Toggle thumb -->
    <div
      class="theme-toggle-thumb absolute left-0.5 top-0.5 h-[1.375rem] w-[1.375rem] rounded-full transition-all duration-300 ease-out transform translate-x-0 flex items-center justify-center bg-elco-fig-leaf-900 dark:bg-elco-honey-cream-50"
    >
      <!-- Theme icons -->
      <Icon
        name="uil:moon"
        class="theme-icon-moon h-4 w-4 text-ui-button-text transition-all duration-200 opacity-100 dark:opacity-0"
        aria-hidden="true"
      />
      <Icon
        name="uil:sun"
        class="theme-icon-sun absolute h-4 w-4 text-ui-button-text transition-all duration-200 opacity-0 dark:opacity-100"
        aria-hidden="true"
      />
    </div>
  </div>

  <!-- Toggle label text -->
  <span class="theme-toggle-text">
    <span class="hidden dark:block sr-only">Switch to Light Mode</span>
    <span class="block dark:hidden sr-only">Switch to Dark Mode</span>
  </span>
</button>

<style>
  .theme-toggle-button[aria-checked="true"] .theme-toggle-thumb {
    @apply transform translate-x-5;
  }

  /* Focus states for keyboard navigation */
  /* .theme-toggle-button:focus .theme-toggle-track {
    @apply ring-2 ring-ui-button-ring/50 border-ui-button-ring;
  } */

  :root.dark .theme-toggle-thumb {
    @apply transform translate-x-5;
  }

  :root.dark .theme-toggle-button {
    --aria-checked: "true";
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .theme-toggle-track,
    .theme-toggle-thumb,
    .theme-icon-moon,
    .theme-icon-sun,
    .theme-toggle-text {
      transition: none !important;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .theme-toggle-track {
      @apply border-4;
    }
  }

  /* Touch target sizing for mobile */
  /* @media (pointer: coarse) {
    .theme-toggle-button {
      @apply p-2 -m-2;
    }
  } */
</style>

<script>
  function setupThemeToggle() {
    // Initialize theme based on localStorage or system preference
    function initializeTheme() {
      const storedTheme = localStorage.getItem("theme");
      const systemPrefersDark = window.matchMedia(
        "(prefers-color-scheme: dark)"
      ).matches;
      const theme = storedTheme ?? (systemPrefersDark ? "dark" : "light");

      document.documentElement.classList.remove("light", "dark");
      document.documentElement.classList.add(theme);
      document.documentElement.setAttribute("data-theme", theme);

      // Update button aria-checked state
      updateButtonState(theme === "dark");
    }

    // Update button state
    function updateButtonState(isDark: boolean) {
      const toggleButtons = document.querySelectorAll("[data-theme-toggle]");
      toggleButtons.forEach((button) => {
        button.setAttribute("aria-checked", isDark.toString());
      });
    }

    // Handle theme toggle clicks
    function handleToggle() {
      const isDark = document.documentElement.classList.contains("dark");
      const newTheme = isDark ? "light" : "dark";

      document.documentElement.classList.remove("light", "dark");
      document.documentElement.classList.add(newTheme);
      document.documentElement.setAttribute("data-theme", newTheme);
      localStorage.setItem("theme", newTheme);

      // Update button state
      updateButtonState(newTheme === "dark");
    }

    // Setup toggle button(s)
    const toggleButtons = document.querySelectorAll("[data-theme-toggle]");
    toggleButtons.forEach((button) => {
      // Remove any existing listeners
      const newButton = button.cloneNode(true);
      button.parentNode?.replaceChild(newButton, button);

      // Add fresh click listener
      newButton.addEventListener("click", handleToggle);
    });

    // Handle system theme changes if no preference is stored
    const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
    mediaQuery.addEventListener("change", (e) => {
      if (!localStorage.getItem("theme")) {
        const newTheme = e.matches ? "dark" : "light";
        document.documentElement.classList.remove("light", "dark");
        document.documentElement.classList.add(newTheme);
        document.documentElement.setAttribute("data-theme", newTheme);
        updateButtonState(newTheme === "dark");
      }
    });

    // Initialize on load
    initializeTheme();
  }

  // Setup on initial load
  setupThemeToggle();

  // Re-setup after view transitions
  document.addEventListener("astro:after-swap", setupThemeToggle);
</script>
