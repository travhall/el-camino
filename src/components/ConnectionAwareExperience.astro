---
/**
 * Connection-Aware Experience Component
 * File: src/components/ConnectionAwareExperience.astro
 */

interface Props {
  showIndicator?: boolean;
  adaptImages?: boolean;
  disableEcommerceOffline?: boolean;
}

const { 
  showIndicator = true, 
  adaptImages = true, 
  disableEcommerceOffline = true 
} = Astro.props;
---

<div id="connection-aware-wrapper" data-config={JSON.stringify({
  showIndicator,
  adaptImages,
  disableEcommerceOffline
})}>
  <slot />
</div>

<script>
  import { connectionManager } from '@/lib/connection/ConnectionManager';

  class ConnectionAwareExperience {
    private config: {
      showIndicator: boolean;
      adaptImages: boolean;
      disableEcommerceOffline: boolean;
    };

    constructor() {
      const wrapper = document.getElementById('connection-aware-wrapper');
      this.config = JSON.parse(wrapper?.dataset.config || '{}');
      this.init();
    }

    private init(): void {
      // Listen for connection changes
      connectionManager.onStateChange((state) => {
        this.handleConnectionChange(state);
      });

      // Apply initial state
      this.handleConnectionChange(connectionManager.getState());
    }

    private handleConnectionChange(state: any): void {
      // Update body class for CSS-based adaptations
      document.body.className = document.body.className
        .replace(/connection-\w+/g, '')
        .trim();
      document.body.classList.add(`connection-${state.quality}`);

      if (this.config.adaptImages) {
        this.adaptImageQuality(state);
      }

      if (this.config.disableEcommerceOffline) {
        this.handleEcommerceAvailability(state);
      }

      // Dispatch custom event for other components
      window.dispatchEvent(new CustomEvent('connectionchange', {
        detail: state
      }));
    }

    private adaptImageQuality(state: any): void {
      const images = document.querySelectorAll('img[data-connection-adaptive]');
      
      images.forEach((img: any) => {
        const originalSrc = img.dataset.originalSrc || img.src;
        const format = connectionManager.getRecommendedImageFormat();
        const quality = connectionManager.adaptImageQuality();
        
        // Update image source with optimized parameters
        if (originalSrc.includes('squarecdn.com')) {
          const url = new URL(originalSrc);
          url.searchParams.set('f', format);
          url.searchParams.set('q', quality.toString());
          
          if (state.quality === 'slow') {
            // Reduce dimensions for slow connections
            const currentWidth = parseInt(url.searchParams.get('w') || '800');
            url.searchParams.set('w', Math.floor(currentWidth * 0.7).toString());
          }
          
          img.src = url.toString();
          img.dataset.originalSrc = originalSrc;
        }
      });
    }

    private handleEcommerceAvailability(state: any): void {
      const ecommerceElements = document.querySelectorAll('[data-requires-connection]');
      
      ecommerceElements.forEach((element: any) => {
        if (state.online) {
          element.disabled = false;
          element.style.opacity = '1';
          element.style.pointerEvents = 'auto';
          
          // Remove offline message if present
          const offlineMsg = element.querySelector('.offline-message');
          if (offlineMsg) {
            offlineMsg.remove();
          }
        } else {
          element.disabled = true;
          element.style.opacity = '0.6';
          element.style.pointerEvents = 'none';
          
          // Add offline message if not present
          if (!element.querySelector('.offline-message')) {
            const message = document.createElement('div');
            message.className = 'offline-message absolute inset-0 flex items-center justify-center bg-gray-900/75 text-white text-sm font-medium rounded';
            message.textContent = 'Requires internet connection';
            
            element.style.position = 'relative';
            element.appendChild(message);
          }
        }
      });
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new ConnectionAwareExperience());
  } else {
    new ConnectionAwareExperience();
  }
</script>

<style>
  /* Connection-based styling */
  :global(.connection-slow) {
    /* Reduce motion for slow connections */
    --motion-duration: 0s !important;
  }

  :global(.connection-slow) img {
    /* Faster fade-in for slow connections */
    transition: opacity 0.1s ease-in-out;
  }

  :global(.connection-offline) {
    /* Visual indicators for offline state */
    filter: grayscale(0.3);
  }

  /* Connection status indicator styles */
  :global(#connection-status-notification) {
    animation: slideInFromTop 0.3s ease-out;
  }

  @keyframes slideInFromTop {
    from {
      transform: translate(-50%, -100%);
      opacity: 0;
    }
    to {
      transform: translate(-50%, 0);
      opacity: 1;
    }
  }
</style>