---
// src/components/Nav.astro
import { fetchCategoryHierarchy } from "@/lib/square/categories";
import { Icon } from "astro-icon/components";
import { siteConfig } from "@/lib/site-config";

const { contact, social } = siteConfig;

// Fetch Square categories for navigation - now only includes categories with products
// console.log("Nav: Fetching categories...");
const categoryHierarchy = await fetchCategoryHierarchy();
// console.log(`Nav: Found ${categoryHierarchy.length} top-level categories`);

// Static navigation items that should always appear
const staticNavItems = [
  {
    category: {
      id: "shop",
      name: "The Shop",
      slug: "shop",
      isTopLevel: true,
      parentCategoryId: undefined,
      rootCategoryId: undefined,
    },
    subcategories: [
      // {
      //   id: "skate-team",
      //   name: "Skate Team",
      //   slug: "skate-team",
      //   isTopLevel: false,
      //   parentCategoryId: "shop",
      //   rootCategoryId: "shop",
      // },
      // {
      //   id: "tattoos",
      //   name: "Tattoos",
      //   slug: "tattoos",
      //   isTopLevel: false,
      //   parentCategoryId: "shop",
      //   rootCategoryId: "shop",
      // },
      // {
      //   id: "gallery",
      //   name: "The Gallery",
      //   slug: "gallery",
      //   isTopLevel: false,
      //   parentCategoryId: "shop",
      //   rootCategoryId: "shop",
      // },
      // {
      //   id: "community",
      //   name: "Community",
      //   slug: "community",
      //   isTopLevel: false,
      //   parentCategoryId: "shop",
      //   rootCategoryId: "shop",
      // },
    ],
  },
  {
    category: {
      id: "news",
      name: "News",
      slug: "news",
      isTopLevel: true,
      parentCategoryId: undefined,
      rootCategoryId: undefined,
    },
    subcategories: [],
  },
];

// Combine static items with dynamic product categories
const navItems = [
  staticNavItems[0], // "The Shop" goes first
  ...categoryHierarchy, // Only categories with products
  staticNavItems[1], // "News" goes last
];
---

<nav
  class="flex flex-col md:flex-row w-full gap-2 pt-32 md:pt-0 justify-center border-4 border-border-secondary md:border-0 bg-surface-secondary md:relative md:top-auto fixed -translate-x-full md:translate-x-0 transition-transform duration-400 ease-in-out inset-0 top-[3rem] z-40 [&.nav-open]:translate-x-0 overflow-y-auto md:overflow-visible"
>
  {
    navItems.map((item, index) => (
      <div class="category-group relative flex flex-col md:flex-row group transition-all">
        <a
          href={
            item.category.id === "shop"
              ? "/shop"
              : item.category.id === "news"
                ? "/news"
                : `/category/${item.category.slug}`
          }
          class="nav-item text-3xl md:text-lg lg:text-xl font-semibold font-display self-start md:self-center items-center flex flex-row leading-[1] p-4 text-ui-nav-text transition-all duration-300 ease-in-out relative md:hover:text-ui-nav-hover before:absolute before:top-0 before:left-0 before:w-full before:h-0.5 before:bg-ui-nav-hover before:transform before:scale-x-0 before:origin-right before:transition-transform before:duration-300 before:ease-in-out md:hover:before:scale-x-100 md:hover:before:origin-left nav-link"
          style={`--item-index: ${index};`}
          data-has-children={item.subcategories.length > 0}
        >
          {item.category.name}
          {item.subcategories.length > 0 && (
            <span class="dropdown-indicator block ml-1 transition-transform duration-200">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="12"
                height="12"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="hidden md:block transform md:group-hover:rotate-180"
              >
                <polyline points="6 9 12 15 18 9" />
              </svg>

              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 48 48"
                fill="none"
                stroke="currentColor"
                stroke-width="4"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="md:hidden mobile-caret"
              >
                <polyline points="12 18 24 30 36 18" />
              </svg>
            </span>
          )}
        </a>

        {/* Dropdown menu */}
        {item.subcategories.length > 0 && (
          <div class="dropdown-menu md:hidden md:group-hover:block absolute left-0 top-full z-50 min-w-[200px] md:opacity-100 md:transition-none">
            <div class="bg-ui-nav-surface border border-ui-nav-border/20 shadow-lg rounded-sm p-1 overflow-hidden">
              {item.subcategories.map((subcategory) => (
                <a
                  href={
                    item.category.id === "shop"
                      ? `/shop/${subcategory.slug}`
                      : `/category/${item.category.slug}/${subcategory.slug}`
                  }
                  class="block px-4 py-2 text-xl md:text-base text-ui-nav-text hover:bg-ui-nav-hover/20 hover:text-ui-nav-text transition-all duration-300 ease-in-out"
                >
                  {subcategory.name}
                </a>
              ))}
            </div>
          </div>
        )}
      </div>
    ))
  }

  {/* Mobile footer content - styled to match main footer */}
  <div
    class="flex flex-col gap-2 p-4 pt-12 border-t border-ui-nav-border/20 mt-6 md:hidden nav-link"
    style="--item-index: 6;"
  >
    <address class="flex flex-col gap-2 uppercase not-italic text-ui-nav-text">
      <span class="font-semibold">{siteConfig.name}</span>
      <span>{contact.address.street}</span>
      <span
        >{contact.address.city}, {contact.address.state}
        {contact.address.zip}</span
      >
      <a
        href={`tel:${contact.phone.number}`}
        class="mt-2 hover:underline decoration-double underline-offset-4 decoration-ui-button-surface transition-all"
      >
        {contact.phone.display}
      </a>
      <a
        href={`mailto:${contact.email}`}
        class="mt-2 hover:underline decoration-double underline-offset-4 decoration-ui-button-surface transition-all"
      >
        {contact.email}
      </a>
    </address>

    <ul class="inline-flex flex-row gap-4 mt-3">
      {
        social.map((item) => (
          <li>
            <a
              href={item.url}
              aria-label={item.platform}
              class="text-ui-nav-text hover:text-ui-nav-hover"
              target="_blank"
              rel="noopener"
            >
              <Icon name={item.icon} class="w-5 h-auto" />
            </a>
          </li>
        ))
      }
    </ul>
  </div>
</nav>

<style>
  nav {
    view-transition-name: nav;
  }

  @media (max-width: 768px) {
    .nav-link {
      opacity: 0;
      transform: translateX(2rem);
    }

    nav.nav-open .nav-link {
      animation: slideIn 0.5s ease forwards;
      animation-delay: calc(var(--item-index) * 0.1s);
    }

    .dropdown-menu {
      position: static;
      max-height: 0;
      opacity: 0;
      transform: translateY(-10px);
      transition: all 0.3s ease-in-out;
      overflow: hidden;
      background-color: rgba(var(--ui-nav-hover-rgb, 255, 255, 255), 0.05);
      border-left: 2px solid rgba(var(--ui-nav-border-rgb, 255, 255, 255), 0.1);
      /* margin-left: 1.5rem; */
      padding-left: 0.5rem;
      border-radius: 0 0 4px 4px;
    }

    .dropdown-menu > div {
      background: transparent;
      border: none;
      box-shadow: none;
      padding: 0.5rem 0;
    }

    .category-group.open .dropdown-menu {
      display: block;
      max-height: 500px;
      opacity: 1;
      transform: translateY(0);
    }

    /* Caret rotation for mobile */
    .category-group.open .mobile-caret {
      transform: rotate(180deg);
    }

    @keyframes slideIn {
      to {
        opacity: 1;
        transform: translateX(0);
      }
    }
  }
</style>

<script>
  function setupNavigation() {
    // Mobile menu dropdown handling
    const categoryGroups = document.querySelectorAll(".category-group");

    categoryGroups.forEach((group) => {
      const link = group.querySelector(".nav-item");
      const hasChildren = link?.getAttribute("data-has-children") === "true";

      if (hasChildren && link) {
        const handleMobileClick = (event: Event) => {
          if (window.innerWidth <= 768) {
            event.preventDefault();

            // Close any other open groups first
            categoryGroups.forEach((otherGroup) => {
              if (
                otherGroup !== group &&
                otherGroup.classList.contains("open")
              ) {
                otherGroup.classList.remove("open");
              }
            });

            // Toggle current group
            group.classList.toggle("open");
          }
        };

        link.addEventListener("click", handleMobileClick);
      }
    });
  }

  function resetNavItems() {
    const navLinks = document.querySelectorAll(".nav-link");
    navLinks.forEach((link) => {
      const element = link as HTMLElement;
      element.style.opacity = "";
      element.style.transform = "";
    });

    // Reset all open dropdowns when nav closes
    document.querySelectorAll(".category-group.open").forEach((group) => {
      group.classList.remove("open");
    });
  }

  // Reset animations when menu closes
  const nav = document.querySelector("nav");
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.attributeName === "class") {
        if (!nav?.classList.contains("nav-open")) {
          setTimeout(resetNavItems, 300); // Wait for slide out transition
        }
      }
    });
  });

  if (nav) {
    observer.observe(nav, { attributes: true });
  }

  // Clean up observer on page transitions
  document.addEventListener("astro:before-swap", () => {
    observer.disconnect();
  });

  // Reinitialize on new page
  document.addEventListener("astro:after-swap", () => {
    const newNav = document.querySelector("nav");
    if (newNav) {
      observer.observe(newNav, { attributes: true });
    }
    setupNavigation();
  });

  // Initial setup
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", setupNavigation);
  } else {
    setupNavigation();
  }
</script>
