---
import type { VideoBlock } from '@/lib/payload/types';

interface Props {
  block: VideoBlock;
}

const { block } = Astro.props;

function getEmbedUrl(url: string): string {
  try {
    // YouTube
    if (url.includes('youtu.be') || url.includes('youtube.com')) {
      const videoId = url.includes('youtu.be')
        ? url.split('youtu.be/')[1].split('?')[0]
        : new URL(url).searchParams.get('v');
      return `https://www.youtube.com/embed/${videoId}`;
    }

    // Vimeo
    if (url.includes('vimeo.com')) {
      const videoId = url.split('vimeo.com/')[1].split('?')[0];
      return `https://player.vimeo.com/video/${videoId}`;
    }

    return url; // Return as-is for other video types
  } catch (error) {
    console.error('Error parsing video URL:', error);
    return url;
  }
}

const embedUrl = getEmbedUrl(block.url);
---

<div class="mb-8">
  <div class="aspect-video rounded overflow-hidden bg-surface-secondary border border-border-secondary">
    <iframe
      src={embedUrl}
      title={block.caption || 'Video content'}
      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
      allowfullscreen
      class="w-full h-full"
    />
  </div>

  {block.caption && (
    <p class="mt-2 text-content-caption text-sm font-sans">
      {block.caption}
    </p>
  )}

  {block.transcript && (
    <details class="mt-4 group">
      <summary class="text-content-meta cursor-pointer hover:text-content-emphasis transition-colors duration-200">
        View Transcript
      </summary>
      <div class="mt-2 p-4 bg-surface-secondary border border-border-secondary rounded-lg text-content-body">
        <div class="prose max-w-none text-content-body">
          {block.transcript}
        </div>
      </div>
    </details>
  )}
</div>