---
// src/components/NewsSearchSort.astro - Fixed grid/list view toggle
interface Props {
  currentSearch?: string;
  currentSort?: string;
  currentView?: string;
  totalPosts: number;
  filteredCount: number;
}

const {
  currentSearch = "",
  currentSort = "newest",
  currentView = "grid",
  totalPosts,
  filteredCount,
} = Astro.props;
---

<div class="w-full max-w-4xl">
  <div class="flex flex-row gap-2 lg:gap-3 lg:mb-2 mt-2 lg:mt-0">
    <!-- Search Field -->
    <form method="GET" class="w-full">
      <div class="relative flex">
        <input
          type="text"
          name="search"
          placeholder="Search El Camino News"
          value={currentSearch}
          class="flex-1 grow px-4 py-2 text-sm border border-(--ui-input-border)/50 rounded-l-xs bg-(--ui-input-surface) text-(--ui-input-text) focus:ring-2 focus:ring-ui-accent focus:border-ui-accent focus:outline-none"
        />
        <button
          type="submit"
          class="font-sans font-semibold text-sm px-4 py-2 border rounded-r-xs text-(--ui-button-text) bg-(--ui-button-surface) border-(--ui-button-border) hover:bg-(--ui-button-surface)/75 transition-all border-l-0"
          aria-label="Search"
        >
          <svg
            class="h-5 w-5"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </button>
        {
          currentSearch && (
            <button
              type="button"
              class="absolute right-16 top-1/2 transform -translate-y-1/2 clear-search-btn"
              aria-label="Clear search"
            >
              <svg
                class="h-4 w-4 text-(--content-meta) hover:text-(--content-emphasis)"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          )
        }
      </div>
    </form>

    <!-- Controls: Sort + View Toggle -->
    <div class="flex gap-2 lg:gap-3 min-w-fit">
      <!-- Sort Dropdown -->
      <form method="GET" class="hidden md:flex">
        <select
          name="sort"
          class="px-3 py-2 text-sm border border-(--ui-input-border)/50 rounded-xs bg-(--ui-input-surface) text-(--ui-input-text) focus:ring-2 focus:ring-ui-accent focus:border-ui-accent"
        >
          <option value="newest" selected={currentSort === "newest"}
            >Most Recent</option
          >
          <option value="oldest" selected={currentSort === "oldest"}
            >Oldest First</option
          >
          <option value="alphabetical" selected={currentSort === "alphabetical"}
            >A-Z</option
          >
          <option
            value="alphabetical-desc"
            selected={currentSort === "alphabetical-desc"}>Z-A</option
          >
        </select>
      </form>

      <!-- View Toggle Buttons -->
      <div
        class="flex border border-(--ui-input-border)/50 rounded-xs overflow-hidden bg-(--ui-input-surface)"
      >
        <button
          type="button"
          class={`px-3 py-2 text-sm transition-all view-toggle ${
            currentView === "grid"
              ? "bg-(--ui-button-surface) text-(--ui-button-text)"
              : "text-(--content-meta) hover:text-(--content-body)"
          }`}
          data-view="grid"
          aria-label="Grid view"
          title="Grid view"
        >
          <svg
            class="h-4 w-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"
            ></path>
          </svg>
        </button>
        <button
          type="button"
          class={`px-3 py-2 text-sm transition-all view-toggle ${
            currentView === "list"
              ? "bg-(--ui-button-surface) text-(--ui-button-text)"
              : "text-(--content-meta) hover:text-(--content-body)"
          }`}
          data-view="list"
          aria-label="List view"
          title="List view"
        >
          <svg
            class="h-4 w-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  import {
    createNewsAwareURL,
    isNewsPath,
    saveViewPreference,
  } from "@/utils/newsNavigation";
  import { navigate } from "astro:transitions/client";

  document.addEventListener("astro:page-load", () => {
    // Only run on news pages
    if (!isNewsPath(window.location.pathname)) {
      return;
    }

    // Simple debouncing to prevent double-clicks
    let isNavigating = false;

    // Simplified navigation function
    const navigateToUrl = async (url: string) => {
      if (isNavigating) return;
      isNavigating = true;

      try {
        await navigate(url);
      } catch (error) {
        window.location.href = url;
      } finally {
        // Short navigation lock
        setTimeout(() => {
          isNavigating = false;
        }, 150);
      }
    };

    // Handle clear search button
    const clearButtons = document.querySelectorAll(".clear-search-btn");
    clearButtons.forEach((btn) => {
      btn.addEventListener("click", async (e) => {
        e.preventDefault();
        const currentParams = new URLSearchParams(window.location.search);
        currentParams.delete("search");
        currentParams.delete("page");
        const newUrl = createNewsAwareURL(
          window.location.pathname,
          currentParams
        );
        await navigateToUrl(newUrl);
      });
    });

    // Handle sort dropdown changes
    const sortSelects = document.querySelectorAll('select[name="sort"]');
    sortSelects.forEach((select) => {
      select.addEventListener("change", async (e) => {
        e.preventDefault();
        const currentParams = new URLSearchParams(window.location.search);
        const sortValue = (e.target as HTMLSelectElement).value;

        if (sortValue !== "newest") {
          currentParams.set("sort", sortValue);
        } else {
          currentParams.delete("sort");
        }

        currentParams.delete("page");
        const newUrl = createNewsAwareURL(
          window.location.pathname,
          currentParams
        );
        await navigateToUrl(newUrl);
      });
    });

    // FIXED: Simplified view toggle without immediate visual feedback
    const viewToggleButtons = document.querySelectorAll(".view-toggle");

    viewToggleButtons.forEach((button) => {
      button.addEventListener("click", async (e) => {
        e.preventDefault();
        e.stopPropagation();

        const viewType = (e.currentTarget as HTMLElement).dataset.view;
        if (!viewType || isNavigating) return;

        // Save preference to localStorage
        saveViewPreference(viewType as "grid" | "list");

        // Build URL with view parameter
        const currentParams = new URLSearchParams(window.location.search);
        if (viewType === "grid") {
          currentParams.delete("view");
        } else {
          currentParams.set("view", viewType);
        }

        const newUrl = createNewsAwareURL(
          window.location.pathname,
          currentParams
        );

        // Navigate immediately - let server-side rendering handle button states
        await navigateToUrl(newUrl);
      });
    });

    // Keyboard shortcuts
    document.addEventListener("keydown", async (e: KeyboardEvent) => {
      if (
        isNavigating ||
        e.target instanceof HTMLInputElement ||
        e.target instanceof HTMLTextAreaElement
      )
        return;

      if (e.key === "g" && !e.ctrlKey && !e.metaKey) {
        e.preventDefault();
        saveViewPreference("grid");
        const currentParams = new URLSearchParams(window.location.search);
        currentParams.delete("view");
        const newUrl = createNewsAwareURL(
          window.location.pathname,
          currentParams
        );
        await navigateToUrl(newUrl);
      } else if (e.key === "l" && !e.ctrlKey && !e.metaKey) {
        e.preventDefault();
        saveViewPreference("list");
        const currentParams = new URLSearchParams(window.location.search);
        currentParams.set("view", "list");
        const newUrl = createNewsAwareURL(
          window.location.pathname,
          currentParams
        );
        await navigateToUrl(newUrl);
      }
    });
  });
</script>
