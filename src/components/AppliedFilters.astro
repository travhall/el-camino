---
// src/components/AppliedFilters.astro - Enhanced with availability filter support

export interface Props {
  categoryPath?: string;
  classes?: string;
}

const { categoryPath = "", classes } = Astro.props;

// Parse current filters from URL
const currentParams = new URLSearchParams(Astro.url.search);
const currentBrands = currentParams.getAll("brands") || [];
const currentAvailability = currentParams.get("availability") === "true";

// Only show content if there are active filters, but always render container for client-side updates
const hasActiveFilters = currentBrands.length > 0 || currentAvailability;

// Note: URL building is now handled client-side for consistency with the new grid implementation
---

<style>
  /* Simple visibility animation - no height animation needed with new grid */
  .applied-filters-container {
    transition: opacity 300ms ease;
  }

  .applied-filters-container.hidden {
    opacity: 0;
    pointer-events: none;
  }
</style>

<div
  id="applied-filters-container"
  class:list={[
    "applied-filters-container px-2 bg-(--surface-primary)",
    classes,
    !hasActiveFilters ? "hidden" : "",
  ]}
>
  <div
    class="flex flex-wrap items-center gap-3 mb-2"
    id="applied-filters-content"
  >
    {
      hasActiveFilters && (
        <>
          <div class="flex flex-wrap gap-2">
            {currentBrands.map((brand) => (
              <button
                type="button"
                data-remove-brand={brand}
                class="inline-flex items-center px-2.5 py-1.5 text-sm border rounded-full bg-(--surface-primary) hover:bg-(--surface-tertiary) transition-colors text-(--ui-input-text) border-(--ui-input-border)/50 group"
                title={`Remove ${brand} filter`}
              >
                <span>{brand}</span>
                <svg
                  class="w-3 h-3 ml-1 text-(--content-meta) group-hover:text-(--content-body)"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M6 18L18 6M6 6l12 12"
                  />
                </svg>
              </button>
            ))}
            {currentAvailability && (
              <button
                type="button"
                data-remove-availability
                class="inline-flex items-center px-2.5 py-1.5 text-sm border rounded-full bg-(--state-success-surface) hover:bg-(--state-success-surface)/75 transition-colors text-(--state-success-text) border-(--state-success-text)/50 group"
                title="Remove availability filter"
              >
                <span>In stock only</span>
                <svg
                  class="w-3 h-3 ml-1 text-(--state-success-text)/70 group-hover:text-(--state-success-text)"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M6 18L18 6M6 6l12 12"
                  />
                </svg>
              </button>
            )}
          </div>
          <button
            type="button"
            data-clear-all-filters
            class="text-sm text-(--content-meta) hover:text-(--content-emphasis) transition-colors text-nowrap"
          >
            Clear All
          </button>
        </>
      )
    }
  </div>
</div>

<script>
  // UNIFIED event handling for client-side filtering
  document.addEventListener("astro:page-load", () => {
    // Remove individual brand filters
    document.querySelectorAll("[data-remove-brand]").forEach((btn) => {
      btn.addEventListener("click", (e) => {
        const target = e.currentTarget as HTMLElement;
        if (!target?.dataset.removeBrand) return;
        const brand = target.dataset.removeBrand;
        removeFilter("brand", brand);
      });
    });

    // Remove availability filter
    document
      .querySelector("[data-remove-availability]")
      ?.addEventListener("click", () => {
        removeFilter("availability");
      });

    // UNIFIED: Clear all filters with bulletproof FOUT prevention
    document
      .querySelector("[data-clear-all-filters]")
      ?.addEventListener("click", () => {
        // Primary: Use instance method
        const filterInstance = (window as any).currentFilterInstance;
        if (filterInstance?.clearAllFilters) {
          filterInstance.clearAllFilters();
          return;
        }
        
        // Secondary: Use global fallback function
        const globalClearAll = (window as any).globalClearAllFilters;
        if (globalClearAll) {
          globalClearAll();
          return;
        }
        
        // Tertiary: Direct fallback (should rarely be needed)
        console.warn('[AppliedFilters] ‚ö†Ô∏è Using direct fallback - animation may be inconsistent');
        window.location.href = window.location.pathname;
      });
  });

  function removeFilter(type: string, value: string | null = null) {
    // UNIFIED: Use same coordinated approach as Clear All for consistent animations
    const filterInstance = (window as any).currentFilterInstance;
    
    // Try to use the coordinated filter system
    if (filterInstance?.clearAllFilters) {
      // We have a working filter instance - check if we should use exit animation
      const isMobile = window.innerWidth < 1024;
      const visibleCards = document.querySelectorAll('.product-card-wrapper:not([style*="display: none"])');
      
      if (visibleCards.length > 0 && !isMobile) {
        // DESKTOP: Play exit animation then navigate
        console.log('[AppliedFilters] üñ•Ô∏è Desktop: Individual filter removal with exit animation');
        
        // Exit animation
        visibleCards.forEach(card => {
          card.classList.remove('opacity-100');
          card.classList.add('opacity-0');
        });
        
        // Navigate during exit animation (same timing as desktop filtering)
        setTimeout(() => {
          window.location.href = buildRemovalUrl(type, value);
        }, 150);
        
        return;
      }
    }
    
    // FALLBACK: Direct navigation (mobile or no visible cards)
    window.location.href = buildRemovalUrl(type, value);
  }

  function buildRemovalUrl(type: string, value: string | null = null) {
    const currentParams = new URLSearchParams(window.location.search);
    const currentBrands = currentParams.getAll("brands") || [];
    const currentAvailability = currentParams.get("availability") === "true";

    const params = new URLSearchParams();

    if (type === "brand" && value) {
      // Remove this brand, keep others
      const otherBrands = currentBrands.filter((b) => b !== value);
      otherBrands.forEach((brand) => params.append("brands", brand));
      // Keep availability
      if (currentAvailability) params.set("availability", "true");
    } else if (type === "availability") {
      // Keep brands, remove availability
      currentBrands.forEach((brand) => params.append("brands", brand));
    }

    const queryString = params.toString();
    const basePath = window.location.pathname;
    return `${basePath}${queryString ? "?" + queryString : ""}`;
  }
</script>
