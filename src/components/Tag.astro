---
// src/components/Tag.astro - Enhanced with button option for nested anchor scenarios
export interface TagProps {
  tag: {
    name: string;
    slug: string;
    count?: number;
  };
  variant?: "default" | "filter" | "applied" | "pending";
  size?: "sm" | "md";
  clickable?: boolean;
  showCount?: boolean;
  href?: string;
  useButton?: boolean; // New prop for nested anchor scenarios
}

const {
  tag,
  variant = "default",
  size = "sm",
  clickable = false,
  showCount = false,
  href,
  useButton = false,
} = Astro.props as TagProps;

// Base classes
const baseClasses =
  "inline-flex items-center gap-1.5 rounded-full font-medium transition-colors";

// Size classes
const sizeClasses = {
  sm: "px-3 py-1.5 !text-xs",
  md: "px-4 py-2 !text-sm",
};

// Determine element type first
const shouldUseButton = useButton || (clickable && !href);
const shouldUseAnchor = !useButton && (clickable || href);

// Variant classes with !important for button elements
const variantClasses = {
  default: shouldUseButton
    ? "!bg-(--surface-tertiary) !text-(--content-body) hover:!bg-(--ui-button-surface) hover:!text-(--ui-button-text)"
    : "bg-(--surface-tertiary) text-(--content-body) hover:bg-(--ui-button-surface) hover:text-(--ui-button-text)",
  filter: shouldUseButton
    ? "!bg-(--surface-tertiary) hover:!bg-(--ui-button-surface) hover:!text-(--ui-button-text)"
    : "bg-(--surface-tertiary) hover:bg-(--ui-button-surface) hover:text-(--ui-button-text)",
  applied: shouldUseButton
    ? "!bg-(--ui-button-surface) hover:!bg-(--ui-button-surface)/60 !text-(--ui-button-text)"
    : "bg-(--ui-button-surface) hover:bg-(--ui-button-surface)/60 text-(--ui-button-text)",
  pending: shouldUseButton
    ? "!bg-(--ui-accent) !text-white hover:!bg-(--ui-accent)/80"
    : "bg-(--ui-accent) text-white hover:bg-(--ui-accent)/80",
};

const Element = shouldUseButton ? "button" : shouldUseAnchor ? "a" : "span";

const elementProps = shouldUseButton
  ? {
      type: "button" as const,
      "data-tag-url": `/news/tag/${tag.slug}`,
    }
  : shouldUseAnchor && href
    ? { href }
    : {};
---

<Element
  class:list={[
    baseClasses,
    sizeClasses[size],
    variantClasses[variant],
    (clickable || shouldUseButton) && "cursor-pointer",
    shouldUseButton && "tag-nav-button",
  ]}
  {...elementProps}
>
  <span>{tag.name}</span>
  {
    showCount && tag.count !== undefined && (
      <span class="text-xs opacity-75">({tag.count})</span>
    )
  }
  <slot />
</Element>

<style>
  /* Override Tailwind's button reset with higher specificity */
  button.tag-nav-button {
    border: none;
    background: revert;
    font: inherit;
    text-decoration: none;
    outline: inherit;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const tagButtons = document.querySelectorAll(".tag-nav-button");

    tagButtons.forEach((button) => {
      button.addEventListener("click", (e) => {
        e.stopPropagation();
        e.preventDefault();

        const url = button.getAttribute("data-tag-url");
        if (url) {
          window.location.href = url;
        }
      });
    });
  });
</script>
