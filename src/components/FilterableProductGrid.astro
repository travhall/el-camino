---
// src/components/FilterableProductGrid.astro
import ProductCard from "./ProductCard.astro";
import ProductCardSkeleton from "./ProductCardSkeleton.astro";
import type { Product } from "@/lib/square/types";

interface Props {
  products: Product[];
  paginationMode?: boolean;
  categoryPath?: string;
}

const { products, paginationMode = false, categoryPath = "" } = Astro.props;
---

<div
  id="filterable-product-grid"
  class="grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-6 gap-1 transition-all duration-300"
  data-products={JSON.stringify(products)}
  data-pagination-mode={paginationMode}
  data-category-path={categoryPath}
>
  {
    products.map((product, index) => (
      <div
        class="product-card-wrapper grid"
        data-product-id={product.id}
        data-brand={product.brand || ""}
      >
        <ProductCard product={product} priority={index < 8} />
      </div>
    ))
  }
</div>

<!-- Enhanced Loading Overlay -->
<div
  id="filter-loading-overlay"
  class="hidden fixed inset-0 bg-surface-primary/60 backdrop-blur-sm z-40 flex items-center justify-center"
>
  <div
    class="bg-surface-secondary rounded-lg p-6 shadow-lg flex items-center space-x-3"
  >
    <div
      class="animate-spin rounded-full h-5 w-5 border-2 border-ui-accent border-t-transparent"
    >
    </div>
    <span class="text-content-body font-medium">Applying filters...</span>
  </div>
</div>

<!-- Product Grid Loading Skeleton -->
<div
  id="product-grid-skeleton"
  class="hidden grid-cols-2 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-6 gap-1"
>
  {
    Array.from({ length: 12 }, (_, i) => (
      <ProductCardSkeleton priority={i < 8} />
    ))
  }
</div>

<!-- No Results State (for client-side mode only) -->
<div
  id="no-results"
  class={`${paginationMode ? "hidden" : "flex flex-col"} justify-center items-center col-span-full py-16 text-center`}
>
  <div class="text-center">
    <div class="text-6xl mb-4 opacity-20">üîç</div>
    <h2 class="text-2xl font-display font-bold text-content-heading mb-2">
      No products found
    </h2>
    <p class="text-content-meta mb-6 max-w-md">
      Try adjusting your filters or browse all products.
    </p>
    <button
      id="clear-filters-cta"
      class="font-sans font-semibold text-sm lg:text-base py-2 px-3 lg:py-2 lg:px-4 border-2 rounded-[4px] outline-0 focus-visible:ring focus-visible:ring-offset-2 text-ui-button-text bg-ui-button-surface border-ui-button-border lg:hover:bg-ui-button-surface/25 focus-visible:ring-ui-button-ring transition-all ease-in-out duration-300"
    >
      Clear Filters
    </button>
  </div>
</div>

<script>
  class FilterableProductGrid {
    private grid: HTMLElement | null;

    constructor() {
      this.grid = document.getElementById("filterable-product-grid");
      if (!this.grid) return;

      this.initializeGrid();
      this.setupClearFilterAnimations();
    }

    private initializeGrid(): void {
      if (!this.grid) return;

      // Check if we're loading from a filter action (grid should be faded)
      const wasFiltering = sessionStorage.getItem("filtering-in-progress");

      if (wasFiltering) {
        // Smooth fade-in from filtered state
        this.grid.style.opacity = "0.4";
        this.grid.style.transition = "opacity 0.4s ease";

        requestAnimationFrame(() => {
          this.grid!.style.opacity = "1";
        });

        sessionStorage.removeItem("filtering-in-progress");
      } else {
        // Normal page load
        this.grid.style.opacity = "1";
        this.grid.style.transition = "opacity 0.3s ease";
      }
    }

    private setupClearFilterAnimations(): void {
      // Add animation delay to clear filter links
      const clearLinks = document.querySelectorAll(
        'a[href*="pageSize"]:not([data-animated])'
      );
      clearLinks.forEach((link) => {
        link.setAttribute("data-animated", "true");
        link.addEventListener("click", (e) => {
          e.preventDefault();

          if (this.grid) {
            this.grid.style.opacity = "0.4";
            sessionStorage.setItem("filtering-in-progress", "true");

            setTimeout(() => {
              window.location.href = (e.target as HTMLAnchorElement).href;
            }, 150);
          }
        });
      });
    }
  }

  document.addEventListener("astro:page-load", () => {
    new FilterableProductGrid();
  });
</script>

<style>
  #filterable-product-grid {
    transition: opacity 0.3s ease;
  }

  /* Ensure smooth transitions during filtering */
  #filterable-product-grid.filtering {
    pointer-events: none;
  }

  @media (prefers-reduced-motion: reduce) {
    #filterable-product-grid {
      transition: none !important;
    }
  }
</style>
