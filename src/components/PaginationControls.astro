---
// src/components/PaginationControls.astro - AJAX-enabled pagination
import type { PaginationMeta, ProductFilters } from "@/lib/square/types";
import { buildPaginatedURL } from "@/lib/square/filterUtils";

interface Props {
  pagination: PaginationMeta;
  basePath: string;
  filters: ProductFilters;
  pageSize?: number;
}

const { pagination, basePath, filters, pageSize = 24 } = Astro.props;

// Don't render if only one page
if (pagination.totalPages <= 1) {
  return null;
}

const { currentPage, totalPages, hasNextPage, hasPrevPage } = pagination;

// Generate page numbers with smart truncation
function generatePageNumbers(
  current: number,
  total: number
): (number | "ellipsis")[] {
  if (total <= 7) {
    return Array.from({ length: total }, (_, i) => i + 1);
  }

  const pages: (number | "ellipsis")[] = [];
  pages.push(1);

  if (current <= 4) {
    for (let i = 2; i <= Math.min(5, total - 1); i++) {
      pages.push(i);
    }
    if (total > 6) pages.push("ellipsis");
    if (total > 1) pages.push(total);
  } else if (current >= total - 3) {
    if (total > 6) pages.push("ellipsis");
    for (let i = Math.max(2, total - 4); i <= total; i++) {
      pages.push(i);
    }
  } else {
    pages.push("ellipsis");
    for (let i = current - 1; i <= current + 1; i++) {
      pages.push(i);
    }
    pages.push("ellipsis");
    pages.push(total);
  }

  return pages;
}

const pageNumbers = generatePageNumbers(currentPage, totalPages);

// URL generation helpers
const prevURL = hasPrevPage
  ? buildPaginatedURL(basePath, filters, currentPage - 1, pageSize)
  : null;

const nextURL = hasNextPage
  ? buildPaginatedURL(basePath, filters, currentPage + 1, pageSize)
  : null;

const getPageURL = (page: number) =>
  buildPaginatedURL(basePath, filters, page, pageSize);
---

<nav
  class="flex items-center justify-center mt-8 mb-4"
  aria-label="Pagination Navigation"
  role="navigation"
  id="pagination-controls"
>
  <div class="flex items-center space-x-2 md:space-x-1">
    <!-- Previous Button -->
    {
      prevURL ? (
        <button
          type="button"
          data-pagination-page={currentPage - 1}
          data-pagination-url={prevURL}
          class="flex items-center p-2 text-sm text-ui-card-text bg-ui-card-surface border border-ui-card-border rounded-full hover:bg-ui-card-hover transition-colors"
          aria-label={`Go to page ${currentPage - 1}`}
        >
          <svg
            class="w-4 h-4 mr-1"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 19l-7-7 7-7"
            />
          </svg>
        </button>
      ) : (
        <span class="flex items-center p-2 text-sm text-content-meta bg-surface-secondary border border-ui-border rounded-full cursor-not-allowed">
          <svg
            class="w-4 h-4 mr-1"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 19l-7-7 7-7"
            />
          </svg>
        </span>
      )
    }

    <!-- Page Numbers (Hidden on small screens) -->
    <div class="hidden md:flex items-center space-x-1">
      {
        pageNumbers.map((page, index) =>
          page === "ellipsis" ? (
            <span class="px-3 py-1 text-content-meta" aria-hidden="true">
              ...
            </span>
          ) : (
            <button
              type="button"
              data-pagination-page={page}
              data-pagination-url={getPageURL(page)}
              class={`px-3 py-1 text-sm border rounded-full transition-colors ${
                page === currentPage
                  ? "bg-ui-button-surface text-ui-button-text border-ui-button-border font-medium pointer-events-none"
                  : "text-ui-card-text bg-ui-card-surface border-ui-card-border hover:bg-ui-card-hover"
              }`}
              aria-label={
                page === currentPage
                  ? `Current page, page ${page}`
                  : `Go to page ${page}`
              }
              aria-current={page === currentPage ? "page" : undefined}
              disabled={page === currentPage}
            >
              {page}
            </button>
          )
        )
      }
    </div>

    <!-- Page Info (Mobile) -->
    <div
      class="flex md:hidden items-center px-3 py-2 text-sm text-content-body bg-surface-secondary border border-ui-border rounded-full"
    >
      {currentPage} of {totalPages}
    </div>

    <!-- Next Button -->
    {
      nextURL ? (
        <button
          type="button"
          data-pagination-page={currentPage + 1}
          data-pagination-url={nextURL}
          class="flex items-center px-3 py-2 text-sm text-ui-card-text bg-ui-card-surface border border-ui-card-border rounded-full hover:bg-ui-card-hover transition-colors"
          aria-label={`Go to page ${currentPage + 1}`}
        >
          <svg
            class="w-4 h-4 ml-1"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M9 5l7 7-7 7"
            />
          </svg>
        </button>
      ) : (
        <span class="flex items-center px-3 py-2 text-sm text-content-meta bg-surface-secondary border border-ui-border rounded-full cursor-not-allowed">
          <svg
            class="w-4 h-4 ml-1"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M9 5l7 7-7 7"
            />
          </svg>
        </span>
      )
    }
  </div>
</nav>

<script>
  class AjaxPagination {
    constructor() {
      this.setupPaginationHandlers();
    }

    private setupPaginationHandlers(): void {
      const paginationContainer = document.getElementById(
        "pagination-controls"
      );
      if (!paginationContainer) return;

      paginationContainer.addEventListener("click", async (e) => {
        const target = e.target as HTMLElement;
        const button = target.closest(
          "[data-pagination-page]"
        ) as HTMLButtonElement;

        if (!button || button.disabled) return;

        e.preventDefault();

        const pageUrl = button.dataset.paginationUrl;
        if (!pageUrl) return;

        await this.loadPage(pageUrl);
      });
    }

    private async loadPage(url: string): Promise<void> {
      try {
        this.showLoadingState();

        const response = await fetch(url, {
          headers: {
            Accept: "text/html",
            "X-Requested-With": "XMLHttpRequest",
          },
        });

        if (!response.ok) throw new Error(`HTTP ${response.status}`);

        const html = await response.text();
        await this.updatePageContent(html);

        // Update URL without page reload
        history.pushState(null, "", url);

        // Scroll to top of results
        document.querySelector("#filterable-product-grid")?.scrollIntoView({
          behavior: "smooth",
          block: "start",
        });
      } catch (error) {
        console.error("Pagination error:", error);
        this.showErrorState();
      } finally {
        this.hideLoadingState();
      }
    }

    private async updatePageContent(html: string): Promise<void> {
      const parser = new DOMParser();
      const newDoc = parser.parseFromString(html, "text/html");

      // Update product grid
      const newGrid = newDoc.querySelector("#filterable-product-grid");
      const currentGrid = document.querySelector(
        "#filterable-product-grid"
      ) as HTMLElement;

      if (newGrid && currentGrid) {
        currentGrid.style.opacity = "0";
        await new Promise((resolve) => setTimeout(resolve, 200));
        currentGrid.innerHTML = newGrid.innerHTML;
        currentGrid.style.opacity = "1";
      }

      // Update pagination controls
      const newPagination = newDoc.querySelector("#pagination-controls");
      const currentPagination = document.querySelector("#pagination-controls");

      if (newPagination && currentPagination) {
        currentPagination.innerHTML = newPagination.innerHTML;
        this.setupPaginationHandlers(); // Re-bind events
      }

      // Update applied filters
      const newAppliedFilters = newDoc.querySelector(
        ".mb-1.p-2.bg-surface-primary"
      );
      const currentAppliedFilters = document.querySelector(
        ".mb-1.p-2.bg-surface-primary"
      );

      if (newAppliedFilters && currentAppliedFilters) {
        currentAppliedFilters.innerHTML = newAppliedFilters.innerHTML;
      }
    }

    private showLoadingState(): void {
      const grid = document.querySelector(
        "#filterable-product-grid"
      ) as HTMLElement;
      if (grid) {
        grid.style.opacity = "0.6";
        grid.style.pointerEvents = "none";
      }
    }

    private hideLoadingState(): void {
      const grid = document.querySelector(
        "#filterable-product-grid"
      ) as HTMLElement;
      if (grid) {
        grid.style.opacity = "1";
        grid.style.pointerEvents = "";
      }
    }

    private showErrorState(): void {
      // Could show a toast notification here
      console.log("Pagination failed - refresh page to continue");
    }
  }

  document.addEventListener("astro:page-load", () => {
    new AjaxPagination();
  });
</script>
