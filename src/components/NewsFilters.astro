---
// src/components/NewsFilters.astro - STREAMLINED VERSION
import type { NewsFilterOptions } from "@/lib/wordpress/types";

interface Props {
  filterOptions: NewsFilterOptions;
  totalPosts: number;
  filteredCount: number;
  newsPath?: string;
}

const {
  filterOptions,
  totalPosts,
  filteredCount,
  newsPath = "/news",
} = Astro.props;

// Parse current filters from URL for server-side rendering
const currentParams = new URLSearchParams(Astro.url.search);
const currentCategories = currentParams.getAll("categories") || [];
const currentTags = currentParams.getAll("tags") || [];
const currentDateRange = currentParams.get("dateRange") || "";

// Calculate active filter count for mobile badge (no search/sort)
const activeFilterCount =
  currentCategories.length +
  currentTags.length +
  (currentDateRange ? 1 : 0);

// Configuration for show more/less functionality
const DEFAULT_VISIBLE_CATEGORIES = 6;
const DEFAULT_VISIBLE_TAGS = 8;

const shouldShowCategoryToggle =
  filterOptions.categories.length > DEFAULT_VISIBLE_CATEGORIES;
const shouldShowTagToggle = filterOptions.tags.length > DEFAULT_VISIBLE_TAGS;

// Check if there are selected items beyond visible count
const hasSelectedCategoriesBelow = currentCategories.some((category) => {
  const categoryIndex = filterOptions.categories.findIndex(
    (c) => c.slug === category
  );
  return categoryIndex >= DEFAULT_VISIBLE_CATEGORIES;
});

const hasSelectedTagsBelow = currentTags.some((tag) => {
  const tagIndex = filterOptions.tags.findIndex((t) => t.slug === tag);
  return tagIndex >= DEFAULT_VISIBLE_TAGS;
});

const shouldStartCategoriesExpanded = hasSelectedCategoriesBelow;
const shouldStartTagsExpanded = hasSelectedTagsBelow;
---

<!-- Minimal critical CSS -->
<style is:inline>
  .news-filter-list {
    transition: none;
  }
</style>

<!-- SIDEBAR PATTERN: Single Responsive Form Container -->
<div class="relative lg:block bg-(--surface-primary)">
  <!-- Mobile Filter Button -->
  <button
    id="mobile-news-filter-toggle"
    class="lg:hidden fixed bottom-4 right-4 bg-(--surface-tertiary) text-(--content-body) border border-(--border-tertiary) rounded-md flex flex-row gap-2 p-4 shadow-lg z-40"
    aria-label="Open Filters"
  >
    Filter
    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.707A1 1 0 013 7V4z"
      ></path>
    </svg>
    {
      activeFilterCount > 0 && (
        <span class="absolute -top-1 -right-1 bg-(--ui-button-surface) text-(--ui-button-text) font-bold text-sm rounded-full min-w-5 h-5 flex items-center justify-center px-1">
          {activeFilterCount}
        </span>
      )
    }
  </button>

  <!-- Mobile Overlay -->
  <div
    id="mobile-news-filter-overlay"
    class="lg:hidden fixed inset-0 bg-(--ui-modal-overlay)/80 backdrop-blur-sm z-40 opacity-0 pointer-events-none transition-opacity duration-300"
  >
  </div>

  <!-- Single Form - Desktop Static, Mobile Drawer -->
  <div
    id="news-filter-container"
    class="lg:static lg:transform-none max-h-[85dvh] lg:max-h-none fixed bottom-0 left-0 right-0 md:left-auto md:w-[28rem] lg:w-auto bg-(--surface-secondary) z-50 overflow-y-auto transform translate-y-full lg:translate-y-0 opacity-0 lg:opacity-100 pointer-events-none lg:pointer-events-auto transition-all duration-300 lg:transition-none"
  >
    <form
      method="GET"
      action={newsPath}
      class="px-4 lg:p-2"
      id="news-filter-form"
    >
      <!-- Mobile Header -->
      <div
        class="flex items-center justify-between mb-4 p-6 -mx-4 bg-(--surface-secondary) border border-b-(--border-tertiary) sticky top-0 z-50 lg:hidden"
      >
        <h2 class="text-lg font-semibold text-(--content-heading)">
          Filter Articles
        </h2>
        <button
          type="button"
          id="mobile-news-filter-close"
          class="p-1 text-(--content-meta) hover:text-(--content-emphasis)"
          aria-label="Close Filters"
        >
          <svg
            class="w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

        <div class="min-w-fit mt-2 mb-4">
            <p class="text-sm lg:text-base text-(--content-meta) font-medium">
                {
                filteredCount === totalPosts
                    ? `${totalPosts} articles`
                    : `${filteredCount} of ${totalPosts} articles`
                }
            </p>
        </div>

      <!-- Categories Filter Section -->
      {
        filterOptions.categories.length > 0 && (
          <div class="mb-6 lg:mb-4">
            <div class="flex items-center justify-between mb-3">
              <h3 class="text-xl font-medium font-display text-(--content-heading)">
                Categories
              </h3>
              {currentCategories.length > 0 && (
                <button
                  type="button"
                  data-clear-categories
                  class="text-sm text-(--content-meta) hover:text-(--content-emphasis) transition-colors"
                >
                  Clear ({currentCategories.length})
                </button>
              )}
            </div>

            <div
              class="space-y-3 lg:space-y-1 lg:max-h-none overflow-visible news-filter-list"
              data-category-list
            >
              {filterOptions.categories.map((category, index) => {
                const isHidden = index >= DEFAULT_VISIBLE_CATEGORIES;
                const serverHiddenClass =
                  isHidden && !shouldStartCategoriesExpanded ? "lg:hidden" : "";

                return (
                  <label
                    class={`flex items-center justify-between group cursor-pointer p-3 lg:p-1 rounded-sm hover:bg-(--surface-tertiary) lg:hover:bg-(--surface-secondary) transition-colors ${isHidden ? `category-extra-item ${serverHiddenClass}` : ""}`}
                  >
                    <div class="flex items-center">
                      <input
                        type="checkbox"
                        name="categories"
                        value={category.slug}
                        checked={currentCategories.includes(category.slug)}
                        class="elco-checkbox mr-3 lg:mr-2 w-5 h-5 lg:w-4 lg:h-4 rounded-sm border-2 border-(--ui-input-border) text-ui-accent focus:ring-2 focus:ring-ui-accent focus:ring-offset-0"
                      />
                      <span class="text-(--content-body) group-hover:text-(--content-emphasis)">
                        {category.name}
                      </span>
                    </div>
                    <span class="text-sm text-(--content-meta) lg:mr-2">
                      ({category.count})
                    </span>
                  </label>
                );
              })}

              {shouldShowCategoryToggle && (
                <button
                  type="button"
                  id="show-more-categories-toggle"
                  class="hidden lg:block w-full text-left text-sm text-ui-accent hover:text-ui-accent-hover transition-colors p-1 font-medium"
                  data-collapsed-text={`+ Show ${filterOptions.categories.length - DEFAULT_VISIBLE_CATEGORIES} more`}
                  data-expanded-text="- Show less"
                  data-initial-expanded={shouldStartCategoriesExpanded.toString()}
                >
                  {shouldStartCategoriesExpanded
                    ? "- Show less"
                    : `+ Show ${filterOptions.categories.length - DEFAULT_VISIBLE_CATEGORIES} more`}
                </button>
              )}
            </div>
          </div>
        )
      }

      <!-- ENHANCED TAGS SECTION - DUAL MODE UX -->
      {
        filterOptions.tags.length > 0 && (
          <div class="mb-6 lg:mb-4">
            <div class="flex items-center justify-between mb-3">
              <h3 class="text-xl font-medium font-display text-(--content-heading)">Tags</h3>
              {currentTags.length > 0 && (
                <button
                  type="button"
                  data-clear-tags
                  class="text-sm text-(--content-meta) hover:text-(--content-emphasis) transition-colors"
                >
                  Clear ({currentTags.length})
                </button>
              )}
            </div>

            <!-- All Tags with Enhanced States -->
            <div class="space-y-3">
              <!-- First 8 tags (always visible) -->
              <div class="flex flex-wrap gap-2">
                {filterOptions.tags.slice(0, 8).map(tag => {
                  const isApplied = currentTags.includes(tag.slug);
                  return (
                    <button
                      type="button"
                      class={`inline-flex items-center gap-1.5 px-3 py-1.5 rounded-full text-sm font-medium transition-colors ${
                        isApplied ? 'tag-applied bg-(--ui-button-surface) hover:bg-(--ui-button-surface)/60 text-(--ui-button-text)' : 'tag-unselected bg-(--surface-tertiary) hover:bg-(--ui-button-surface) hover:text-(--ui-button-text)'
                      }`}
                      data-tag-chip={tag.slug}
                      data-applied={isApplied}
                      data-pending="false"
                    >
                      <span data-tag-name>{tag.name}</span>
                      <span data-tag-content>
                        {isApplied ? (
                          <svg class="w-3 h-3 font-bold" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="3">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path>
                          </svg>
                        ) : (
                          <span class="text-xs opacity-75">({tag.count})</span>
                        )}
                      </span>
                    </button>
                  );
                })}
              </div>

              <!-- More tags (expandable) -->
              {filterOptions.tags.length > 8 && (
                <div data-expandable-tags>
                  <button
                    type="button"
                    id="show-more-tags-toggle"
                    class="text-sm text-ui-accent hover:text-ui-accent-hover transition-colors font-medium"
                    data-collapsed-text={`+ Show ${filterOptions.tags.length - 8} more tags`}
                    data-expanded-text="- Show less"
                    data-initial-expanded={shouldStartTagsExpanded.toString()}
                  >
                    {shouldStartTagsExpanded
                      ? "- Show less"
                      : `+ Show ${filterOptions.tags.length - 8} more tags`}
                  </button>
                  
                  <div class={`mt-2 ${shouldStartTagsExpanded ? '' : 'hidden'}`} data-extra-tags>
                    <div class="flex flex-wrap gap-2">
                      {filterOptions.tags.slice(8).map(tag => {
                        const isApplied = currentTags.includes(tag.slug);
                        return (
                          <button
                            type="button"
                            class={`inline-flex items-center gap-1.5 px-3 py-1.5 rounded-full text-sm font-medium transition-colors ${
                              isApplied ? 'tag-applied bg-(--ui-button-surface) hover:bg-(--ui-button-surface)/60 text-(--ui-button-text)' : 'tag-unselected bg-(--surface-tertiary) hover:bg-(--ui-button-surface) hover:text-(--ui-button-text)'
                            }`}
                            data-tag-chip={tag.slug}
                            data-applied={isApplied}
                            data-pending="false"
                          >
                            <span data-tag-name>{tag.name}</span>
                            <span data-tag-content>
                              {isApplied ? (
                                <svg class="w-3 h-3 font-bold" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="3">
                                  <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path>
                                </svg>
                              ) : (
                                <span class="text-xs opacity-75">({tag.count})</span>
                              )}
                            </span>
                          </button>
                        );
                      })}
                    </div>
                  </div>
                </div>
              )}
            </div>

            <!-- Hidden inputs for form submission -->
            <div class="hidden">
              {currentTags.map(tagSlug => (
                <input type="hidden" name="tags" value={tagSlug} data-tag-input={tagSlug} />
              ))}
            </div>
          </div>
        )
      }

      <!-- Date Range Section -->
      <div class="mb-6 lg:mb-4">
        <h3
          class="text-xl font-medium font-display text-(--content-heading) mb-3"
        >
          Published
        </h3>
        <div class="space-y-3 lg:space-y-1">
          {
            [
              { value: "", label: "Any time" },
              { value: "week", label: "Past week" },
              { value: "month", label: "Past month" },
              { value: "year", label: "Past year" },
            ].map(({ value, label }) => (
              <label class="flex items-center group cursor-pointer p-3 lg:p-1 rounded-sm hover:bg-(--surface-tertiary) lg:hover:bg-(--surface-secondary) transition-colors">
                <input
                  type="radio"
                  name="dateRange"
                  value={value}
                  checked={currentDateRange === value}
                  class="elco-radio mr-3 lg:mr-2 w-5 h-5 lg:w-4 lg:h-4 border-2 border-(--ui-input-border) text-ui-accent focus:ring-2 focus:ring-ui-accent focus:ring-offset-0"
                />
                <span class="text-(--content-body) group-hover:text-(--content-emphasis)">
                  {label}
                </span>
              </label>
            ))
          }
        </div>
      </div>

      <!-- Enhanced Mobile Actions -->
      <div
        class="flex gap-3 p-6 -mx-4 bg-(--surface-secondary) border-t-(--border-tertiary) sticky bottom-0 lg:hidden"
      >
        {
          (currentCategories.length > 0 ||
            currentTags.length > 0 ||
            currentDateRange) && (
            <button
              type="button"
              data-clear-all-news-filters
              class="flex-1 py-3 px-4 border border-(--ui-button-border) text-ui-button-border rounded-sm hover:bg-ui-button-hover transition-colors text-center"
            >
              Clear Filters
            </button>
          )
        }
        <button
          type="submit"
          id="mobile-apply-filters"
          class="flex-1 py-3 px-4 bg-(--ui-button-surface) text-(--ui-button-text) rounded-sm hover:bg-ui-button-primary-hover transition-colors font-medium"
          data-default-text="Apply Filters"
        >
          Apply Filters
        </button>
      </div>
    </form>
  </div>
</div>

<!-- Server-side data for JavaScript -->
<script define:vars={{ filterOptions }}>
  window.newsFilterOptions = filterOptions;
</script>

<script>
  class NewsFiltersManager {
    private form!: HTMLFormElement | null;
    private container!: HTMLElement | null;
    private overlay!: HTMLElement | null;
    private categoryToggle!: HTMLButtonElement | null;
    private tagToggle!: HTMLButtonElement | null;

    // Core state
    private isCategoriesExpanded: boolean = false;
    private isTagsExpanded: boolean = false;
    private pendingTags: Set<string> = new Set();
    private isMobile: boolean = false;
    private tagCounts: Map<string, number> = new Map();

    // Simple debouncing
    private submitTimeout: number | null = null;

    constructor() {
      this.form = document.getElementById('news-filter-form') as HTMLFormElement;
      this.container = document.getElementById('news-filter-container');
      this.overlay = document.getElementById('mobile-news-filter-overlay');
      this.categoryToggle = document.getElementById('show-more-categories-toggle') as HTMLButtonElement;
      this.tagToggle = document.getElementById('show-more-tags-toggle') as HTMLButtonElement;
      
      this.checkMobileState();
      this.storeTagCountsFromServerData();
      this.setupEventListeners();
      this.initializeMenuState();
    }

    private checkMobileState(): void {
      this.isMobile = window.innerWidth < 1024;
      window.addEventListener('resize', () => {
        this.isMobile = window.innerWidth < 1024;
        if (!this.isMobile) {
          this.pendingTags.clear();
          this.updateApplyButton();
        }
      });
    }

    // FIXED: Use server-side data instead of DOM parsing
    private storeTagCountsFromServerData(): void {
      const filterOptions = (window as any).newsFilterOptions;
      if (filterOptions?.tags) {
        filterOptions.tags.forEach((tag: any) => {
          this.tagCounts.set(tag.slug, tag.count);
        });
      }
    }

    private getTagCount(tagSlug: string): number {
      return this.tagCounts.get(tagSlug) || 0;
    }

    private setupEventListeners(): void {
      this.setupMobileDrawer();
      this.setupDesktopFiltering();
      this.setupShowMoreToggles();
      this.setupClearButtons();
      this.setupTagChips();
    }

    private setupMobileDrawer(): void {
      const toggle = document.getElementById("mobile-news-filter-toggle");
      const close = document.getElementById("mobile-news-filter-close");

      toggle?.addEventListener("click", () => this.openMobileDrawer());
      close?.addEventListener("click", () => this.closeMobileDrawer());
      this.overlay?.addEventListener("click", () => this.closeMobileDrawer());
    }

    private openMobileDrawer(): void {
      this.overlay?.classList.remove("pointer-events-none", "opacity-0");
      this.container?.classList.remove("translate-y-full", "opacity-0", "pointer-events-none");
      document.body.style.overflow = "hidden";
    }

    private closeMobileDrawer(): void {
      this.overlay?.classList.add("opacity-0");
      this.container?.classList.add("translate-y-full", "opacity-0");
      setTimeout(() => {
        this.overlay?.classList.add("pointer-events-none");
        this.container?.classList.add("pointer-events-none");
      }, 300);
      document.body.style.overflow = "";
    }

    private setupDesktopFiltering(): void {
      if (!this.form) return;

      const inputs = this.form.querySelectorAll("input:not([data-tag-chip]), select");
      inputs.forEach((input) => {
        input.addEventListener("change", () => {
          if (!this.isMobile) {
            this.debouncedSubmit();
          }
        });
      });
    }

    // Simple debounced submission
    private debouncedSubmit(): void {
      if (this.submitTimeout) {
        clearTimeout(this.submitTimeout);
      }
      this.submitTimeout = window.setTimeout(() => {
        this.form?.submit();
      }, 150);
    }

    private setupTagChips(): void {
      const tagChips = document.querySelectorAll('[data-tag-chip]');
      const tagToggle = document.getElementById('show-more-tags-toggle');
      const extraTags = document.querySelector('[data-extra-tags]');
      
      tagChips.forEach(chip => {
        chip.addEventListener('click', (e) => {
          const button = e.currentTarget as HTMLButtonElement;
          const tagSlug = button.dataset.tagChip!;
          
          if (this.isMobile) {
            this.handleMobileTagClick(tagSlug, button);
          } else {
            this.handleDesktopTagClick(tagSlug, button);
          }
        });
      });

      tagToggle?.addEventListener('click', () => {
        if (extraTags) {
          const isHidden = extraTags.classList.contains('hidden');
          const collapsedText = tagToggle.dataset.collapsedText || '+ Show more tags';
          const expandedText = tagToggle.dataset.expandedText || '- Show less';
          
          if (isHidden) {
            extraTags.classList.remove('hidden');
            tagToggle.textContent = expandedText;
            this.isTagsExpanded = true;
          } else {
            extraTags.classList.add('hidden');
            tagToggle.textContent = collapsedText;
            this.isTagsExpanded = false;
          }
        }
      });
    }

    private handleMobileTagClick(tagSlug: string, button: HTMLButtonElement): void {
      const isApplied = button.dataset.applied === 'true';
      const isPending = button.dataset.pending === 'true';
      
      if (isApplied) {
        if (isPending) {
          this.pendingTags.delete(`remove-${tagSlug}`);
          this.updateTagButton(button, 'applied', tagSlug);
        } else {
          this.pendingTags.add(`remove-${tagSlug}`);
          this.updateTagButton(button, 'pending-remove', tagSlug);
        }
      } else {
        if (isPending) {
          this.pendingTags.delete(`add-${tagSlug}`);
          this.updateTagButton(button, 'unselected', tagSlug);
        } else {
          this.pendingTags.add(`add-${tagSlug}`);
          this.updateTagButton(button, 'pending-add', tagSlug);
        }
      }
      
      this.updateApplyButton();
    }

    private handleDesktopTagClick(tagSlug: string, button: HTMLButtonElement): void {
      const isApplied = button.dataset.applied === 'true';
      
      if (isApplied) {
        this.removeTag(tagSlug);
        this.updateTagButton(button, 'unselected', tagSlug);
      } else {
        this.addTag(tagSlug);
        this.updateTagButton(button, 'applied', tagSlug);
      }
      
      if (!this.isMobile) {
        this.debouncedSubmit();
      }
    }

    // FIXED: Enhanced tag button updating with stored count data
    private updateTagButton(button: HTMLButtonElement, state: string, tagSlug: string): void {
      const tagContent = button.querySelector('[data-tag-content]');
      if (!tagContent) return;

      button.className = button.className.replace(/tag-(unselected|pending|applied)/g, '').trim();
      const tagCount = this.getTagCount(tagSlug);
      
      switch (state) {
        case 'unselected':
          button.classList.add('tag-unselected');
          button.dataset.pending = 'false';
          button.dataset.applied = 'false';
          tagContent.innerHTML = `<span class="text-xs opacity-75">(${tagCount})</span>`;
          break;
        case 'pending-add':
          button.classList.add('tag-pending');
          button.dataset.pending = 'true';
          tagContent.innerHTML = `<svg class="w-3 h-3 font-bold" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="3"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path></svg>`;
          break;
        case 'pending-remove':
          button.classList.add('tag-pending');
          button.dataset.pending = 'true';
          tagContent.innerHTML = `<span class="text-xs opacity-75">(${tagCount})</span>`;
          break;
        case 'applied':
          button.classList.add('tag-applied');
          button.dataset.pending = 'false';
          button.dataset.applied = 'true';
          tagContent.innerHTML = `<svg class="w-3 h-3 font-bold" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="3"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path></svg>`;
          break;
      }
    }

    private updateApplyButton(): void {
      const applyButton = document.getElementById('mobile-apply-filters') as HTMLButtonElement;
      if (!applyButton) return;

      const pendingCount = this.pendingTags.size;
      const defaultText = applyButton.dataset.defaultText || 'Apply Filters';
      
      if (pendingCount > 0) {
        applyButton.textContent = `Apply Filters (${pendingCount})`;
        applyButton.classList.add('bg-(--ui-accent)', 'text-white');
        applyButton.classList.remove('bg-(--ui-button-surface)');
      } else {
        applyButton.textContent = defaultText;
        applyButton.classList.remove('bg-(--ui-accent)', 'text-white');
        applyButton.classList.add('bg-(--ui-button-surface)');
      }
    }

    private addTag(tagSlug: string): void {
      const hiddenInput = document.createElement('input');
      hiddenInput.type = 'hidden';
      hiddenInput.name = 'tags';
      hiddenInput.value = tagSlug;
      hiddenInput.setAttribute('data-tag-input', tagSlug);
      
      const hiddenContainer = this.form?.querySelector('.hidden');
      hiddenContainer?.appendChild(hiddenInput);
    }

    private removeTag(tagSlug: string): void {
      const hiddenInput = document.querySelector(`[data-tag-input="${tagSlug}"]`);
      hiddenInput?.remove();
    }

    private applyPendingChanges(): void {
      this.pendingTags.forEach(change => {
        if (change.startsWith('add-')) {
          const tagSlug = change.replace('add-', '');
          this.addTag(tagSlug);
        } else if (change.startsWith('remove-')) {
          const tagSlug = change.replace('remove-', '');
          this.removeTag(tagSlug);
        }
      });
      
      this.pendingTags.clear();
      this.form?.submit();
    }

    private setupShowMoreToggles(): void {
      this.categoryToggle?.addEventListener("click", (e) => {
        e.preventDefault();
        this.isCategoriesExpanded ? this.collapseCategories() : this.expandCategories();
      });
    }

    private initializeMenuState(): void {
      const initialCategoriesExpanded = this.categoryToggle?.dataset.initialExpanded === "true";
      this.isCategoriesExpanded = initialCategoriesExpanded;

      const initialTagsExpanded = this.tagToggle?.dataset.initialExpanded === "true";
      this.isTagsExpanded = initialTagsExpanded;

      const applyButton = document.getElementById('mobile-apply-filters');
      applyButton?.addEventListener('click', (e) => {
        if (this.isMobile && this.pendingTags.size > 0) {
          e.preventDefault();
          this.applyPendingChanges();
        }
      });
    }

    private collapseCategories(): void {
      const extraItems = document.querySelectorAll(".category-extra-item");
      const collapsedText = this.categoryToggle?.dataset.collapsedText || "+ Show more";

      extraItems.forEach((item) => {
        (item as HTMLElement).classList.add("lg:hidden");
      });

      if (this.categoryToggle) this.categoryToggle.textContent = collapsedText;
      this.isCategoriesExpanded = false;
    }

    private expandCategories(): void {
      const extraItems = document.querySelectorAll(".category-extra-item");
      const expandedText = this.categoryToggle?.dataset.expandedText || "- Show less";

      extraItems.forEach((item) => {
        (item as HTMLElement).classList.remove("lg:hidden");
      });

      if (this.categoryToggle) this.categoryToggle.textContent = expandedText;
      this.isCategoriesExpanded = true;
    }

    private setupClearButtons(): void {
      const clearCategories = document.querySelector("[data-clear-categories]");
      const clearTags = document.querySelector("[data-clear-tags]");
      const clearAllMobile = document.querySelector("[data-clear-all-news-filters]");

      clearCategories?.addEventListener("click", () => this.clearCategoryFilters());
      clearTags?.addEventListener("click", () => this.clearTagFilters());
      clearAllMobile?.addEventListener("click", () => this.clearAllFilters());
    }

    // FIXED: Category clear submits form on desktop
    private clearCategoryFilters(): void {
      const checkboxes = this.form?.querySelectorAll('input[name="categories"]:checked');
      checkboxes?.forEach((cb) => ((cb as HTMLInputElement).checked = false));
      
      if (!this.isMobile) {
        this.debouncedSubmit();
      }
    }

    // FIXED: Tag clear using stored count data
    private clearTagFilters(): void {
      const hiddenInputs = this.form?.querySelectorAll('[data-tag-input]');
      hiddenInputs?.forEach(input => input.remove());
      
      this.pendingTags.clear();
      this.updateApplyButton();
      
      const tagButtons = document.querySelectorAll('[data-tag-chip]');
      tagButtons.forEach(button => {
        const buttonElement = button as HTMLButtonElement;
        const tagSlug = buttonElement.dataset.tagChip!;
        this.updateTagButton(buttonElement, 'unselected', tagSlug);
      });
      
      if (!this.isMobile) {
        this.debouncedSubmit();
      }
    }

    private clearAllFilters(): void {
      window.location.href = window.location.pathname;
    }
  }

  // Initialize
  document.addEventListener("astro:page-load", () => {
    new NewsFiltersManager();
  });
</script>