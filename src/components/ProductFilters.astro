---
// src/components/ProductFilters.astro - Server-Side Form Implementation
import type { FilterOptions } from "@/lib/square/types";

interface Props {
  filterOptions: FilterOptions;
  totalProducts: number;
  filteredCount: number;
}

const { filterOptions, totalProducts, filteredCount } = Astro.props;

// Parse current filters from URL for server-side rendering
const currentParams = new URLSearchParams(Astro.url.search);
const currentBrands = currentParams.get("brands")?.split(",").filter(Boolean) || [];
const currentPageSize = currentParams.get("pageSize") || "24";
---

<!-- Server-Side Filter Form -->
<div class="lg:block sticky top-16">
  <!-- Desktop: Server-side form with immediate submission -->
  <form method="GET" action="" class="hidden lg:block bg-surface-secondary rounded-sm p-4 overflow-y-auto">
    <!-- Preserve existing URL parameters -->
    <input type="hidden" name="pageSize" value={currentPageSize} />
    
    <div class="flex items-center justify-between mb-2">
      <h2 class="text-sm font-semibold text-content-heading">Filters</h2>
      {currentBrands.length > 0 && (
        <button
          type="submit"
          name="brands"
          value=""
          class="text-sm text-content-meta hover:text-content-emphasis transition-colors"
        >
          Clear Filters
        </button>
      )}
    </div>

    <!-- Results Count -->
    <div class="mb-2 p-2 bg-surface-tertiary rounded-sm">
      <p class="text-sm text-content-meta">
        Showing <span>{filteredCount}</span> of <span>{totalProducts}</span> products
      </p>
    </div>

    <!-- Brand Filter Section -->
    {filterOptions.brands.length > 0 && (
      <div class="mb-4">
        <h3 class="text-sm font-medium text-content-heading mb-2">Brand</h3>
        <div class="max-h-80 overflow-y-auto">
          {filterOptions.brands.map((brand) => (
            <label class="flex items-center group cursor-pointer p-2 rounded-sm hover:bg-surface-tertiary transition-colors">
              <input
                type="checkbox"
                name="brands"
                value={brand.name}
                checked={currentBrands.includes(brand.name)}
                class="elco-checkbox mr-3 rounded-none border-ui-input-border text-ui-accent focus:ring-ui-accent"
                onchange="this.form.submit()"
              />
              <span class="flex-1 text-content-body group-hover:text-content-emphasis">
                {brand.name}
              </span>
              <span class="text-sm text-content-meta">({brand.count})</span>
            </label>
          ))}
        </div>
      </div>
    )}
  </form>
</div>

<!-- Mobile Filter Button -->
<button
  id="mobile-filter-toggle"
  class="lg:hidden fixed bottom-4 right-4 bg-ui-nav-surface text-ui-button-primary-text rounded-md flex flex-row gap-2 p-4 shadow-lg z-[250] transition-transform"
  aria-label="Open Filters"
>
  Filters
  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.707A1 1 0 013 7V4z"
    ></path>
  </svg>
  {currentBrands.length > 0 && (
    <span
      class="absolute -top-1 -right-1 bg-ui-button-surface text-ui-button-text font-bold text-sm rounded-full min-w-[1.25rem] h-5 flex items-center justify-center px-1"
    >
      {currentBrands.length}
    </span>
  )}
</button>

<!-- Mobile Drawer Overlay -->
<div
  id="mobile-filter-overlay"
  class="lg:hidden fixed inset-0 bg-surface-tertiary/80 dark:bg-surface-primary/80 backdrop-blur-sm z-40 transition-opacity duration-300 opacity-0 pointer-events-none"
>
</div>

<!-- Mobile Filter Drawer -->
<div
  id="mobile-filter-drawer"
  class="lg:hidden fixed bottom-0 left-0 right-0 bg-surface-secondary border-t border-ui-border z-[500] max-h-[80vh] overflow-y-auto transform translate-y-full transition-transform duration-300"
>
  <form method="GET" action="" class="p-4">
    <!-- Preserve existing URL parameters -->
    <input type="hidden" name="pageSize" value={currentPageSize} />
    
    <!-- Mobile Header -->
    <div class="flex items-center justify-between mb-4 pb-4 border-b border-ui-border">
      <h2 class="text-lg font-semibold text-content-heading">Filter Products</h2>
      <button
        type="button"
        id="mobile-filter-close"
        class="p-1 text-content-meta hover:text-content-emphasis"
        aria-label="Close Filters"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"
          ></path>
        </svg>
      </button>
    </div>

    <!-- Results Count -->
    <div class="mb-4 p-3 bg-surface-tertiary rounded-sm">
      <p class="text-sm text-content-meta">
        {filteredCount} of {totalProducts} products
      </p>
    </div>

    <!-- Mobile Brand Filter Section -->
    <div class="mb-6">
      <h3 class="text-base font-medium text-content-heading mb-3">Brand</h3>
      <div class="space-y-3 max-h-64 overflow-y-auto">
        {filterOptions.brands.map((brand) => (
          <label class="flex items-center justify-between group cursor-pointer p-3 rounded-sm hover:bg-surface-tertiary transition-colors">
            <div class="flex items-center">
              <input
                type="checkbox"
                name="brands"
                value={brand.name}
                checked={currentBrands.includes(brand.name)}
                class="mr-3 rounded-sm border-ui-input-border text-ui-accent focus:ring-ui-accent w-5 h-5"
              />
              <span class="text-content-body group-hover:text-content-emphasis">
                {brand.name}
              </span>
            </div>
            <span class="text-sm text-content-meta">({brand.count})</span>
          </label>
        ))}
      </div>
    </div>

    <!-- Mobile Actions -->
    <div class="flex gap-3 pt-4 border-t border-ui-border">
      {currentBrands.length > 0 && (
        <button
          type="submit"
          name="brands"
          value=""
          class="flex-1 py-3 px-4 border border-ui-button-border text-ui-button-border rounded-sm hover:bg-ui-button-hover transition-colors"
        >
          Clear Filters
        </button>
      )}
      <button
        type="submit"
        class="flex-1 py-3 px-4 bg-ui-button-surface text-ui-button-text rounded-sm hover:bg-ui-button-primary-hover transition-colors font-medium"
      >
        Apply Filters
      </button>
    </div>
  </form>
</div>

<script>
  // Simplified mobile drawer controls only - no filter state management
  class MobileFilterDrawer {
    private mobileToggle?: HTMLElement;
    private mobileDrawer?: HTMLElement;
    private mobileOverlay?: HTMLElement;
    private mobileClose?: HTMLElement;

    constructor() {
      this.mobileToggle = document.getElementById("mobile-filter-toggle");
      this.mobileDrawer = document.getElementById("mobile-filter-drawer");
      this.mobileOverlay = document.getElementById("mobile-filter-overlay");
      this.mobileClose = document.getElementById("mobile-filter-close");

      if (!this.mobileToggle) return;

      this.setupEventListeners();
    }

    private setupEventListeners(): void {
      this.mobileToggle?.addEventListener("click", this.openDrawer.bind(this));
      this.mobileOverlay?.addEventListener("click", this.closeDrawer.bind(this));
      this.mobileClose?.addEventListener("click", this.closeDrawer.bind(this));
    }

    private openDrawer(): void {
      this.mobileOverlay?.classList.remove("pointer-events-none", "opacity-0");
      this.mobileDrawer?.classList.remove("translate-y-full");
      document.body.style.overflow = "hidden";
    }

    private closeDrawer(): void {
      this.mobileOverlay?.classList.add("opacity-0");
      this.mobileDrawer?.classList.add("translate-y-full");

      setTimeout(() => {
        this.mobileOverlay?.classList.add("pointer-events-none");
      }, 300);

      document.body.style.overflow = "";
    }
  }

  // Initialize on page load
  document.addEventListener("astro:page-load", () => {
    new MobileFilterDrawer();
  });
</script>
