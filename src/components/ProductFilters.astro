---
// src/components/ProductFilters.astro - Fixed desktop show/hide persistence
import type { FilterOptions } from "@/lib/square/types";

interface Props {
  filterOptions: FilterOptions;
  totalProducts: number;
  filteredCount: number;
}

const { filterOptions, totalProducts, filteredCount } = Astro.props;

// Parse current filters from URL for server-side rendering
const currentParams = new URLSearchParams(Astro.url.search);
const currentBrands = currentParams.getAll("brands") || [];
const currentPageSize = currentParams.get("pageSize") || "24";

// Configuration for show more/less functionality
const DEFAULT_VISIBLE_BRANDS = 6;
const shouldShowToggle = filterOptions.brands.length > DEFAULT_VISIBLE_BRANDS;
---

<!-- Desktop Filter Sidebar -->
<div class="lg:block sticky top-16">
  <form method="GET" action="" class="hidden lg:block p-2 overflow-y-auto">
    <input type="hidden" name="pageSize" value={currentPageSize} />

    <div class="flex items-center justify-between mb-2">
      <h2 class="text-sm font-semibold text-content-heading">Filters</h2>
      {
        currentBrands.length > 0 && (
          <a
            href={`${Astro.url.pathname}?pageSize=${currentPageSize}`}
            class="text-sm text-content-meta hover:text-content-emphasis transition-colors"
          >
            Clear Filters
          </a>
        )
      }
    </div>

    <!-- Results Count -->
    <div class="mb-2 p-2 bg-surface-secondary rounded-sm">
      <p class="text-sm text-content-meta">
        Showing <span>{filteredCount}</span> of <span>{totalProducts}</span> products
      </p>
    </div>

    <!-- Brand Filter Section -->
    {
      filterOptions.brands.length > 0 && (
        <div class="mb-4">
          <h3 class="text-sm font-medium text-content-heading mb-2">Brand</h3>
          <div class="space-y-1">
            {filterOptions.brands.map((brand, index) => {
              const isHidden = index >= DEFAULT_VISIBLE_BRANDS;
              return (
                <label
                  class={`flex items-center group cursor-pointer p-1 rounded-sm hover:bg-surface-secondary transition-colors ${isHidden ? "brand-extra-item" : ""}`}
                >
                  <input
                    type="checkbox"
                    name="brands"
                    value={brand.name}
                    checked={currentBrands.includes(brand.name)}
                    class="elco-checkbox mr-2 w-4 h-4 rounded-sm border-2 border-ui-input-border text-ui-accent focus:ring-2 focus:ring-ui-accent focus:ring-offset-0"
                  />
                  <span class="flex-1 text-content-body group-hover:text-content-emphasis">
                    {brand.name}
                  </span>
                  <span class="text-sm text-content-meta mr-2">
                    ({brand.count})
                  </span>
                </label>
              );
            })}

            {shouldShowToggle && (
              <button
                type="button"
                id="show-more-toggle"
                class="w-full text-left text-sm text-ui-accent hover:text-ui-accent-hover transition-colors p-1 font-medium"
              >
                + Show {filterOptions.brands.length - DEFAULT_VISIBLE_BRANDS}{" "}
                more
              </button>
            )}
          </div>
        </div>
      )
    }
  </form>
</div>

<!-- Mobile Filter Button -->
<button
  id="mobile-filter-toggle"
  class="lg:hidden fixed bottom-4 right-4 bg-ui-nav-surface text-ui-button-primary-text rounded-md flex flex-row gap-2 p-4 shadow-lg z-[250] transition-transform"
  aria-label="Open Filters"
>
  Filters
  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.707A1 1 0 013 7V4z"
    ></path>
  </svg>
  {
    currentBrands.length > 0 && (
      <span class="absolute -top-1 -right-1 bg-ui-button-surface text-ui-button-text font-bold text-sm rounded-full min-w-[1.25rem] h-5 flex items-center justify-center px-1">
        {currentBrands.length}
      </span>
    )
  }
</button>

<!-- Mobile Drawer Overlay -->
<div
  id="mobile-filter-overlay"
  class="lg:hidden fixed inset-0 bg-surface-tertiary/80 dark:bg-surface-primary/80 backdrop-blur-sm z-40 transition-opacity duration-300 opacity-0 pointer-events-none"
>
</div>

<!-- Mobile Filter Drawer -->
<div
  id="mobile-filter-drawer"
  class="lg:hidden fixed bottom-0 left-0 right-0 bg-surface-secondary border-t border-ui-border z-[500] max-h-[80vh] overflow-y-auto transform translate-y-full transition-transform duration-300"
>
  <form method="GET" action="" class="p-4">
    <input type="hidden" name="pageSize" value={currentPageSize} />

    <!-- Mobile Header -->
    <div
      class="flex items-center justify-between mb-4 pb-4 border-b border-ui-border"
    >
      <h2 class="text-lg font-semibold text-content-heading">
        Filter Products
      </h2>
      <button
        type="button"
        id="mobile-filter-close"
        class="p-1 text-content-meta hover:text-content-emphasis"
        aria-label="Close Filters"
      >
        <svg
          class="w-6 h-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <!-- Results Count -->
    <div class="mb-4 p-3 bg-surface-tertiary rounded-sm">
      <p class="text-sm text-content-meta">
        {filteredCount} of {totalProducts} products
      </p>
    </div>

    <!-- Mobile Brand Filter Section -->
    <div class="mb-6">
      <h3 class="text-base font-medium text-content-heading mb-3">Brand</h3>
      <div class="space-y-3">
        {
          filterOptions.brands.map((brand) => (
            <label class="flex items-center justify-between group cursor-pointer p-3 rounded-sm hover:bg-surface-tertiary transition-colors">
              <div class="flex items-center">
                <input
                  type="checkbox"
                  name="brands"
                  value={brand.name}
                  checked={currentBrands.includes(brand.name)}
                  class="elco-checkbox mr-3 w-5 h-5 rounded-sm border-2 border-ui-input-border text-ui-accent focus:ring-2 focus:ring-ui-accent focus:ring-offset-0"
                />
                <span class="text-content-body group-hover:text-content-emphasis">
                  {brand.name}
                </span>
              </div>
              <span class="text-sm text-content-meta">({brand.count})</span>
            </label>
          ))
        }
      </div>
    </div>

    <!-- Mobile Actions -->
    <div class="flex gap-3 pt-4 border-t border-ui-border">
      {
        currentBrands.length > 0 && (
          <a
            href={`${Astro.url.pathname}?pageSize=${currentPageSize}`}
            class="flex-1 py-3 px-4 border border-ui-button-border text-ui-button-border rounded-sm hover:bg-ui-button-hover transition-colors text-center"
          >
            Clear Filters
          </a>
        )
      }
      <button
        type="submit"
        class="flex-1 py-3 px-4 bg-ui-button-surface text-ui-button-text rounded-sm hover:bg-ui-button-primary-hover transition-colors font-medium"
      >
        Apply Filters
      </button>
    </div>
  </form>
</div>

<script>
  class DesktopFilters {
    constructor() {
      this.setupDesktopFiltering();
      this.setupShowMoreToggle();
      this.setupMobileDrawer();
      this.restoreShowMoreState();
    }

    private setupDesktopFiltering(): void {
      // Desktop: immediate submission on checkbox change
      const form = document.querySelector(
        ".lg\\:block form"
      ) as HTMLFormElement;
      if (!form) return;

      const checkboxes = form.querySelectorAll('input[type="checkbox"]');
      checkboxes.forEach((checkbox) => {
        checkbox.addEventListener("change", () => {
          // Store show more state before submission
          const isExpanded =
            localStorage.getItem("brand-filters-expanded") === "true";

          const grid = document.getElementById("filterable-product-grid");
          if (grid) {
            grid.style.transition = "opacity 0.3s ease";
            grid.style.opacity = "0.5";
          }

          sessionStorage.setItem("filtering-in-progress", "true");

          setTimeout(() => {
            form.submit();
          }, 150);
        });
      });
    }

    private setupShowMoreToggle(): void {
      const toggle = document.getElementById("show-more-toggle");
      if (!toggle) return;

      const extraItems = document.querySelectorAll(".brand-extra-item");
      const totalHidden = extraItems.length;

      toggle.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();

        const isCurrentlyExpanded =
          localStorage.getItem("brand-filters-expanded") === "true";

        if (isCurrentlyExpanded) {
          // Collapse
          extraItems.forEach(
            (item) => ((item as HTMLElement).style.display = "none")
          );
          toggle.textContent = `+ Show ${totalHidden} more`;
          localStorage.setItem("brand-filters-expanded", "false");
        } else {
          // Expand
          extraItems.forEach(
            (item) => ((item as HTMLElement).style.display = "flex")
          );
          toggle.textContent = "- Show less";
          localStorage.setItem("brand-filters-expanded", "true");
        }
      });
    }

    private restoreShowMoreState(): void {
      const isExpanded = localStorage.getItem("brand-filters-expanded");
      const toggle = document.getElementById("show-more-toggle");
      const extraItems = document.querySelectorAll(".brand-extra-item");

      if (isExpanded === "false" && toggle) {
        // Hide extra items if previously collapsed
        extraItems.forEach(
          (item) => ((item as HTMLElement).style.display = "none")
        );
        toggle.textContent = `+ Show ${extraItems.length} more`;
      } else {
        // Default: show all (expanded state)
        extraItems.forEach(
          (item) => ((item as HTMLElement).style.display = "flex")
        );
        if (toggle) toggle.textContent = "- Show less";
        if (isExpanded === null)
          localStorage.setItem("brand-filters-expanded", "true");
      }
    }

    private setupMobileDrawer(): void {
      const toggle = document.getElementById("mobile-filter-toggle");
      const drawer = document.getElementById("mobile-filter-drawer");
      const overlay = document.getElementById("mobile-filter-overlay");
      const close = document.getElementById("mobile-filter-close");

      toggle?.addEventListener("click", () => {
        overlay?.classList.remove("pointer-events-none", "opacity-0");
        drawer?.classList.remove("translate-y-full");
        document.body.style.overflow = "hidden";
      });

      const closeDrawer = () => {
        overlay?.classList.add("opacity-0");
        drawer?.classList.add("translate-y-full");
        setTimeout(() => overlay?.classList.add("pointer-events-none"), 300);
        document.body.style.overflow = "";
      };

      overlay?.addEventListener("click", closeDrawer);
      close?.addEventListener("click", closeDrawer);
    }
  }

  document.addEventListener("astro:page-load", () => {
    new DesktopFilters();
  });
</script>

<style>
  .elco-checkbox {
    accent-color: var(--ui-accent);
  }

  .elco-checkbox:focus {
    outline: 2px solid var(--ui-accent);
    outline-offset: 2px;
  }

  .brand-extra-item {
    transition: all 0.2s ease;
  }

  @media (prefers-reduced-motion: reduce) {
    .brand-extra-item {
      transition: none !important;
    }
  }
</style>
