---
interface Props {
  locationId: string;
  appId: string;
}

const { locationId, appId } = Astro.props;
---

<div class="bg-white rounded-lg shadow-md p-6 mb-6">
  <h2 class="text-xl font-semibold mb-4">Contact Information</h2>
  <form id="checkout-form" class="space-y-4">
    <div>
      <label for="name" class="block text-sm font-medium text-gray-700"
        >Name</label
      >
      <input
        type="text"
        id="name"
        name="name"
        required
        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
      />
    </div>
    <div>
      <label for="email" class="block text-sm font-medium text-gray-700"
        >Email</label
      >
      <input
        type="email"
        id="email"
        name="email"
        required
        class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
      />
    </div>
  </form>
</div>

<div class="bg-white rounded-lg shadow-md p-6">
  <h2 class="text-xl font-semibold mb-4">Payment Details</h2>
  <div id="card-container" class="mb-4"></div>
  <div id="payment-status" class="mb-4 hidden">
    <div class="animate-pulse flex space-x-4">
      <div class="flex-1 space-y-4 py-1">
        <div class="h-4 bg-gray-200 rounded w-3/4"></div>
      </div>
    </div>
  </div>
  <button
    id="card-button"
    class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50"
    disabled
  >
    Pay Now
  </button>
</div>

<script>
  import type { CartItem } from "../lib/types";

  export function initializePaymentForm(
    payments: SquarePayments,
    cart: CartItem[],
    locationId: string
  ) {
    return new Promise<{ card: SquareCard; cardButton: HTMLButtonElement }>(
      async (resolve, reject) => {
        try {
          const card = await payments.card();
          await card.attach("#card-container");

          const cardButton = document.getElementById(
            "card-button"
          ) as HTMLButtonElement;
          if (cardButton) {
            cardButton.disabled = false;
            resolve({ card, cardButton });
          } else {
            reject(new Error("Payment button not found"));
          }
        } catch (error) {
          reject(error);
        }
      }
    );
  }

  export function showPaymentStatus(
    message: string,
    type: "info" | "error" = "info"
  ) {
    const statusEl = document.getElementById("payment-status");
    if (statusEl) {
      statusEl.innerHTML = `<div class="${
        type === "error" ? "text-red-600" : "text-gray-600"
      }">${message}</div>`;
      statusEl.classList.remove("hidden");
    }
  }
</script>

<style>
  #card-container {
    min-height: 90px;
  }
</style>
