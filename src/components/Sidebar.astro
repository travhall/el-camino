---
// src/components/Sidebar.astro - Updated with Unified Loading System
import { getCategoriesForSidebar } from "@/lib/square/categoryUtils";
import { squareClient } from "@/lib/square/client";
import { EL_CAMINO_LOGO_DATA_URI } from "@/lib/constants/assets";

interface Props {
  class?: string;
}

const { class: additionalClasses = "" } = Astro.props;

// Get filtered categories (only those with products) using Square's ordering
const categoriesWithImages = await getCategoriesForSidebar();

// Square image URLs by category ID
const categoryImageUrls: Record<string, string> = {};

// Enhanced function to get optimized image URL for a category
function getCategoryImageUrl(category: { id: string; slug: string }): string {
  // Try to get image from Square if available
  if (category.id && categoryImageUrls[category.id]) {
    const squareImageUrl = categoryImageUrls[category.id];
    
    // Optimize Square CDN image (same as ProductCard)
    if (squareImageUrl.includes('squarecdn.com')) {
      try {
        const url = new URL(squareImageUrl);
        url.searchParams.set('w', '600');
        url.searchParams.set('h', '338'); // 16:9 aspect ratio
        url.searchParams.set('q', '85');
        url.searchParams.set('f', 'auto');
        return url.toString();
      } catch {
        return squareImageUrl;
      }
    }
    return squareImageUrl;
  }

  // Otherwise fall back to local path
  return `/images/category-${category.slug}.png`;
}

// Process categories to get images (for existing categories only)
for (const item of categoriesWithImages) {
  try {
    // Only try to fetch if we have a category ID
    if (item.id) {
      // Retrieve the category object with related objects
      const { result } = await squareClient.catalogApi.retrieveCatalogObject(
        item.id,
        true
      );

      // Find image objects in related objects
      if (result.relatedObjects && result.relatedObjects.length > 0) {
        // Look for IMAGE type objects
        const imageObjects = result.relatedObjects.filter(
          (obj) => obj.type === "IMAGE"
        );

        // If we found any images, use the first one
        if (imageObjects.length > 0 && imageObjects[0].imageData?.url) {
          categoryImageUrls[item.id] = imageObjects[0].imageData.url;
        }
      }
    }
  } catch (error) {
    console.error(
      `Error fetching images for category ${item.id}:`,
      error
    );
  }
}

// Create slug from category name for fallback images
function createSlug(name: string): string {
  return name
    .toLowerCase()
    .replace(/[^\w\s-]/g, "")
    .replace(/[\s_-]+/g, "-")
    .replace(/^-+|-+$/g, "");
}

// Update image URLs in categories using enhanced Square images or local fallbacks
const prodCats = categoriesWithImages.map(item => ({
  ...item,
  src: getCategoryImageUrl({ id: item.id, slug: createSlug(item.category) })
}));
---

<aside
  class:list={[
    "sidebar col-span-full md:col-span-2 md:col-start-1 md:row-start-5 2xl:row-start-4 md:row-end-15 2xl:row-end-11 bg-(--surface-secondary)",
    additionalClasses,
  ]}
>
  <h3 class="font-display text-3xl font-bold p-4 text-(--content-heading)">
    Shop by Category
  </h3>
  <div class="grid">
    {prodCats.map((e, index) => {
      const imageId = `category-img-${e.id || e.category}`;
      const placeholderId = `category-placeholder-${e.id || e.category}`;
      const staggerDelay = index * 0.1;

      return (
        <a
          href={e.url}
          class="category-link block relative border-t-4 border-t-(--ui-button-surface) border-b-4 border-b-(--surface-primary) overflow-hidden loading-container"
          style={`--loading-stagger-delay: ${staggerDelay}s`}
        >
          <!-- Unified Loading Placeholder -->
          <div
            class="loading-skeleton loading-image absolute inset-0"
            id={placeholderId}
            aria-hidden="true"
          >
            <!-- Category icon overlay -->
            <div class="absolute inset-0 flex items-center justify-center opacity-20">
              <svg class="w-8 h-8 text-(--content-meta)" fill="currentColor" viewBox="0 0 20 20">
                <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
              </svg>
            </div>
          </div>

          <img
            id={imageId}
            src={e.src}
            alt={e.category}
            class="category-img loading-to-content object-cover w-full h-auto aspect-video will-change-transform"
            loading={index < 2 ? "eager" : "lazy"}
            decoding={index < 2 ? "sync" : "async"}
            fetchpriority={index < 2 ? "high" : "auto"}
            data-placeholder-id={placeholderId}
            onload={`this.classList.add('loaded'); document.getElementById('${placeholderId}')?.remove()`}
            onerror={`this.src='${EL_CAMINO_LOGO_DATA_URI}'; this.classList.add('loaded'); document.getElementById('${placeholderId}')?.remove()`}
          />

          <h4 class="category-title font-display text-2xl lg:text-3xl absolute bottom-0 p-4 lg:px-8 border-4 border-l-0 border-(--border-secondary) border-b-0 bg-(--surface-secondary) text-(--content-heading) transition-all">
            {e.category}
          </h4>
        </a>
      );
    })}
  </div>
</aside>

<style>
  /* Component-specific styles only */
  .category-link:hover .category-img.loaded {
    opacity: 1;
    scale: 1.05;
  }
  
  .category-link:hover .category-title {
    font-weight: bold;
  }

  /* Category image states */
  .category-img.loaded {
    opacity: 0.2; /* Default opacity for category images */
  }

  .category-img.error {
    opacity: 0.2;
    filter: grayscale(100%);
  }
</style>

<script>
  // Enhanced image loading for category images using unified system
  document.addEventListener("astro:page-load", () => {
    const categoryImages = document.querySelectorAll<HTMLImageElement>(".category-img");

    categoryImages.forEach((img) => {
      // If image is already loaded (cached), trigger onload
      if (img.complete && img.naturalHeight !== 0) {
        img.classList.add('loaded');
        const placeholderId = img.dataset.placeholderId;
        if (placeholderId) {
          document.getElementById(placeholderId)?.remove();
        }
      }
    });
  });
</script>