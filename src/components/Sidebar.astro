---
// src/components/Sidebar.astro
import { fetchCategoryHierarchy } from "@/lib/square/categories";
import { squareClient } from "@/lib/square/client";
import { Image } from "astro:assets";

interface Props {
  class?: string;
}

const { class: additionalClasses = "" } = Astro.props;

// Fetch categories from Square
const categoryHierarchy = await fetchCategoryHierarchy();

// Square image URLs by category ID
const categoryImageUrls: Record<string, string> = {};

// Process categories to get images
for (const item of categoryHierarchy) {
  try {
    // Only try to fetch if we have a category ID
    if (item.category.id) {
      // Retrieve the category object with related objects
      const { result } = await squareClient.catalogApi.retrieveCatalogObject(
        item.category.id,
        true
      );

      // Find image objects in related objects
      if (result.relatedObjects && result.relatedObjects.length > 0) {
        // Look for IMAGE type objects
        const imageObjects = result.relatedObjects.filter(
          (obj) => obj.type === "IMAGE"
        );

        // If we found any images, use the first one
        if (imageObjects.length > 0 && imageObjects[0].imageData?.url) {
          categoryImageUrls[item.category.id] = imageObjects[0].imageData.url;
        }
      }
    }
  } catch (error) {
    console.error(
      `Error fetching images for category ${item.category.id}:`,
      error
    );
  }
}

// Function to get image URL for a category, falling back to local image
function getCategoryImageUrl(category: { id: string; slug: string }): string {
  // If we found an image URL in Square, use it
  if (category.id && categoryImageUrls[category.id]) {
    return categoryImageUrls[category.id];
  }

  // Otherwise fall back to local path
  return `/images/category-${category.slug}.png`;
}

// Map categories with their images
const categoriesWithImages = categoryHierarchy.map((item) => ({
  category: item.category.name,
  url: `/category/${item.category.slug}`,
  src: getCategoryImageUrl(item.category),
}));

// Sort function remains the same
function getSortedCategories() {
  const orderMap: Record<string, number> = {
    Skateboards: 0,
    Apparel: 1,
    Footwear: 2,
    "Gift Cards & More": 3,
  };

  return [...categoriesWithImages].sort((a, b) => {
    const indexA = a.category in orderMap ? orderMap[a.category] : 999;
    const indexB = b.category in orderMap ? orderMap[b.category] : 999;
    return indexA - indexB;
  });
}

// Get sorted categories
const prodCats = getSortedCategories();
---

<aside
  class:list={[
    "sidebar col-span-full md:col-span-2 md:col-start-1 md:row-start-5 2xl:row-start-4 md:row-end-[15] 2xl:row-end-11 p-1 pb-0",
    additionalClasses,
  ]}
>
  <h3 class="font-display text-3xl py-8 px-2 text-content-heading">
    Shop by Category
  </h3>
  <div class="flex flex-col sm:flex-row md:flex-col gap-1">
    {
      prodCats.map((e, index) => (
        <a
          href={e.url}
          class="category-link block relative border-t-4 border-ui-button-surface overflow-hidden"
        >
          <Image
            src={e.src}
            alt={e.category}
            width={600}
            height={338}
            format="avif"
            quality={85}
            class="category-img object-cover w-full h-auto aspect-video opacity-20 transition-all"
            loading={index < 2 ? "eager" : "lazy"}
            decoding={index < 2 ? "sync" : "async"}
          />
          <h4 class="category-title font-display text-2xl lg:text-3xl absolute bottom-0 p-4 lg:px-8 border-4 border-l-0 border-border-secondary border-b-0 bg-surface-secondary text-content-heading transition-all">
            {e.category}
          </h4>
        </a>
      ))
    }
  </div>
</aside>

<style>
  .category-link:hover img {
    opacity: 1;
    scale: 1.05;
  }
  .category-link:hover h4 {
    font-weight: bold;
  }
</style>

<script>
  // Client-side fallback for failed images
  document.addEventListener("astro:page-load", () => {
    const images = document.querySelectorAll<HTMLImageElement>(
      "img[src*='square'], img[src*='category-']"
    );

    images.forEach((img) => {
      img.addEventListener("error", () => {
        img.src = "/images/placeholder.png";
        img.alt = "Category image not available";
      });
    });
  });
</script>
