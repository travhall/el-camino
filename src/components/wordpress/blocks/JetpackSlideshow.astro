---
// src/components/wordpress/blocks/JetpackSlideshow.astro
// OPTIMIZED: Custom slideshow component with image loading optimization

import { optimizeForContext } from "@/lib/utils/image-optimization";
import { EL_CAMINO_LOGO_DATA_URI, EL_CAMINO_LOADER_DATA_URI } from "@/lib/constants/assets";

interface Props {
  images: Array<{
    src: string;
    alt: string;
    caption?: string;
  }>;
  autoplay?: boolean;
  delay?: number;
  showDots?: boolean;
  showArrows?: boolean;
  aspectRatio?: "auto" | "16:9" | "4:3" | "1:1";
  height?: string; // NEW: Configurable height prop
}

const {
  images = [],
  autoplay = false,
  delay = 3000,
  showDots = true,
  showArrows = true,
  aspectRatio = "auto",
  height = "480px", // NEW: Default height
} = Astro.props;

// Generate unique ID for this slideshow instance
const slideshowId = `slideshow-${Math.random().toString(36).substr(2, 9)}`;

// SOLUTION: Separate aspect ratio from height constraints
const useAspectRatio = aspectRatio !== "auto";
const aspectRatioClasses = {
  auto: "",
  "16:9": "aspect-video",
  "4:3": "aspect-[4/3]",
  "1:1": "aspect-square",
};

// Simple approach: Either use aspect-ratio OR fixed height, never both
const containerClasses = useAspectRatio
  ? `slideshow-container relative ${aspectRatioClasses[aspectRatio]}`
  : `slideshow-container relative`;

const containerStyle = useAspectRatio
  ? "" // Let aspect-ratio handle sizing
  : `min-height: ${height}`; // Use fixed height for "auto"
---

<div
  class="jetpack-slideshow relative overflow-hidden bg-(--surface-secondary)"
  data-slideshow-id={slideshowId}
  data-autoplay={autoplay}
  data-delay={delay}
>
  <!-- FIXED: Slides Container with separated concerns -->
  <div
    class={containerClasses}
    style={containerStyle}
    role="region"
    aria-label="Image slideshow"
  >
    {
      images.map((image, index) => {
        const optimizedSrc = optimizeForContext(image.src, 'gallery');
        const imageId = `slide-${slideshowId}-${index}`;
        const placeholderId = `${imageId}-placeholder`;
        
        return (
          <div
            class={`slide absolute inset-0 transition-opacity duration-500 ${index === 0 ? "opacity-100" : "opacity-0"}`}
            data-slide={index}
            role="group"
            aria-roledescription="slide"
            aria-label={`Slide ${index + 1} of ${images.length}`}
          >
            <!-- Slide Image with Loading State -->
            <div class="relative w-full h-full">
              <!-- Loading placeholder -->
              <div 
                class="loading-skeleton absolute inset-0 bg-gradient-to-r from-gray-200 via-gray-100 to-gray-200 animate-pulse"
                id={placeholderId}
                style="animation: shimmer 1.5s ease-in-out infinite;"
              >
                <!-- El Camino logo as loading indicator -->
                <div 
                  class="absolute inset-0 flex items-center justify-center opacity-70"
                  style={`background-image: url('${EL_CAMINO_LOADER_DATA_URI}'); background-size: 48px 42px; background-position: center; background-repeat: no-repeat;`}
                ></div>
              </div>

              <!-- Optimized image -->
              <img
                id={imageId}
                src={optimizedSrc}
                alt={image.alt}
                class="w-full h-full object-cover opacity-0 transition-opacity duration-300"
                loading={index === 0 ? "eager" : "lazy"}
                fetchpriority={index === 0 ? "high" : "auto"}
                onload={`this.style.opacity='1'; document.getElementById('${placeholderId}')?.remove();`}
                onerror={`this.src='${EL_CAMINO_LOGO_DATA_URI}'; this.style.opacity='1'; document.getElementById('${placeholderId}')?.remove();`}
              />
            </div>

            {image.caption && (
              <div class="absolute bottom-0 left-0 right-0 bg-black/60 text-white p-4">
                <p class="text-sm leading-relaxed" set:html={image.caption} />
              </div>
            )}
          </div>
        );
      })
    }

    <!-- Loading State -->
    <div
      class="slide-loading absolute inset-0 bg-(--surface-secondary) flex items-center justify-center"
    >
      <div
        class="animate-spin rounded-full h-8 w-8 border-b-2 border-(--content-body)"
      >
      </div>
    </div>
  </div>

  <!-- Navigation Arrows -->
  {
    showArrows && images.length > 1 && (
      <>
        <button
          class="slide-prev absolute left-4 top-1/2 -translate-y-1/2 bg-black/60 hover:bg-black/80 text-white rounded-full p-3 transition-all duration-200 z-10 group"
          aria-label="Previous slide"
        >
          <svg
            class="w-5 h-5 group-hover:scale-110 transition-transform"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M15 19l-7-7 7-7"
            />
          </svg>
        </button>

        <button
          class="slide-next absolute right-4 top-1/2 -translate-y-1/2 bg-black/60 hover:bg-black/80 text-white rounded-full p-3 transition-all duration-200 z-10 group"
          aria-label="Next slide"
        >
          <svg
            class="w-5 h-5 group-hover:scale-110 transition-transform"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M9 5l7 7-7 7"
            />
          </svg>
        </button>
      </>
    )
  }

  <!-- Dots Indicator -->
  {
    showDots && images.length > 1 && (
      <div class="slide-dots absolute bottom-4 left-1/2 -translate-x-1/2 flex space-x-2 z-10">
        {images.map((_, index) => (
          <button
            class={`slide-dot w-3 h-3 rounded-full transition-all duration-200 ${index === 0 ? "bg-white" : "bg-white/50 hover:bg-white/75"}`}
            data-slide={index}
            aria-label={`Go to slide ${index + 1}`}
          />
        ))}
      </div>
    )
  }

  <!-- Slide Counter -->
  <div
    class="slide-counter absolute top-4 right-4 bg-black/60 text-white text-sm px-3 py-1 rounded-full"
  >
    <span class="current-slide">1</span> / <span class="total-slides"
      >{images.length}</span
    >
  </div>

  <!-- Autoplay Controls -->
  {
    autoplay && (
      <button
        class="autoplay-toggle absolute top-4 left-4 bg-black/60 hover:bg-black/80 text-white rounded-full p-2 transition-all duration-200 z-10"
        aria-label="Toggle autoplay"
      >
        <svg
          class="play-icon w-4 h-4 hidden"
          fill="currentColor"
          viewBox="0 0 24 24"
        >
          <path d="M8 5v14l11-7z" />
        </svg>
        <svg class="pause-icon w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
          <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z" />
        </svg>
      </button>
    )
  }
</div>

<script>
  // Enhanced slideshow functionality - Same as before
  function initializeSlideshow(
    slideshowElement: HTMLElement
  ): (() => void) | undefined {
    const slideshowId = (slideshowElement as HTMLElement).dataset.slideshowId;
    const autoplay =
      (slideshowElement as HTMLElement).dataset.autoplay === "true";
    const delay = parseInt(
      (slideshowElement as HTMLElement).dataset.delay || "3000",
      10
    );

    const slides = slideshowElement.querySelectorAll(
      ".slide:not(.slide-loading)"
    ) as NodeListOf<HTMLElement>;
    const dots = slideshowElement.querySelectorAll(
      ".slide-dot"
    ) as NodeListOf<HTMLButtonElement>;
    const prevButton = slideshowElement.querySelector(
      ".slide-prev"
    ) as HTMLButtonElement | null;
    const nextButton = slideshowElement.querySelector(
      ".slide-next"
    ) as HTMLButtonElement | null;
    const autoplayToggle = slideshowElement.querySelector(
      ".autoplay-toggle"
    ) as HTMLButtonElement | null;
    const currentSlideSpan = slideshowElement.querySelector(
      ".current-slide"
    ) as HTMLSpanElement | null;
    const loadingElement = slideshowElement.querySelector(
      ".slide-loading"
    ) as HTMLElement | null;

    if (slides.length === 0) return;

    let currentSlide = 0;
    let autoplayInterval: NodeJS.Timeout | null = null;
    let isAutoplayPaused = false;

    // Hide loading state once first image loads
    const firstImage = slides[0]?.querySelector("img");
    if (firstImage) {
      if (firstImage.complete) {
        hideLoading();
      } else {
        firstImage.addEventListener("load", hideLoading);
        firstImage.addEventListener("error", hideLoading);
      }
    } else {
      hideLoading();
    }

    function hideLoading() {
      if (loadingElement) {
        loadingElement.style.display = "none";
      }
    }

    function showSlide(index: number): void {
      if (index < 0 || index >= slides.length) return;

      slides.forEach((slide: HTMLElement, i: number) => {
        slide.style.opacity = i === index ? "1" : "0";
        slide.setAttribute("aria-hidden", i === index ? "false" : "true");
      });

      dots.forEach((dot: HTMLButtonElement, i: number) => {
        if (i === index) {
          dot.classList.remove("bg-white/50", "hover:bg-white/75");
          dot.classList.add("bg-white");
        } else {
          dot.classList.remove("bg-white");
          dot.classList.add("bg-white/50", "hover:bg-white/75");
        }
      });

      if (currentSlideSpan) {
        currentSlideSpan.textContent = (index + 1).toString();
      }

      currentSlide = index;

      // Analytics tracking
      if (typeof window !== "undefined" && (window as any).gtag) {
        (window as any).gtag("event", "slideshow_slide_change", {
          slideshow_id: slideshowId,
          slide_index: index,
          total_slides: slides.length,
        });
      }
    }

    function nextSlide() {
      const next = (currentSlide + 1) % slides.length;
      showSlide(next);
    }

    function prevSlide() {
      const prev = (currentSlide - 1 + slides.length) % slides.length;
      showSlide(prev);
    }

    function startAutoplay(): void {
      if (!autoplay || isAutoplayPaused) return;

      autoplayInterval = setInterval(nextSlide, delay);

      if (autoplayToggle) {
        const playIcon = autoplayToggle.querySelector(
          ".play-icon"
        ) as HTMLElement | null;
        const pauseIcon = autoplayToggle.querySelector(
          ".pause-icon"
        ) as HTMLElement | null;
        if (playIcon) playIcon.classList.add("hidden");
        if (pauseIcon) pauseIcon.classList.remove("hidden");
      }
    }

    function stopAutoplay(): void {
      if (autoplayInterval) {
        clearInterval(autoplayInterval);
        autoplayInterval = null;
      }

      if (autoplayToggle) {
        const playIcon = autoplayToggle.querySelector(
          ".play-icon"
        ) as HTMLElement | null;
        const pauseIcon = autoplayToggle.querySelector(
          ".pause-icon"
        ) as HTMLElement | null;
        if (playIcon) playIcon.classList.remove("hidden");
        if (pauseIcon) pauseIcon.classList.add("hidden");
      }
    }

    // Event listeners - Same as before
    if (prevButton) {
      prevButton.addEventListener("click", () => {
        prevSlide();
        stopAutoplay();
      });
    }

    if (nextButton) {
      nextButton.addEventListener("click", () => {
        nextSlide();
        stopAutoplay();
      });
    }

    dots.forEach((dot: HTMLButtonElement, index: number) => {
      dot.addEventListener("click", () => {
        showSlide(index);
        stopAutoplay();
      });
    });

    if (autoplayToggle) {
      autoplayToggle.addEventListener("click", () => {
        isAutoplayPaused = !isAutoplayPaused;
        if (isAutoplayPaused) {
          stopAutoplay();
        } else {
          startAutoplay();
        }
      });
    }

    // Keyboard navigation
    slideshowElement.addEventListener("keydown", (e: Event) => {
      const keyEvent = e as KeyboardEvent;
      if (keyEvent.key === "ArrowLeft") {
        prevSlide();
        stopAutoplay();
      } else if (keyEvent.key === "ArrowRight") {
        nextSlide();
        stopAutoplay();
      } else if (keyEvent.key === " ") {
        e.preventDefault();
        if (autoplay) {
          isAutoplayPaused = !isAutoplayPaused;
          if (isAutoplayPaused) {
            stopAutoplay();
          } else {
            startAutoplay();
          }
        }
      }
    });

    // Pause on hover
    slideshowElement.addEventListener("mouseenter", () => {
      if (autoplay && !isAutoplayPaused) {
        stopAutoplay();
      }
    });

    slideshowElement.addEventListener("mouseleave", () => {
      if (autoplay && !isAutoplayPaused) {
        startAutoplay();
      }
    });

    // Touch/swipe support
    let touchStartX = 0;
    let touchEndX = 0;

    slideshowElement.addEventListener("touchstart", (e: Event) => {
      const touchEvent = e as TouchEvent;
      touchStartX = touchEvent.changedTouches[0].screenX;
    });

    slideshowElement.addEventListener("touchend", (e: Event) => {
      const touchEvent = e as TouchEvent;
      touchEndX = touchEvent.changedTouches[0].screenX;
      handleSwipe();
    });

    function handleSwipe() {
      const swipeThreshold = 50;
      const diff = touchStartX - touchEndX;

      if (Math.abs(diff) > swipeThreshold) {
        if (diff > 0) {
          nextSlide();
        } else {
          prevSlide();
        }
        stopAutoplay();
      }
    }

    // Initialize
    showSlide(0);
    if (autoplay) {
      startAutoplay();
    }

    // Cleanup function
    return () => {
      if (autoplayInterval) {
        clearInterval(autoplayInterval);
      }
    };
  }

  // Initialize slideshows when content loads
  document.addEventListener("astro:page-load", () => {
    const slideshows = document.querySelectorAll(
      ".jetpack-slideshow"
    ) as NodeListOf<HTMLElement>;
    const cleanupFunctions: (() => void)[] = [];

    slideshows.forEach((slideshow: HTMLElement) => {
      const cleanup = initializeSlideshow(slideshow);
      if (cleanup) cleanupFunctions.push(cleanup);
    });

    // Cleanup on page unload
    const handleCleanup = () => {
      cleanupFunctions.forEach((cleanup: () => void) => cleanup());
    };

    window.addEventListener("beforeunload", handleCleanup);
    document.addEventListener("astro:before-preparation", handleCleanup);
  });

  // Also initialize immediately for dynamically loaded content
  if (typeof window !== "undefined") {
    // Small delay to ensure DOM is ready
    setTimeout(() => {
      const slideshows = document.querySelectorAll(
        ".jetpack-slideshow"
      ) as NodeListOf<HTMLElement>;
      slideshows.forEach((slideshow: HTMLElement) => {
        if (!(slideshow as HTMLElement).dataset.initialized) {
          (slideshow as HTMLElement).dataset.initialized = "true";
          initializeSlideshow(slideshow);
        }
      });
    }, 100);
  }
</script>

<style>
  /* Shimmer loading animation */
  @keyframes shimmer {
    0% { background-position: -200% 0; }
    100% { background-position: 200% 0; }
  }
  
  .loading-skeleton {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: shimmer 1.5s ease-in-out infinite;
  }

  .jetpack-slideshow {
    /* Ensure slideshow is keyboard focusable */
    &:focus-within {
      outline: 2px solid var(--ui-accent);
      outline-offset: 2px;
    }
  }

  .slide-dot:focus {
    outline: 2px solid white;
    outline-offset: 2px;
  }

  .slide-prev:focus,
  .slide-next:focus,
  .autoplay-toggle:focus {
    outline: 2px solid white;
    outline-offset: 2px;
  }

  /* FIXED: Container query support for responsive aspect ratios */
  @container (min-width: 320px) {
    .slideshow-container {
      /* Ensure container queries work properly */
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .slide {
      transition: none;
    }

    .slide-prev svg,
    .slide-next svg {
      transition: none;
    }
  }
</style>
