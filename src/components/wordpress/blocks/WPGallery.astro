---
// src/components/wordpress/blocks/WPGallery.astro
// Custom gallery component for wp-block-gallery

import { Image } from 'astro:assets';

interface Props {
  images: Array<{
    src: string;
    alt: string;
    caption?: string;
  }>;
  columns?: number;
  linkTo?: 'file' | 'attachment' | 'none';
  cropImages?: boolean;
  spacing?: 'none' | 'small' | 'medium' | 'large';
}

const {
  images = [],
  columns = 3,
  linkTo = 'none',
  cropImages = true,
  spacing = 'small'
} = Astro.props;

// Generate unique ID for this gallery
const galleryId = `gallery-${Math.random().toString(36).substr(2, 9)}`;

// Responsive column classes
const getColumnClasses = (cols: number) => {
  const columnMap = {
    1: 'grid-cols-1',
    2: 'grid-cols-1 sm:grid-cols-2',
    3: 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3',
    4: 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4',
    5: 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5',
    6: 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6',
  };
  return columnMap[cols as keyof typeof columnMap] || columnMap[3];
};

// Spacing classes
const spacingClasses = {
  none: 'gap-0',
  small: 'gap-1',
  medium: 'gap-4',
  large: 'gap-8'
};

// Image aspect ratio
const imageClasses = cropImages
  ? 'aspect-square object-cover'
  : 'aspect-auto object-contain';
---

<div
  class="wp-gallery"
  data-gallery-id={galleryId}
  role="group"
  aria-label={`Image gallery with ${images.length} images`}
>
  <div class={`grid ${getColumnClasses(columns)} ${spacingClasses[spacing]}`}>
    {images.map((image, index) => (
      <figure
        class="gallery-item relative group overflow-hidden bg-(--surface-secondary)"
        data-index={index}
      >
        {linkTo === 'file' ? (
          <a
            href={image.src}
            class="gallery-link block"
            data-lightbox="gallery"
            data-gallery-id={galleryId}
            aria-label={`View full size image: ${image.alt}`}
          >
            <Image
              src={image.src}
              alt={image.alt}
              width={400}
              height={cropImages ? 400 : 300}
              class={`w-full h-full ${imageClasses} transition-transform duration-300 group-hover:scale-105`}
              loading={index < 6 ? "eager" : "lazy"}
              format="avif"
              quality={85}
            />

            <!-- Hover overlay -->
            <div class="absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-colors duration-300 flex items-center justify-center">
              <svg class="w-8 h-8 text-white opacity-0 group-hover:opacity-100 transition-opacity duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7" />
              </svg>
            </div>
          </a>
        ) : (
          <div class="gallery-image">
            <Image
              src={image.src}
              alt={image.alt}
              width={400}
              height={cropImages ? 400 : 300}
              class={`w-full h-full ${imageClasses}`}
              loading={index < 6 ? "eager" : "lazy"}
              format="avif"
              quality={85}
            />
          </div>
        )}

        {image.caption && (
          <figcaption class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent text-white p-3 text-sm leading-relaxed opacity-0 group-hover:opacity-100 transition-opacity duration-300">
            <p set:html={image.caption} />
          </figcaption>
        )}
      </figure>
    ))}
  </div>

  <!-- Gallery Navigation (for lightbox mode) -->
  {linkTo === 'file' && (
    <div class="gallery-lightbox fixed inset-0 bg-black/95 z-[500] items-center justify-center" style="display: none;">
      <button class="lightbox-close absolute top-4 right-4 text-white text-2xl p-2 hover:bg-white/20 rounded-full">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>

      <button class="lightbox-prev absolute left-4 top-1/2 -translate-y-1/2 text-white text-2xl p-3 hover:bg-white/20 rounded-full">
        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>

      <button class="lightbox-next absolute right-4 top-1/2 -translate-y-1/2 text-white text-2xl p-3 hover:bg-white/20 rounded-full">
        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>

      <div class="lightbox-content w-full max-w-7xl max-h-full p-8">
        <img class="lightbox-image w-full max-h-full object-contain" alt="" />
        <div class="lightbox-caption text-white text-center mt-4 text-lg"></div>
      </div>

      <div class="lightbox-counter absolute bottom-4 left-1/2 -translate-x-1/2 text-white bg-black/50 px-4 py-2 rounded-full">
        <span class="current">1</span> / <span class="total">{images.length}</span>
      </div>
    </div>
  )}
</div>

// Fixed script section for WPGallery.astro
// Replace the existing script section with this improved version

<script>
  // More reliable initialization that works regardless of Astro event issues
  function initializeGalleryLightbox() {
    const galleries = document.querySelectorAll('.wp-gallery');

    galleries.forEach((gallery) => {
      const galleryElement = gallery as HTMLElement;
      const galleryId = galleryElement.dataset.galleryId;
      
      // Skip if already initialized (prevent double initialization)
      if (galleryElement.dataset.lightboxInitialized === 'true') {
        return;
      }
      
      const lightboxLinks = gallery.querySelectorAll('[data-lightbox="gallery"]') as NodeListOf<HTMLAnchorElement>;
      const lightbox = gallery.querySelector('.gallery-lightbox') as HTMLElement;

      if (!lightbox || lightboxLinks.length === 0) return;

      // Mark as initialized
      galleryElement.dataset.lightboxInitialized = 'true';

      const lightboxImage = lightbox.querySelector('.lightbox-image') as HTMLImageElement;
      const lightboxCaption = lightbox.querySelector('.lightbox-caption') as HTMLElement;
      const lightboxClose = lightbox.querySelector('.lightbox-close') as HTMLButtonElement;
      const lightboxPrev = lightbox.querySelector('.lightbox-prev') as HTMLButtonElement;
      const lightboxNext = lightbox.querySelector('.lightbox-next') as HTMLButtonElement;
      const currentSpan = lightbox.querySelector('.lightbox-counter .current') as HTMLSpanElement;

      let currentImageIndex = 0;
      const images = Array.from(lightboxLinks).map(link => {
        const img = link.querySelector('img');
        const caption = link.closest('.gallery-item')?.querySelector('figcaption');
        return {
          src: link.href,
          alt: img?.alt || '',
          caption: caption?.textContent || ''
        };
      });

      function showLightboxImage(index: number) {
        if (index < 0 || index >= images.length) return;

        const image = images[index];
        lightboxImage.src = image.src;
        lightboxImage.alt = image.alt;
        lightboxCaption.textContent = image.caption;
        currentSpan.textContent = (index + 1).toString();
        currentImageIndex = index;

        // Analytics
        if (typeof window !== 'undefined' && (window as any).gtag) {
          (window as any).gtag('event', 'gallery_image_view', {
            gallery_id: galleryId,
            image_index: index,
            total_images: images.length
          });
        }
      }

      function openLightbox(index: number) {
        showLightboxImage(index);
        lightbox.style.display = 'flex';
        document.body.style.overflow = 'hidden';
        lightboxImage.focus();
      }

      function closeLightbox() {
        lightbox.style.display = 'none';
        document.body.style.overflow = '';
      }

      // CRITICAL FIX: Event listeners with proper preventDefault
      lightboxLinks.forEach((link, index) => {
        // Remove any existing listeners to prevent duplicates
        const newLink = link.cloneNode(true) as HTMLAnchorElement;
        link.parentNode?.replaceChild(newLink, link);
        
        newLink.addEventListener('click', (e) => {
          e.preventDefault(); // CRITICAL: Prevent navigation
          e.stopPropagation();
          console.log(`[Gallery] Opening lightbox for image ${index + 1}`); // Debug logging
          openLightbox(index);
        }, { passive: false }); // Ensure preventDefault works
      });

      lightboxClose.addEventListener('click', closeLightbox);

      lightboxPrev.addEventListener('click', () => {
        const prevIndex = (currentImageIndex - 1 + images.length) % images.length;
        showLightboxImage(prevIndex);
      });

      lightboxNext.addEventListener('click', () => {
        const nextIndex = (currentImageIndex + 1) % images.length;
        showLightboxImage(nextIndex);
      });

      // Keyboard navigation
      function handleKeydown(e: KeyboardEvent) {
        if (lightbox.style.display !== 'none' && lightbox.style.display !== '') {
          switch (e.key) {
            case 'Escape':
              closeLightbox();
              break;
            case 'ArrowLeft':
              lightboxPrev.click();
              break;
            case 'ArrowRight':
              lightboxNext.click();
              break;
          }
        }
      }

      // Remove existing keydown listeners to prevent duplicates
      document.removeEventListener('keydown', handleKeydown);
      document.addEventListener('keydown', handleKeydown);

      // Close on backdrop click
      lightbox.addEventListener('click', (e) => {
        if (e.target === lightbox) {
          closeLightbox();
        }
      });

      // Touch gestures for mobile
      let touchStartX = 0;
      let touchEndX = 0;

      lightbox.addEventListener('touchstart', (e) => {
        touchStartX = e.changedTouches[0].screenX;
      });

      lightbox.addEventListener('touchend', (e) => {
        touchEndX = e.changedTouches[0].screenX;
        const diff = touchStartX - touchEndX;
        const threshold = 50;

        if (Math.abs(diff) > threshold) {
          if (diff > 0) {
            lightboxNext.click(); // Swipe left = next
          } else {
            lightboxPrev.click(); // Swipe right = previous
          }
        }
      });

      console.log(`[Gallery] Initialized lightbox for gallery ${galleryId} with ${images.length} images`);
    });
  }

  // ROBUST INITIALIZATION STRATEGY
  // Use multiple initialization triggers to ensure lightbox works

  // 1. If DOM is already loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeGalleryLightbox);
  } else {
    initializeGalleryLightbox();
  }

  // 2. Backup initialization on window load
  window.addEventListener('load', initializeGalleryLightbox);

  // 3. Keep astro:page-load as additional trigger (when it works)
  document.addEventListener('astro:page-load', initializeGalleryLightbox);

  // 4. Also handle astro:after-swap for view transitions (if ever re-enabled)
  document.addEventListener('astro:after-swap', initializeGalleryLightbox);

  // 5. Manual re-initialization function for debugging
  if (typeof window !== 'undefined') {
    (window as any).reinitializeGalleries = initializeGalleryLightbox;
  }
</script>