---
// src/components/wordpress/blocks/WPEventBlock.astro
import WPProductShowcase from "./WPProductShowcase.astro";

interface Props {
  title: string;
  date: string;
  time: string;
  location?: string;
  description: string;
  rsvpUrl?: string;
  featuredProducts?: string[]; // Product IDs (for now, SKUs in future)
  imageUrl?: string;
  registrationRequired?: boolean;
}

const {
  title,
  date,
  time,
  location,
  description,
  rsvpUrl,
  featuredProducts = [],
  imageUrl,
  registrationRequired = false,
} = Astro.props;

// Enhanced date formatting with timezone support and error handling
let eventDate: Date;
let isUpcoming = false;
let formattedDate = "Date unavailable";
let startDateISO = "";

try {
  eventDate = new Date(date);
  if (isNaN(eventDate.getTime())) {
    throw new Error("Invalid date");
  }

  isUpcoming = eventDate > new Date();
  formattedDate = eventDate.toLocaleDateString("en-US", {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric",
  });

  // Extract start time from time range for structured data
  const startTime = time.split(" - ")[0] || time.split("-")[0] || time;
  const cleanStartTime = startTime.trim();

  // Try to create a complete datetime string for structured data
  try {
    const fullDateTime = new Date(`${date} ${cleanStartTime}`);
    if (!isNaN(fullDateTime.getTime())) {
      startDateISO = fullDateTime.toISOString();
    } else {
      // Fallback: just use the date
      startDateISO = eventDate.toISOString();
    }
  } catch {
    // Fallback: just use the date
    startDateISO = eventDate.toISOString();
  }
} catch (error) {
  console.warn("Error parsing event date:", { date, time, error });
  eventDate = new Date();
  isUpcoming = false;
  formattedDate = "Date unavailable";
  startDateISO = new Date().toISOString();
}

// Structured data for events
const eventStructuredData = {
  "@context": "https://schema.org",
  "@type": "Event",
  name: title,
  startDate: startDateISO, // Use the validated ISO date we created above
  location: {
    "@type": "Place",
    name: location || "El Camino Skate Shop",
    address: {
      "@type": "PostalAddress",
      streetAddress: "123 Skate Street", // Update with actual address
      addressLocality: "Your City",
      addressRegion: "State",
      postalCode: "12345",
    },
  },
  description: description,
  eventStatus: "https://schema.org/EventScheduled",
  eventAttendanceMode: "https://schema.org/OfflineEventAttendanceMode",
  organizer: {
    "@type": "Organization",
    name: "El Camino Skate Shop",
  },
};
---

<div
  class="wp-event-block bg-gradient-to-r from-(--ui-accent)/10 to-(--ui-accent)/5 border-l-4 border-(--ui-accent) p-6 mb-6"
>
  <!-- Event structured data -->
  <script
    is:inline
    type="application/ld+json"
    set:html={JSON.stringify(eventStructuredData)}
  />

  <div class="flex flex-col lg:flex-row gap-6">
    <div class="flex-1">
      <!-- Event Status Badge -->
      <div class="flex items-center gap-2 mb-2">
        <svg
          class="w-5 h-5 text-(--ui-accent)"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
          ></path>
        </svg>
        <span
          class={`font-semibold text-sm uppercase tracking-wide ${
            isUpcoming ? "text-(--ui-accent)" : "text-(--content-meta)"
          }`}
        >
          {isUpcoming ? "Upcoming Event" : "Past Event"}
        </span>
        {
          registrationRequired && isUpcoming && (
            <span class="bg-(--state-warning-surface) text-(--state-warning-text) px-2 py-1 text-xs rounded-full">
              Registration Required
            </span>
          )
        }
      </div>

      <h3
        class="font-display font-bold text-2xl lg:text-3xl text-(--content-heading) mb-3"
      >
        {title}
      </h3>

      <!-- Event Details Grid -->
      <div
        class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4 text-(--content-body)"
      >
        <div class="flex items-center gap-2">
          <svg
            class="w-4 h-4 text-(--content-meta)"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
            ></path>
          </svg>
          <time datetime={date} class="font-medium">{formattedDate}</time>
        </div>

        <div class="flex items-center gap-2">
          <svg
            class="w-4 h-4 text-(--content-meta)"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <span>{time}</span>
        </div>

        {
          location && (
            <div class="flex items-center gap-2 sm:col-span-2">
              <svg
                class="w-4 h-4 text-(--content-meta)"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                />
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"
                />
              </svg>
              <span>{location}</span>
            </div>
          )
        }
      </div>

      <p class="text-(--content-body) mb-4 leading-relaxed">
        {description}
      </p>

      <!-- Action Buttons -->
      <div class="flex flex-wrap gap-3">
        {
          isUpcoming && rsvpUrl && (
            <a
              href={rsvpUrl}
              class="bg-ui-accent hover:bg-ui-accent-hover text-white px-6 py-3 rounded-sm font-semibold transition-colors inline-block"
              target="_blank"
              rel="noopener noreferrer"
            >
              {registrationRequired ? "Register Now" : "RSVP"}
            </a>
          )
        }

        {
          isUpcoming && (
            <a
              href={`data:text/calendar;charset=utf8,${encodeURIComponent(
                `BEGIN:VCALENDAR\nVERSION:2.0\nBEGIN:VEVENT\nDTSTART:${startDateISO.replace(/[-:]/g, "").split(".")[0]}Z\nSUMMARY:${title}\nDESCRIPTION:${description}\nLOCATION:${location || "El Camino Skate Shop"}\nEND:VEVENT\nEND:VCALENDAR`
              )}`}
              class="bg-surface-tertiary hover:bg-ui-accent hover:text-white text-content-heading px-6 py-3 rounded-sm font-semibold transition-colors inline-block"
              download={`${title.replace(/\s+/g, "-")}-event.ics`}
            >
              Add to Calendar
            </a>
          )
        }
      </div>
    </div>

    {
      imageUrl && (
        <div class="lg:w-80 flex-shrink-0">
          <img
            src={imageUrl}
            alt={title}
            class="w-full h-48 lg:h-full object-cover rounded-sm"
            loading="lazy"
            decoding="async"
          />
        </div>
      )
    }
  </div>

  <!-- Featured Products Section -->
  {
    featuredProducts.length > 0 && (
      <div class="mt-6 pt-6 border-t border-(--border-secondary)">
        <h4 class="font-display font-semibold text-lg text-(--content-heading) mb-4">
          Featured at This Event
        </h4>
        <WPProductShowcase
          productSkus={featuredProducts}
          layout="carousel"
          columns={4}
        />
      </div>
    )
  }
</div>
