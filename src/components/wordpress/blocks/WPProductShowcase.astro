---
// src/components/wordpress/blocks/WPProductShowcase.astro - USING BlogProductCard
import BlogProductCard from "@/components/wordpress/blocks/BlogProductCard.astro";
import { fetchProducts } from "@/lib/square/client";

interface Props {
  productSkus: string[];
  layout?: "grid" | "carousel" | "list";
  showPrice?: boolean;
  showStock?: boolean;
  showCartButton?: boolean;
  columns?: number;
  title?: string;
  description?: string;
  fallbackIds?: string[]; // Backward compatibility
}

const {
  productSkus = [],
  layout = "grid",
  showPrice = true,
  showStock = true,
  showCartButton = true,
  columns = 3,
  title = "",
  description = "",
  fallbackIds = [],
} = Astro.props;

// PERFORMANCE OPTIMIZATION: Use bulk product fetch (single cached API call)
let products: any[] = [];
let errors = [];

try {
  const allProducts = await fetchProducts(); // Single cached call for entire site

  // Enhanced matching with multiple strategies
  products = productSkus
    .map((identifier) => {
      const searchIdentifier = identifier.trim();
      let matchedProduct = null;

      // 1. Exact human-readable SKU match (case insensitive)
      matchedProduct = allProducts.find(
        (p) =>
          p.humanReadableSku &&
          p.humanReadableSku.toLowerCase() === searchIdentifier.toLowerCase()
      );

      // 2. Exact Square SKU match
      if (!matchedProduct) {
        matchedProduct = allProducts.find(
          (p) => p.sku && p.sku === searchIdentifier
        );
      }

      // 3. Product ID match (backward compatibility)
      if (!matchedProduct) {
        matchedProduct = allProducts.find((p) => {
          return (
            p.id === searchIdentifier || p.catalogObjectId === searchIdentifier
          );
        });
      }

      // 4. Variation SKU match
      if (!matchedProduct) {
        matchedProduct = allProducts.find((p) =>
          p.variations?.some((v) => v.sku === searchIdentifier)
        );
      }

      // 5. Partial title match (case insensitive)
      if (!matchedProduct) {
        matchedProduct = allProducts.find((p) =>
          p.title.toLowerCase().includes(searchIdentifier.toLowerCase())
        );
      }

      // 6. Fuzzy brand + title match
      if (!matchedProduct) {
        const searchParts = searchIdentifier.toLowerCase().split("-");
        if (searchParts.length >= 2) {
          const [brandPart, ...titleParts] = searchParts;
          matchedProduct = allProducts.find((p) => {
            const productTitle = p.title.toLowerCase();
            const productBrand = (p.brand || "").toLowerCase();
            return (
              (productBrand.includes(brandPart) ||
                productTitle.includes(brandPart)) &&
              titleParts.some((part) => productTitle.includes(part))
            );
          });
        }
      }

      if (!matchedProduct) {
        errors.push(`Product not found: ${searchIdentifier}`);
      }

      // Validate product has required properties
      if (
        matchedProduct &&
        (!matchedProduct.image ||
          !matchedProduct.title ||
          !matchedProduct.price)
      ) {
        errors.push(
          `Product ${searchIdentifier} missing required data (image, title, or price)`
        );
        return null;
      }

      return matchedProduct;
    })
    .filter(Boolean);

  // Fallback: Support legacy product IDs for migration
  if (products.length === 0 && fallbackIds.length > 0) {
    products = fallbackIds
      .map((id) => {
        const product = allProducts.find((p) => p.id === id);
        if (!product) {
          errors.push(`Product not found (ID): ${id}`);
          return null;
        }

        // Validate product has required properties
        if (!product.image || !product.title || !product.price) {
          errors.push(
            `Product ${id} missing required data (image, title, or price)`
          );
          return null;
        }

        return product;
      })
      .filter(Boolean);
  }
} catch (error) {
  console.error("Error fetching products for showcase:", error);
  errors.push("Failed to load product data");
}

// BLOG-OPTIMIZED: Grid classes for smaller cards
const gridClasses = {
  1: "grid-cols-1",
  2: "grid-cols-2",
  3: "grid-cols-2 sm:grid-cols-3",
  4: "grid-cols-2 sm:grid-cols-3 md:grid-cols-4",
  5: "grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5",
  6: "grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-6",
};

const gridClass =
  gridClasses[columns as keyof typeof gridClasses] || gridClasses[3];
---

<div
  class="wp-product-showcase bg-(--surface-secondary) p-4 sm:p-6 rounded-sm mb-6"
>
  {
    title && (
      <h3 class="font-display font-bold text-xl lg:text-2xl text-(--content-heading) mb-3">
        {title}
      </h3>
    )
  }

  {
    description && (
      <p class="text-(--content-body) mb-4 text-base">{description}</p>
    )
  }

  {
    products.length > 0 && (
      <div class={`product-showcase-${layout}`}>
        {layout === "grid" && (
          <div class={`grid ${gridClass} gap-3`}>
            {products.map((product) => (
              <BlogProductCard
                product={product}
                priority={false}
                variant="compact"
              />
            ))}
          </div>
        )}

        {layout === "carousel" && (
          <div class="product-carousel overflow-x-auto -mx-2">
            <div class="flex gap-3 px-2 pb-2">
              {products.map((product) => (
                <div class="flex-shrink-0 w-40 sm:w-44">
                  <BlogProductCard
                    product={product}
                    priority={false}
                    variant="inline"
                  />
                </div>
              ))}
            </div>
          </div>
        )}

        {layout === "list" && (
          <div class="space-y-3">
            {products.map((product) => (
              <div class="grid grid-cols-[120px_1fr] sm:grid-cols-[140px_1fr] gap-4 p-3 bg-(--surface-primary) rounded-sm">
                <BlogProductCard
                  product={product}
                  priority={false}
                  variant="minimal"
                />
              </div>
            ))}
          </div>
        )}
      </div>
    )
  }

  <!-- Error Handling (Development Only) -->
  {
    errors.length > 0 && import.meta.env.DEV && (
      <div class="mt-4 p-3 bg-state-warning-surface text-state-warning-text rounded-sm text-sm">
        <h4 class="font-semibold mb-2">Product Showcase Notice:</h4>
        <ul>
          {errors.map((error) => (
            <li>â€¢ {error}</li>
          ))}
        </ul>
      </div>
    )
  }

  {
    products.length === 0 && errors.length === 0 && (
      <div class="text-center py-8">
        <div class="text-3xl mb-2 opacity-20">ðŸ›¹</div>
        <p class="text-(--content-meta) text-sm">
          No products configured for this showcase.
        </p>
        {import.meta.env.DEV && (
          <p class="text-xs mt-2 opacity-75">
            Add data-product-ids="ID1,ID2" to configure
          </p>
        )}
      </div>
    )
  }
</div>

<style>
  .product-carousel {
    scrollbar-width: thin;
    scrollbar-color: var(--ui-accent) var(--surface-tertiary);
  }

  .product-carousel::-webkit-scrollbar {
    height: 4px;
  }

  .product-carousel::-webkit-scrollbar-track {
    background: var(--surface-tertiary);
    border-radius: 2px;
  }

  .product-carousel::-webkit-scrollbar-thumb {
    background: var(--ui-accent);
    border-radius: 2px;
  }

  /* Ensure carousel doesn't break out of container */
  .product-carousel {
    max-width: 100%;
  }
</style>
