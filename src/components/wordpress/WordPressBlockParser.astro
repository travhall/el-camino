---
// src/components/wordpress/WordPressBlockParser.astro

import JetpackSlideshow from "./blocks/JetpackSlideshow.astro";
import WPGallery from "./blocks/WPGallery.astro";
import WPQuote from "./blocks/WPQuote.astro";
import WPEmbed from "./blocks/WPEmbed.astro";
import WPImage from "./blocks/WPImage.astro";
import WPColumns from "./blocks/WPColumns.astro";
import WPButton from "./blocks/WPButton.astro";
import WPProductShowcase from "./blocks/WPProductShowcase.astro";
import WPEventBlock from "./blocks/WPEventBlock.astro";
import WPTeamMember from "./blocks/WPTeamMember.astro";

interface Props {
  content: string;
  enhanceBlocks?: boolean;
  debug?: boolean;
  groupImages?: boolean;
}

const {
  content,
  enhanceBlocks = true,
  debug = false,
  groupImages = true,
} = Astro.props;

function parseWordPressBlocks(htmlContent: string): Array<{
  type: string;
  html: string;
  data: any;
  originalIndex: number;
}> {
  if (!htmlContent || !enhanceBlocks) {
    return [{ type: "raw", html: htmlContent, data: {}, originalIndex: 0 }];
  }

  const blockPatterns = [
    {
      type: "product-showcase",
      regex:
        /<div[^>]*class="[^"]*wp-block-product-showcase[^"]*"[^>]*>[\s\S]*?<\/div>/g,
      parser: parseProductShowcase,
    },
    {
      type: "event",
      regex: /<div[^>]*class="[^"]*wp-block-event[^"]*"[^>]*>[\s\S]*?<\/div>/g,
      parser: parseEventBlock,
    },
    {
      type: "team-member",
      regex:
        /<div[^>]*class="[^"]*wp-block-team-member[^"]*"[^>]*>[\s\S]*?<\/div>/g,
      parser: parseTeamMember,
    },
    {
      type: "jetpack-slideshow",
      regex:
        /<div[^>]*class="[^"]*wp-block-jetpack-slideshow[^"]*"[^>]*>[\s\S]*?<\/div>/g,
      parser: parseJetpackSlideshow,
    },
    {
      type: "gallery",
      regex:
        /<figure[^>]*class="[^"]*wp-block-gallery[^"]*"[^>]*>[\s\S]*?<\/figure>/g,
      parser: parseGallery,
    },
    {
      type: "embed",
      regex:
        /<figure[^>]*class="[^"]*wp-block-embed[^"]*"[^>]*>[\s\S]*?<\/figure>/g,
      parser: parseEmbed,
    },
    {
      type: "quote",
      regex:
        /<(?:blockquote|figure)[^>]*class="[^"]*wp-block-quote[^"]*"[^>]*>[\s\S]*?<\/(?:blockquote|figure)>/g,
      parser: parseQuote,
    },
    {
      type: "image",
      regex:
        /<figure[^>]*class="[^"]*wp-block-image[^"]*"[^>]*>[\s\S]*?<\/figure>/g,
      parser: parseImage,
    },
    {
      type: "columns",
      regex:
        /<div[^>]*class="[^"]*wp-block-columns[^"]*"[^>]*>[\s\S]*?<\/div>/g,
      parser: parseColumns,
    },
    {
      type: "button",
      regex: /<div[^>]*class="[^"]*wp-block-button[^"]*"[^>]*>[\s\S]*?<\/div>/g,
      parser: parseButton,
    },
  ];

  // Find all blocks with their positions
  const allMatches: Array<{
    type: string;
    match: string;
    start: number;
    end: number;
    data: any;
  }> = [];

  blockPatterns.forEach((pattern) => {
    const matches = Array.from(htmlContent.matchAll(pattern.regex));
    matches.forEach((match) => {
      if (match.index !== undefined) {
        try {
          const data = pattern.parser(match[0]);
          allMatches.push({
            type: pattern.type,
            match: match[0],
            start: match.index,
            end: match.index + match[0].length,
            data,
          });
        } catch (error) {
          console.warn(`Error parsing ${pattern.type} block:`, error);
          // Fallback to text content
          allMatches.push({
            type: "raw",
            match: match[0],
            start: match.index,
            end: match.index + match[0].length,
            data: {},
          });
        }
      }
    });
  });

  // Sort matches by position
  allMatches.sort((a, b) => a.start - b.start);

  // Process non-overlapping matches and extract remaining content
  const processedBlocks: Array<{
    type: string;
    html: string;
    data: any;
    originalIndex: number;
  }> = [];

  let lastEnd = 0;
  let usedRanges: Array<{ start: number; end: number }> = [];

  allMatches.forEach((match) => {
    // Check if this match overlaps with any used range
    const overlaps = usedRanges.some(
      (range) =>
        (match.start >= range.start && match.start < range.end) ||
        (match.end > range.start && match.end <= range.end) ||
        (match.start <= range.start && match.end >= range.end)
    );

    if (!overlaps) {
      // Add any content before this match
      if (match.start > lastEnd) {
        const textContent = htmlContent.slice(lastEnd, match.start).trim();
        if (textContent) {
          processedBlocks.push({
            type: "raw",
            html: textContent,
            data: {},
            originalIndex: lastEnd,
          });
        }
      }

      // Add the matched block
      processedBlocks.push({
        type: match.type,
        html: match.match,
        data: match.data,
        originalIndex: match.start,
      });

      usedRanges.push({ start: match.start, end: match.end });
      lastEnd = match.end;
    }
  });

  // Add any remaining content
  if (lastEnd < htmlContent.length) {
    const remainingContent = htmlContent.slice(lastEnd).trim();
    if (remainingContent) {
      processedBlocks.push({
        type: "raw",
        html: remainingContent,
        data: {},
        originalIndex: lastEnd,
      });
    }
  }

  // Group consecutive images into galleries if enabled
  if (groupImages) {
    const finalBlocks: typeof processedBlocks = [];
    let i = 0;

    while (i < processedBlocks.length) {
      const currentBlock = processedBlocks[i];

      // Check if current block is an image or single-image gallery
      const isImageBlock =
        currentBlock.type === "image" && currentBlock.data.src;
      const isSingleImageGallery =
        currentBlock.type === "gallery" &&
        currentBlock.data.images &&
        currentBlock.data.images.length === 1;

      if (isImageBlock || isSingleImageGallery) {
        // Start collecting consecutive image blocks
        const imageGroup: Array<{
          src: string;
          alt: string;
          caption?: string;
        }> = [];
        let j = i;

        // Collect all consecutive image blocks
        while (j < processedBlocks.length) {
          const block = processedBlocks[j];
          const blockIsImage = block.type === "image" && block.data.src;
          const blockIsSingleGallery =
            block.type === "gallery" &&
            block.data.images &&
            block.data.images.length === 1;

          if (blockIsImage) {
            const newImage = {
              src: block.data.src,
              alt: block.data.alt || "",
              caption: block.data.caption,
            };
            // Check for duplicates by src URL
            if (!imageGroup.find((img) => img.src === newImage.src)) {
              imageGroup.push(newImage);
            }
          } else if (blockIsSingleGallery) {
            const newImage = block.data.images[0];
            // Check for duplicates by src URL
            if (!imageGroup.find((img) => img.src === newImage.src)) {
              imageGroup.push(newImage);
            }
          } else {
            break; // Stop collecting when we hit a non-image block
          }

          j++;
        }

        // Only group if we have more than one image
        if (imageGroup.length > 1) {
          // Create unified gallery block
          finalBlocks.push({
            type: "gallery",
            html: processedBlocks
              .slice(i, j)
              .map((b) => b.html)
              .join("\n"),
            data: {
              images: imageGroup,
              columns: Math.min(imageGroup.length, 4), // Max 4 columns
              linkTo: "file", // Enable lightbox
            },
            originalIndex: currentBlock.originalIndex,
          });

          i = j; // Skip all the grouped blocks
        } else {
          // Single image, keep as is
          finalBlocks.push(currentBlock);
          i++;
        }
      } else {
        // Non-image block, keep as is
        finalBlocks.push(currentBlock);
        i++;
      }
    }

    return finalBlocks;
  }

  return processedBlocks;
}

// Block parser functions
function parseJetpackSlideshow(html: string) {
  const imagePattern = /<img[^>]*src="([^"]+)"[^>]*(?:alt="([^"]*)")?[^>]*>/g;
  const images = [];
  let match;

  while ((match = imagePattern.exec(html)) !== null) {
    images.push({
      src: match[1],
      alt: match[2] || "",
      caption: "",
    });
  }

  return { images };
}

function parseGallery(html: string) {
  const images: Array<{ src: string; alt: string; caption?: string }> = [];

  // FIXED: Handle WordPress 5.9+ "has-nested-images" structure
  const hasNestedImages = html.includes("has-nested-images");

  if (hasNestedImages) {
    // Modern WordPress 5.9+ structure: Extract from nested figure.wp-block-image elements
    const nestedFigurePattern =
      /<figure[^>]*class="[^"]*wp-block-image[^"]*"[^>]*>([\s\S]*?)<\/figure>/g;
    let figureMatch;

    while ((figureMatch = nestedFigurePattern.exec(html)) !== null) {
      const figureContent = figureMatch[1];
      const imgMatch = figureContent.match(
        /<img[^>]+src="([^"]+)"[^>]*(?:alt="([^"]*)")?[^>]*>/
      );

      if (imgMatch) {
        let src = imgMatch[1];
        const alt = imgMatch[2] || "";

        // Clean up WordPress.com size parameters
        src = src.replace(/\?w=\d+(&h=\d+)?$/, "").replace(/\?$/, "");
        images.push({ src, alt });
      }
    }
  } else {
    // Legacy gallery structure: Direct img extraction
    const imgPattern = /<img[^>]+src="([^"]+)"[^>]*(?:alt="([^"]*)")?[^>]*>/g;
    let match;

    while ((match = imgPattern.exec(html)) !== null) {
      let src = match[1];
      const alt = match[2] || "";

      // Clean URL parameters
      src = src.replace(/\?w=\d+(&h=\d+)?$/, "").replace(/\?$/, "");

      if (!images.find((img) => img.src === src)) {
        images.push({ src, alt });
      }
    }
  }

  // Extract gallery settings
  const columnsMatch = html.match(/columns-(\d+)/);
  const columns = columnsMatch ? parseInt(columnsMatch[1], 10) : 3;
  const linkTo =
    html.includes('data-link="file"') ||
    html.includes('data-link-destination="media"')
      ? "file"
      : "file"; // Default to file for lightbox

  return { images, columns, linkTo };
}

function parseQuote(html: string) {
  const quoteMatch = html.match(
    /<(?:blockquote|p)[^>]*>(.*?)<\/(?:blockquote|p)>/s
  );
  const citeMatch =
    html.match(/<cite[^>]*>(.*?)<\/cite>/s) || html.match(/—\s*(.+?)$/m);

  return {
    quote: quoteMatch?.[1]?.replace(/<[^>]*>/g, "").trim() || "",
    cite: citeMatch?.[1]?.replace(/<[^>]*>/g, "").trim() || "",
  };
}

function parseEmbed(html: string) {
  const iframeMatch = html.match(/<iframe[^>]*src="([^"]+)"[^>]*>/);
  const linkMatch = html.match(/<a[^>]*href="([^"]+)"[^>]*>/);

  const url = iframeMatch?.[1] || linkMatch?.[1] || "";
  const type =
    url.includes("youtube") || url.includes("youtu.be")
      ? "youtube"
      : url.includes("vimeo")
        ? "vimeo"
        : url.includes("twitter") || url.includes("x.com")
          ? "twitter"
          : url.includes("instagram")
            ? "instagram"
            : "generic";

  return { url, type, html };
}

function parseImage(html: string) {
  const srcMatch = html.match(/<img[^>]*src="([^"]+)"[^>]*>/);
  const altMatch = html.match(/<img[^>]*alt="([^"]*)"[^>]*>/);
  const captionMatch = html.match(/<figcaption[^>]*>(.*?)<\/figcaption>/s);

  let src = srcMatch?.[1] || "";
  // Clean URL parameters to match gallery parsing
  src = src.replace(/\?w=\d+(&h=\d+)?$/, "").replace(/\?$/, "");

  return {
    src,
    alt: altMatch?.[1] || "",
    caption: captionMatch?.[1]?.replace(/<[^>]*>/g, "").trim() || "",
  };
}

function parseColumns(html: string) {
  const columnRegex =
    /<div[^>]*class="[^"]*wp-block-column[^"]*"[^>]*>([\s\S]*?)<\/div>/g;
  const columns = [];
  let match;

  while ((match = columnRegex.exec(html)) !== null) {
    columns.push({
      content: match[1],
      width: match[0].match(/style="[^"]*flex-basis:([^;]+);/)?.[1] || "auto",
    });
  }

  return { columns };
}

function parseButton(html: string) {
  const linkMatch = html.match(
    /<a[^>]+href="([^"]+)"[^>]*class="[^"]*wp-block-button__link[^"]*"[^>]*>(.*?)<\/a>/s
  );

  return {
    url: linkMatch?.[1] || "",
    text: linkMatch?.[2]?.replace(/<[^>]*>/g, "") || "",
    style: html.includes("is-style-outline") ? "outline" : "fill",
    color: html.match(/background-color:([^;]+);/)?.[1] || "",
  };
}

function parseProductShowcase(html: string) {
  // Extract both product IDs and SKUs from data attributes
  const productIds = extractProductIds(html);
  const productSkus = extractProductSkus(html);

  // WordPress.com compatibility: Extract from HTML comments as fallback
  const commentSkus = extractFromComments(html, "data-product-skus");
  const commentIds = extractFromComments(html, "data-product-ids");
  const commentTitle = extractFromComments(html, "data-title");
  const commentLayout = extractFromComments(html, "data-layout");
  const commentColumns = extractFromComments(html, "data-columns");

  // Display options with comment fallbacks
  const layout = html.includes('data-layout="carousel"')
    ? "carousel"
    : html.includes('data-layout="list"')
      ? "list"
      : commentLayout === "carousel"
        ? "carousel"
        : commentLayout === "list"
          ? "list"
          : "grid";

  const columns = parseInt(
    html.match(/data-columns="(\d+)"/)?.[1] ||
      (typeof commentColumns === "string" ? commentColumns : "3") ||
      "3"
  );

  // Combine all sources, prioritizing data attributes, then comments
  const finalSkus =
    productSkus.length > 0
      ? productSkus
      : Array.isArray(commentSkus) && commentSkus.length > 0
        ? commentSkus
        : productIds.length > 0
          ? productIds
          : Array.isArray(commentIds) && commentIds.length > 0
            ? commentIds
            : [];

  const finalTitle =
    html.match(/data-title="([^"]+)"/)?.[1] || commentTitle || "";

  return {
    productSkus: finalSkus,
    layout,
    showPrice: true,
    showStock: true,
    showCartButton: true,
    columns,
    title: finalTitle,
    description: html.match(/data-description="([^"]+)"/)?.[1] || "",
    fallbackIds:
      productIds.length > 0
        ? productIds
        : Array.isArray(commentIds)
          ? commentIds
          : [],
  };
}

function parseEventBlock(html: string) {
  return {
    title: html.match(/data-title="([^"]+)"/)?.[1] || "",
    date: html.match(/data-date="([^"]+)"/)?.[1] || "",
    time: html.match(/data-time="([^"]+)"/)?.[1] || "",
    location: html.match(/data-location="([^"]+)"/)?.[1] || "",
    description: html.match(/data-description="([^"]+)"/)?.[1] || "",
    rsvpUrl: html.match(/data-rsvp-url="([^"]+)"/)?.[1] || "",
    featuredProducts:
      html
        .match(/data-featured-products="([^"]+)"/)?.[1]
        ?.split(",")
        .map((p) => p.trim()) || [],
    imageUrl: html.match(/data-image="([^"]+)"/)?.[1] || "",
    registrationRequired: html.includes('data-registration-required="true"'),
  };
}

function parseTeamMember(html: string) {
  const achievements =
    html
      .match(/data-achievements="([^"]+)"/)?.[1]
      ?.split(",")
      .map((a) => a.trim()) || [];
  const favoriteProducts =
    html
      .match(/data-favorite-products="([^"]+)"/)?.[1]
      ?.split(",")
      .map((p) => p.trim()) || [];

  return {
    name: html.match(/data-name="([^"]+)"/)?.[1] || "",
    role: html.match(/data-role="([^"]+)"/)?.[1] || "",
    bio: html.match(/data-bio="([^"]+)"/)?.[1] || "",
    imageUrl: html.match(/data-image="([^"]+)"/)?.[1] || "",
    socialLinks: {
      instagram: html.match(/data-instagram="([^"]+)"/)?.[1] || "",
      youtube: html.match(/data-youtube="([^"]+)"/)?.[1] || "",
      tiktok: html.match(/data-tiktok="([^"]+)"/)?.[1] || "",
      website: html.match(/data-website="([^"]+)"/)?.[1] || "",
    },
    favoriteProducts,
    setupDetails: {
      deck: html.match(/data-setup-deck="([^"]+)"/)?.[1] || "",
      trucks: html.match(/data-setup-trucks="([^"]+)"/)?.[1] || "",
      wheels: html.match(/data-setup-wheels="([^"]+)"/)?.[1] || "",
      bearings: html.match(/data-setup-bearings="([^"]+)"/)?.[1] || "",
      grip: html.match(/data-setup-grip="([^"]+)"/)?.[1] || "",
    },
    achievements,
    yearsSkating: parseInt(
      html.match(/data-years-skating="(\d+)"/)?.[1] || "0"
    ),
    hometown: html.match(/data-hometown="([^"]+)"/)?.[1] || "",
  };
}

// Extract data from HTML comments (WordPress.com compatibility)
function extractFromComments(
  html: string,
  attribute: string
): string | string[] {
  const commentPattern = new RegExp(
    `<!--\\s*${attribute}="([^"]+)"\\s*-->`,
    "g"
  );
  const match = commentPattern.exec(html);

  if (match && attribute.includes("product-")) {
    // For product lists, return array
    return match[1].split(",").map((item) => item.trim());
  }

  // For single values, return string
  return match ? match[1] : "";
}

function extractProductSkus(html: string): string[] {
  const patterns = [
    /data-product-skus\s*=\s*"([^"]+)"/s,
    /data-product-skus\s*=\s*'([^']+)'/s,
    /data-product-skus\s*=\s*([^>\s]+)/s,
  ];

  for (const pattern of patterns) {
    const match = html.match(pattern);
    if (match) {
      return match[1].split(",").map((sku) => sku.trim());
    }
  }

  return [];
}

function extractProductIds(html: string): string[] {
  const patterns = [
    /data-product-ids\s*=\s*"([^"]+)"/s,
    /data-product-ids\s*=\s*'([^']+)'/s,
    /data-product-ids\s*=\s*([^>\s]+)/s,
  ];

  for (const pattern of patterns) {
    const match = html.match(pattern);
    if (match) {
      return match[1].split(",").map((id) => id.trim());
    }
  }

  return [];
}

// Parse content
const parsedBlocks = parseWordPressBlocks(content);
---

<!-- Render parsed blocks -->
<div>
  {
    parsedBlocks.map((block, index) => {
      const isLastBlock = index === parsedBlocks.length - 1;
      const blockClasses = isLastBlock ? "" : "mb-6";

      switch (block.type) {
        case "product-showcase":
          const hasProductData =
            (block.data.productSkus && block.data.productSkus.length > 0) ||
            (block.data.fallbackIds && block.data.fallbackIds.length > 0);

          return hasProductData ? (
            <div class={blockClasses}>
              <WPProductShowcase {...block.data} />
            </div>
          ) : (
            import.meta.env.DEV && (
              <div class="bg-yellow-50 border border-yellow-200 p-4">
                <p class="text-yellow-800">
                  Product Showcase: No product SKUs specified
                </p>
                <p class="text-xs text-yellow-600 mt-1">
                  Add data-product-skus="BRAND-PRODUCT-NAME,ANOTHER-SKU" or
                  data-product-ids="ID1,ID2" to configure
                </p>
              </div>
            )
          );

        case "event":
          return block.data.title && block.data.date ? (
            <div class={blockClasses}>
              <WPEventBlock {...block.data} />
            </div>
          ) : null;

        case "team-member":
          return block.data.name && block.data.role ? (
            <div class={blockClasses}>
              <WPTeamMember {...block.data} />
            </div>
          ) : null;

        case "jetpack-slideshow":
          return block.data.images && block.data.images.length > 0 ? (
            <div class={blockClasses}>
              <JetpackSlideshow {...block.data} />
            </div>
          ) : (
            <div
              class={`wp-content-block wordpress-content ${blockClasses}`}
              set:html={block.html}
            />
          );

        case "gallery":
          return block.data.images && block.data.images.length > 0 ? (
            <div class={blockClasses}>
              <WPGallery {...block.data} />
            </div>
          ) : (
            <div
              class={`wp-content-block wordpress-content ${blockClasses}`}
              set:html={block.html}
            />
          );

        case "quote":
          return block.data.quote ? (
            <div class={blockClasses}>
              <WPQuote {...block.data} />
            </div>
          ) : (
            <div
              class={`wp-content-block wordpress-content ${blockClasses}`}
              set:html={block.html}
            />
          );

        case "embed":
          return block.data.url ? (
            <div class={blockClasses}>
              <WPEmbed {...block.data} />
            </div>
          ) : (
            <div
              class={`wp-content-block wordpress-content ${blockClasses}`}
              set:html={block.html}
            />
          );

        case "image":
          return block.data.src ? (
            <div class={blockClasses}>
              <WPImage {...block.data} />
            </div>
          ) : (
            <div
              class={`wp-content-block wordpress-content ${blockClasses}`}
              set:html={block.html}
            />
          );

        case "columns":
          return block.data.columns && block.data.columns.length > 0 ? (
            <div class={blockClasses}>
              <WPColumns {...block.data} />
            </div>
          ) : (
            <div
              class={`wp-content-block wordpress-content ${blockClasses}`}
              set:html={block.html}
            />
          );

        case "button":
          return block.data.url && block.data.text ? (
            <div class={blockClasses}>
              <WPButton {...block.data} />
            </div>
          ) : (
            <div
              class={`wp-content-block wordpress-content ${blockClasses}`}
              set:html={block.html}
            />
          );

        default:
          return (
            <div
              class={`wp-content-block wordpress-content ${blockClasses}`}
              set:html={block.html}
            />
          );
      }
    })
  }
</div>
