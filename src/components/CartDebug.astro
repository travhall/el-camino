---
// src/components/CartDebug.astro
---

<div
  id="cart-debug-panel"
  class="fixed bottom-0 left-0 right-0 bg-elco-black-pearl-900/90 text-white shadow-lg z-50 backdrop-blur-sm border-t border-black-pearl-700"
>
  <!-- Header Bar -->
  <div
    class="flex items-center justify-between px-4 py-2 border-b border-black-pearl-700"
  >
    <h3 class="text-lg font-bold flex items-center gap-2">
      <span>Cart Debug Panel</span>
      <span
        class="text-xs bg-elco-black-pearl-700 text-white px-2 py-1 rounded"
      >
        Updates: <span id="update-count">0</span>
      </span>
    </h3>
    <button
      id="minimize-debug"
      class="text-sm px-3 py-1 bg-elco-black-pearl-700 text-white hover:bg-elco-black-pearl-600 rounded"
    >
      Toggle Panel
    </button>
  </div>

  <!-- Debug Content -->
  <div id="debug-content" class="p-4 overflow-x-auto">
    <div
      class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-4 max-w-[2000px] mx-auto"
    >
      <!-- Storage Section -->
      <div class="space-y-2">
        <div class="flex justify-between items-center">
          <span class="text-sm font-semibold">localStorage</span>
          <button
            id="show-storage"
            class="text-xs px-2 py-1 bg-elco-black-pearl-700 text-white hover:bg-elco-black-pearl-600 rounded"
          >
            Refresh
          </button>
        </div>
        <pre
          id="storage-data"
          class="text-xs bg-elco-black-pearl-800 text-white p-2 rounded overflow-auto h-48 font-mono">
        </pre>
      </div>

      <!-- DOM Status -->
      <div class="space-y-2">
        <div class="flex justify-between items-center">
          <span class="text-sm font-semibold">DOM Elements</span>
        </div>
        <pre
          id="dom-status"
          class="text-xs bg-elco-black-pearl-800 text-white p-2 rounded overflow-auto h-48 font-mono">
        </pre>
      </div>

      <!-- Cart Manager State -->
      <div class="space-y-2">
        <div class="flex justify-between items-center">
          <span class="text-sm font-semibold">Cart Manager State</span>
          <button
            id="show-cart"
            class="text-xs px-2 py-1 bg-elco-black-pearl-700 text-white hover:bg-elco-black-pearl-600 rounded"
          >
            Refresh
          </button>
        </div>
        <pre
          id="cart-data"
          class="text-xs bg-elco-black-pearl-800 text-white p-2 rounded overflow-auto h-48 font-mono">
        </pre>
      </div>

      <!-- Square Catalog & Actions -->
      <div class="space-y-2">
        <div class="flex justify-between items-center">
          <span class="text-sm font-semibold">Square Catalog</span>
          <div class="flex gap-1">
            <button
              id="list-catalog"
              class="text-xs px-2 py-1 bg-elco-black-pearl-700 hover:bg-elco-black-pearl-600 rounded"
            >
              List Items
            </button>
            <button
              id="fetch-categories"
              class="text-xs px-2 py-1 bg-elco-black-pearl-700 text-white hover:bg-elco-black-pearl-600 rounded"
            >
              Fetch Categories
            </button>
          </div>
        </div>
        <pre
          id="catalog-data"
          class="text-xs bg-elco-black-pearl-800 text-white p-2 rounded overflow-auto h-32 font-mono mb-4">
        </pre>

        <!-- Test Actions -->
        <div class="flex gap-2">
          <button
            id="add-test"
            class="flex-1 text-sm px-3 py-1.5 bg-elco-fig-leaf-600 hover:bg-elco-fig-leaf-500 text-white rounded"
          >
            Add Test Item
          </button>
          <button
            id="clear-cart"
            class="flex-1 text-sm px-3 py-1.5 bg-elco-sweet-tea-600 hover:bg-elco-sweet-tea-500 text-black-pearl-900 rounded"
          >
            Clear Cart
          </button>
          <button
            id="test-checkout"
            class="flex-1 text-sm px-3 py-1.5 bg-elco-black-pearl-600 hover:bg-elco-black-pearl-500 text-white rounded"
          >
            Test Checkout
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { cart } from "@/lib/cart";

  let updateCount = 0;

  const testProduct = {
    id: "TEST_ID_1",
    catalogObjectId: "TEST_CAT_1",
    variationId: "TEST_VAR_1",
    title: "Test Product",
    price: 50.0,
    quantity: 1,
    image: "data:image/svg+xml,%3Csvg%20width%3D%2248%22%20height%3D%2244%22%20fill%3D%22currentColor%22%3E%3Cpath%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%20d%3D%22M10.6848%2043.9997L10.5924%2044C8.15681%2044%206.34269%2043.4765%205.98588%2043.3736C3.89592%2042.7665%202.69408%2041.6367%202.46029%2041.4172C2.22808%2041.1939%201.04087%2040.0543%200.394889%2037.99C-0.250828%2035.9248%200.0772527%2033.5182%200.130018%2033.1324C0.501462%2030.4075%201.41988%2028.7811%201.61449%2028.4368C2.74136%2026.4667%204.18482%2025.404%204.46431%2025.1986C4.74773%2024.9897%206.20294%2023.9167%208.45877%2023.3094C8.84197%2023.207%2010.7284%2022.7023%2013.3855%2022.7023C15.0189%2022.7023%2016.0663%2022.835%2016.2978%2022.8643C17.5905%2023.0262%2018.4266%2023.2256%2018.609%2023.2689C19.6282%2023.5121%2020.2504%2023.7659%2020.3883%2023.8222L21.7626%2024.4025C21.4805%2026.4713%2021.1984%2028.5402%2020.9163%2030.6092H16.7502C16.1771%2029.638%2015.5068%2029.258%2015.3673%2029.1789C14.5719%2028.7202%2013.8003%2028.7202%2013.6585%2028.7202C13.532%2028.7202%2012.8834%2028.7202%2012.1095%2029.0172C11.9862%2029.0653%2011.3491%2029.3141%2010.7044%2029.8806C10.5973%2029.9746%2010.0595%2030.4475%209.60157%2031.2702C9.52426%2031.4072%209.14498%2032.0802%209.00157%2033.1324C8.97362%2033.3364%208.76491%2034.8681%208.95534%2035.7051C9.1455%2036.5413%209.5684%2036.9907%209.65356%2037.0814C9.73897%2037.17%2010.1749%2037.621%2010.9844%2037.8774L11.9475%2038.0788L13.461%2038.1216C13.6869%2038.1132%2014.9172%2038.0674%2016.2769%2037.8968C21.9175%2036.9146%2023.2285%2031.5305%2023.8883%2030.093L24.0205%2029.7727C24.6673%2028.2754%2025.4694%2027.3065%2025.6288%2027.1145L25.6327%2027.1096C25.9145%2026.7511%2027.3789%2024.8884%2030.3405%2023.8202L30.5158%2023.7547C30.7535%2023.6669%2031.9742%2023.2149%2033.5866%2022.9587C33.8515%2022.917%2035.2132%2022.7023%2036.9296%2022.7023H36.9432C38.6518%2022.7033%2039.9445%2022.9162%2040.2026%2022.9587C41.7597%2023.2151%2042.85%2023.6643%2043.0697%2023.7547C44.3804%2024.2946%2045.2221%2024.9938%2045.3874%2025.1311C45.5491%2025.2635%2046.4085%2025.9676%2047.0529%2027.128C47.6505%2028.2043%2047.8569%2029.5662%2047.8903%2029.7862C47.9311%2030.0507%2048.1202%2031.2807%2047.8817%2033.1324C47.5011%2036.0868%2046.4767%2037.7766%2046.2575%2038.1382C45.0053%2040.2163%2043.4393%2041.324%2043.1363%2041.5384C42.8367%2041.7505%2041.2678%2042.8607%2038.9342%2043.4276C38.5499%2043.5187%2036.5213%2044%2034.0255%2044C33.7661%2044%2032.4874%2044%2030.7893%2043.7785C29.2528%2043.576%2028.1605%2043.1141%2027.9442%2043.0227C26.6493%2042.4696%2025.7967%2041.7459%2025.6319%2041.6059L24.825%2040.7882C20.8256%2043.1895%2014.9423%2043.7247%2014.0492%2043.8062C13.7818%2043.8312%2012.0807%2043.9906%2010.6976%2043.9997L10.6846%2044L10.6848%2043.9997ZM34.5625%2029.0979C33.9377%2029.3141%2033.5626%2029.6171%2033.4868%2029.6782C33.0496%2030.0426%2032.8233%2030.4269%2032.7795%2030.5012L32.3344%2031.4322L32.0985%2032.3499L31.9778%2033.1324L31.8851%2033.9149L31.8689%2034.8459L32.0583%2035.7906C32.0807%2035.865%2032.2014%2036.2625%2032.5376%2036.6406C32.5979%2036.703%2032.8892%2037.0047%2033.4531%2037.2342C33.5631%2037.2777%2034.0307%2037.4636%2034.9167%2037.4636C35.8025%2037.4636%2036.3142%2037.2762%2036.4289%2037.2342C37.0688%2037.005%2037.4434%2036.7027%2037.5205%2036.6406C37.9732%2036.2627%2038.2009%2035.8675%2038.2453%2035.7906C38.5316%2035.3172%2038.6656%2034.9248%2038.6925%2034.8459L38.9302%2033.9149L39.0645%2033.1324L39.1436%2032.3499L39.158%2031.4322C39.1528%2031.3565%2039.1256%2030.9611%2038.9665%2030.5012C38.9433%2030.4281%2038.8213%2030.0423%2038.4697%2029.6782C38.4091%2029.6153%2038.1176%2029.3138%2037.5382%2029.0979C37.4298%2029.0538%2036.9743%2028.8687%2036.0888%2028.8687C35.2027%2028.8687%2034.6785%2029.0564%2034.5625%2029.0979ZM14.6691%2017.1565C18.2255%2017.1565%2020.2342%2015.9174%2020.6428%2015.28H23.018C22.7445%2017.2861%2022.471%2019.2919%2022.1975%2021.2977H3.18072C3.45421%2019.2919%203.7277%2017.2861%204.00119%2015.28L5.86912%2014.9334C6.25728%2012.0863%206.64544%209.23915%207.0336%206.39226L5.26049%206.04544C5.53502%204.03046%205.80982%202.01523%206.08462%200H25.1014C24.8279%202.00607%2024.5544%204.01187%2024.2809%206.01794H21.9909C21.6766%205.48319%2019.6622%204.14123%2016.4438%204.14123C16.2178%205.79742%2015.9921%207.45361%2015.7662%209.1098C17.2295%208.80932%2018.6928%208.5091%2020.1561%208.20862C19.933%209.84469%2019.71%2011.4808%2019.4869%2013.1171C18.1056%2012.8166%2016.7241%2012.5161%2015.3428%2012.2157C15.1181%2013.8627%2014.8935%2015.5097%2014.6691%2017.1565ZM36.497%2016.0893C37.1229%2016.0979%2042.4485%2016.1718%2044.0782%2014.1986H46.4733C46.1507%2016.5649%2045.8281%2018.9313%2045.5055%2021.2977H23.6344C23.9079%2019.2919%2024.1814%2017.2861%2024.4549%2015.28L26.3228%2014.9334C26.711%2012.0863%2027.0991%209.23915%2027.4873%206.39226L25.7179%206.01769C25.9913%204.01187%2026.2648%202.00607%2026.5383%200H40.5116C40.2381%202.00607%2039.9646%204.01187%2039.6911%206.01769L37.8193%206.39226C37.3786%209.62443%2036.9377%2012.8568%2036.497%2016.0893Z%22%2F%3E%3C%2Fsvg%3E",
  };

  const testCheckoutProduct = {
    id: "TEST_CHECKOUT_1",
    catalogObjectId: "YL5SQK7PLL4KVDQWGBKRQQZ4", // Example catalog item ID from Square
    variationId: "W6ZIJJWJKYBWXNYXFV2M2WOQ", // Same as catalogObjectId for simple items
    title: "Polar 8.0 Nick Boserio Fruit Lady Deck Test",
    price: 50.0,
    quantity: 1,
    image: "data:image/svg+xml,%3Csvg%20width%3D%2248%22%20height%3D%2244%22%20fill%3D%22currentColor%22%3E%3Cpath%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%20d%3D%22M10.6848%2043.9997L10.5924%2044C8.15681%2044%206.34269%2043.4765%205.98588%2043.3736C3.89592%2042.7665%202.69408%2041.6367%202.46029%2041.4172C2.22808%2041.1939%201.04087%2040.0543%200.394889%2037.99C-0.250828%2035.9248%200.0772527%2033.5182%200.130018%2033.1324C0.501462%2030.4075%201.41988%2028.7811%201.61449%2028.4368C2.74136%2026.4667%204.18482%2025.404%204.46431%2025.1986C4.74773%2024.9897%206.20294%2023.9167%208.45877%2023.3094C8.84197%2023.207%2010.7284%2022.7023%2013.3855%2022.7023C15.0189%2022.7023%2016.0663%2022.835%2016.2978%2022.8643C17.5905%2023.0262%2018.4266%2023.2256%2018.609%2023.2689C19.6282%2023.5121%2020.2504%2023.7659%2020.3883%2023.8222L21.7626%2024.4025C21.4805%2026.4713%2021.1984%2028.5402%2020.9163%2030.6092H16.7502C16.1771%2029.638%2015.5068%2029.258%2015.3673%2029.1789C14.5719%2028.7202%2013.8003%2028.7202%2013.6585%2028.7202C13.532%2028.7202%2012.8834%2028.7202%2012.1095%2029.0172C11.9862%2029.0653%2011.3491%2029.3141%2010.7044%2029.8806C10.5973%2029.9746%2010.0595%2030.4475%209.60157%2031.2702C9.52426%2031.4072%209.14498%2032.0802%209.00157%2033.1324C8.97362%2033.3364%208.76491%2034.8681%208.95534%2035.7051C9.1455%2036.5413%209.5684%2036.9907%209.65356%2037.0814C9.73897%2037.17%2010.1749%2037.621%2010.9844%2037.8774L11.9475%2038.0788L13.461%2038.1216C13.6869%2038.1132%2014.9172%2038.0674%2016.2769%2037.8968C21.9175%2036.9146%2023.2285%2031.5305%2023.8883%2030.093L24.0205%2029.7727C24.6673%2028.2754%2025.4694%2027.3065%2025.6288%2027.1145L25.6327%2027.1096C25.9145%2026.7511%2027.3789%2024.8884%2030.3405%2023.8202L30.5158%2023.7547C30.7535%2023.6669%2031.9742%2023.2149%2033.5866%2022.9587C33.8515%2022.917%2035.2132%2022.7023%2036.9296%2022.7023H36.9432C38.6518%2022.7033%2039.9445%2022.9162%2040.2026%2022.9587C41.7597%2023.2151%2042.85%2023.6643%2043.0697%2023.7547C44.3804%2024.2946%2045.2221%2024.9938%2045.3874%2025.1311C45.5491%2025.2635%2046.4085%2025.9676%2047.0529%2027.128C47.6505%2028.2043%2047.8569%2029.5662%2047.8903%2029.7862C47.9311%2030.0507%2048.1202%2031.2807%2047.8817%2033.1324C47.5011%2036.0868%2046.4767%2037.7766%2046.2575%2038.1382C45.0053%2040.2163%2043.4393%2041.324%2043.1363%2041.5384C42.8367%2041.7505%2041.2678%2042.8607%2038.9342%2043.4276C38.5499%2043.5187%2036.5213%2044%2034.0255%2044C33.7661%2044%2032.4874%2044%2030.7893%2043.7785C29.2528%2043.576%2028.1605%2043.1141%2027.9442%2043.0227C26.6493%2042.4696%2025.7967%2041.7459%2025.6319%2041.6059L24.825%2040.7882C20.8256%2043.1895%2014.9423%2043.7247%2014.0492%2043.8062C13.7818%2043.8312%2012.0807%2043.9906%2010.6976%2043.9997L10.6846%2044L10.6848%2043.9997ZM34.5625%2029.0979C33.9377%2029.3141%2033.5626%2029.6171%2033.4868%2029.6782C33.0496%2030.0426%2032.8233%2030.4269%2032.7795%2030.5012L32.3344%2031.4322L32.0985%2032.3499L31.9778%2033.1324L31.8851%2033.9149L31.8689%2034.8459L32.0583%2035.7906C32.0807%2035.865%2032.2014%2036.2625%2032.5376%2036.6406C32.5979%2036.703%2032.8892%2037.0047%2033.4531%2037.2342C33.5631%2037.2777%2034.0307%2037.4636%2034.9167%2037.4636C35.8025%2037.4636%2036.3142%2037.2762%2036.4289%2037.2342C37.0688%2037.005%2037.4434%2036.7027%2037.5205%2036.6406C37.9732%2036.2627%2038.2009%2035.8675%2038.2453%2035.7906C38.5316%2035.3172%2038.6656%2034.9248%2038.6925%2034.8459L38.9302%2033.9149L39.0645%2033.1324L39.1436%2032.3499L39.158%2031.4322C39.1528%2031.3565%2039.1256%2030.9611%2038.9665%2030.5012C38.9433%2030.4281%2038.8213%2030.0423%2038.4697%2029.6782C38.4091%2029.6153%2038.1176%2029.3138%2037.5382%2029.0979C37.4298%2029.0538%2036.9743%2028.8687%2036.0888%2028.8687C35.2027%2028.8687%2034.6785%2029.0564%2034.5625%2029.0979ZM14.6691%2017.1565C18.2255%2017.1565%2020.2342%2015.9174%2020.6428%2015.28H23.018C22.7445%2017.2861%2022.471%2019.2919%2022.1975%2021.2977H3.18072C3.45421%2019.2919%203.7277%2017.2861%204.00119%2015.28L5.86912%2014.9334C6.25728%2012.0863%206.64544%209.23915%207.0336%206.39226L5.26049%206.04544C5.53502%204.03046%205.80982%202.01523%206.08462%200H25.1014C24.8279%202.00607%2024.5544%204.01187%2024.2809%206.01794H21.9909C21.6766%205.48319%2019.6622%204.14123%2016.4438%204.14123C16.2178%205.79742%2015.9921%207.45361%2015.7662%209.1098C17.2295%208.80932%2018.6928%208.5091%2020.1561%208.20862C19.933%209.84469%2019.71%2011.4808%2019.4869%2013.1171C18.1056%2012.8166%2016.7241%2012.5161%2015.3428%2012.2157C15.1181%2013.8627%2014.8935%2015.5097%2014.6691%2017.1565ZM36.497%2016.0893C37.1229%2016.0979%2042.4485%2016.1718%2044.0782%2014.1986H46.4733C46.1507%2016.5649%2045.8281%2018.9313%2045.5055%2021.2977H23.6344C23.9079%2019.2919%2024.1814%2017.2861%2024.4549%2015.28L26.3228%2014.9334C26.711%2012.0863%2027.0991%209.23915%2027.4873%206.39226L25.7179%206.01769C25.9913%204.01187%2026.2648%202.00607%2026.5383%200H40.5116C40.2381%202.00607%2039.9646%204.01187%2039.6911%206.01769L37.8193%206.39226C37.3786%209.62443%2036.9377%2012.8568%2036.497%2016.0893Z%22%2F%3E%3C%2Fsvg%3E",
  };

  function setLoading(show: boolean) {
    const overlay = document.getElementById("loading-overlay");
    if (overlay) {
      if (show) {
        overlay.classList.remove("hidden");
        overlay.classList.add("flex");
      } else {
        overlay.classList.remove("flex");
        overlay.classList.add("hidden");
      }
    }
  }

  function updateStorageDisplay() {
    const display = document.getElementById("storage-data");
    const cartData = localStorage.getItem("cart");
    if (display) {
      try {
        display.textContent = JSON.stringify(
          JSON.parse(cartData || "null"),
          null,
          2
        );
      } catch (e) {
        display.textContent = "Error parsing cart data";
      }
    }
  }

  function updateDOMStatus() {
    const display = document.getElementById("dom-status");
    if (display) {
      const status = {
        cartContainer: !!document.getElementById("cart-container"),
        cartContent: !!document.getElementById("cart-content"),
        cartItems: !!document.getElementById("cart-items"),
        emptyCart: !!document.getElementById("empty-cart"),
        itemContainers: document.querySelectorAll("[data-item-container]")
          .length,
      };
      display.textContent = JSON.stringify(status, null, 2);
    }
  }

  function updateCartDisplay() {
    const display = document.getElementById("cart-data");
    if (display) {
      const state = {
        items: cart.getItems(),
        total: cart.getTotal(),
        itemCount: cart.getItemCount(),
      };
      display.textContent = JSON.stringify(state, null, 2);
    }
  }

  async function updateCatalogDisplay() {
    const display = document.getElementById("catalog-data");
    if (!display) return;

    try {
      display.textContent = "Loading catalog...";
      const response = await fetch("/api/list-catalog");
      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || "Failed to fetch catalog");
      }

      display.textContent = JSON.stringify(data.items, null, 2);
    } catch (error) {
      display.textContent = `Error: ${error instanceof Error ? error.message : "Unknown error"}`;
    }
  }

  // New function to fetch and display categories
  async function fetchCategoryData() {
    const display = document.getElementById("catalog-data");
    if (!display) return;

    try {
      display.textContent = "Loading category data...";
      const response = await fetch("/api/get-categories");

      if (!response.ok) {
        throw new Error(`Failed to fetch categories: ${response.status}`);
      }

      const data = await response.json();
      display.textContent = JSON.stringify(data, null, 2);

      // Log detailed information for analysis
      console.log("Complete category data:", data);

      if (data.categories && data.categories.length > 0) {
        console.log("Category structure sample:", data.categories[0]);
      }

      if (data.itemCategories && data.itemCategories.length > 0) {
        console.log("Item-category relationships:", data.itemCategories);
      }
    } catch (error) {
      display.textContent = `Error: ${error instanceof Error ? error.message : "Unknown error"}`;
      console.error("Category fetch error:", error);
    }
  }

  // Update the testSquareCheckout function in CartDebug.astro
  async function testSquareCheckout() {
    try {
      setLoading(true);
      cart.clear();
      cart.addItem(testCheckoutProduct);

      const items = cart.getItems();
      console.log("Starting checkout with items:", items);

      const response = await fetch("/api/create-checkout", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ items }),
      });

      const data = await response.json();
      console.log("Checkout response:", data);

      if (!response.ok) {
        throw new Error(
          data.error?.message || `Checkout failed: ${response.status}`
        );
      }

      if (!data.checkoutUrl) {
        throw new Error("No checkout URL returned");
      }

      const infoMessage = document.createElement("div");
      infoMessage.className =
        "fixed top-4 right-4 bg-elco-fig-leaf-500 text-white px-4 py-2 rounded-lg shadow-lg z-50";
      infoMessage.textContent = "Redirecting to Square Checkout...";
      document.body.appendChild(infoMessage);

      setTimeout(() => {
        window.location.href = data.checkoutUrl;
      }, 1500);
    } catch (error) {
      console.error("Test checkout error:", {
        message: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
      });

      const errorMessage = document.createElement("div");
      errorMessage.className =
        "fixed top-4 right-4 bg-elco-sweet-tea-500 text-white px-4 py-2 rounded-lg shadow-lg z-50";
      errorMessage.textContent =
        error instanceof Error ? error.message : "Test checkout failed";
      document.body.appendChild(errorMessage);

      setTimeout(() => {
        errorMessage.remove();
      }, 3000);
    } finally {
      setLoading(false);
    }
  }

  function updateDebugDisplay() {
    updateStorageDisplay();
    updateDOMStatus();
    updateCartDisplay();

    // Update counter
    updateCount++;
    const counter = document.getElementById("update-count");
    if (counter) {
      counter.textContent = updateCount.toString();
    }
  }

  // Show cart data
  document
    .getElementById("show-cart")
    ?.addEventListener("click", updateCartDisplay);

  // Show storage data
  document
    .getElementById("show-storage")
    ?.addEventListener("click", updateStorageDisplay);

  // Add test item
  document.getElementById("add-test")?.addEventListener("click", () => {
    cart.addItem(testProduct);
    console.log("Added test item");
    updateDebugDisplay();
  });

  // Clear cart
  document.getElementById("clear-cart")?.addEventListener("click", () => {
    cart.clear();
    console.log("Cart cleared");
    updateDebugDisplay();
  });

  // Test Square checkout
  document
    .getElementById("test-checkout")
    ?.addEventListener("click", testSquareCheckout);

  // Toggle debug panel
  document.getElementById("minimize-debug")?.addEventListener("click", () => {
    const content = document.getElementById("debug-content");
    if (content) {
      content.classList.toggle("hidden");
    }
  });

  // Listen for cart updates
  window.addEventListener("cartUpdated", () => {
    console.log("Cart updated event received");
    updateDebugDisplay();
  });

  // Initial display
  document.addEventListener("DOMContentLoaded", updateDebugDisplay);

  // Add click handlers for catalog and categories
  document
    .getElementById("list-catalog")
    ?.addEventListener("click", updateCatalogDisplay);

  document
    .getElementById("fetch-categories")
    ?.addEventListener("click", fetchCategoryData);
</script>
