---
// src/components/ProductGrid.astro - Enhanced with batch inventory optimization
import ProductCard from "./ProductCard.astro";
import ProductCardSkeleton from "./ProductCardSkeleton.astro";
import type { Product, ProductWithInventory } from "@/lib/square/types";
import { batchInventoryService } from "@/lib/square/batchInventory";

interface Props {
  products: Product[];
  allProducts?: Product[]; // All products for client-side filtering
  categoryPath?: string;
  skipInventoryCheck?: boolean;
}

const { products, allProducts, categoryPath = "", skipInventoryCheck = false } = Astro.props;

console.log(`[ProductGrid] skipInventoryCheck: ${skipInventoryCheck}, products.length: ${products.length}`);
console.log(`[ProductGrid] allProducts.length: ${allProducts ? allProducts.length : 0}`);

// Log data architecture setup
if (allProducts && allProducts.length > 0) {
  console.log(`[ProductGrid] Client-side filtering enabled with ${allProducts.length} total products`);
} else {
  console.log(`[ProductGrid] Server-side mode with ${products.length} products`);
}

// Batch inventory check for all products
let productsWithInventory: ProductWithInventory[] = products;

if (!skipInventoryCheck && products.length > 0) {
  console.log(`[ProductGrid] Starting batch inventory check for ${products.length} products`);
  try {
    const catalogObjectIds = products.map(p => p.catalogObjectId).filter(Boolean);
    console.log(`[ProductGrid] Catalog object IDs: ${catalogObjectIds.length}`);
    const inventoryMap = await batchInventoryService.getBatchInventoryStatus(catalogObjectIds);
    
    productsWithInventory = products.map(product => ({
      ...product,
      inventoryStatus: inventoryMap.get(product.catalogObjectId) || {
        isOutOfStock: false,
        hasLimitedOptions: false,
        totalQuantity: 0,
      }
    }));
  } catch (error) {
    console.error('Batch inventory check failed:', error);
    // Fallback: all products assumed in stock
    productsWithInventory = products.map(product => ({
      ...product,
      inventoryStatus: {
        isOutOfStock: false,
        hasLimitedOptions: false,
        totalQuantity: 0,
      }
    }));
  }
}
---

<style>
  /* SMOOTH FILTERING: Prevent layout shifts with opacity transitions */
  .product-card-wrapper {
    transition: opacity 0.3s ease, transform 0.3s ease, visibility 0.3s ease;
    will-change: opacity, transform;
  }
  
  .product-card-wrapper.opacity-0 {
    opacity: 0;
    transform: scale(0.95);
  }
  
  .product-card-wrapper.opacity-100 {
    opacity: 1;
    transform: scale(1);
  }
  
  /* MOBILE INFINITE SCROLL: Better spacing and loading states */
  @media (max-width: 1023px) {
    #infinite-scroll-trigger {
      margin: 1rem 0;
    }
  }
</style>

<div
  id="filterable-product-grid"
  class="grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-6 gap-2 lg:gap-1 transition-all duration-300"
  data-all-products={JSON.stringify(allProducts || [])}
  data-initial-products={JSON.stringify(productsWithInventory)}
  data-category-path={categoryPath}
  data-product-count={allProducts ? allProducts.length : productsWithInventory.length}
>
  {
    (allProducts && allProducts.length > 0 ? allProducts : productsWithInventory).map((product, index) => (
      <div
        class="product-card-wrapper grid opacity-100 scale-100"
        data-product-id={product.id}
        data-brand={product.brand || ""}
        data-initial-index={index}
        style={allProducts && allProducts.length > 0 && index >= 24 ? "display: none;" : ""}
      >
        <ProductCard 
          product={product} 
          priority={index < 8}
        />
      </div>
    ))
  }
</div>

<!-- DAY 1: Infinite Scroll Trigger (hidden until Day 2 activation) -->
<div 
  id="infinite-scroll-trigger" 
  class="col-span-full h-20 flex items-center justify-center"
  style="display: none;"
>
  <div class="flex items-center space-x-3">
    <div class="animate-spin rounded-full h-5 w-5 border-2 border-ui-accent border-t-transparent"></div>
    <span class="text-(--content-body) font-medium">Loading more products...</span>
  </div>
</div>

<!-- Enhanced Loading Overlay -->
<div
  id="filter-loading-overlay"
  class="hidden fixed inset-0 bg-(--surface-primary)/60 backdrop-blur-sm z-40 flex items-center justify-center"
>
  <div
    class="bg-(--surface-secondary) rounded-lg p-6 shadow-lg flex items-center space-x-3"
  >
    <div
      class="animate-spin rounded-full h-5 w-5 border-2 border-ui-accent border-t-transparent"
    >
    </div>
    <span class="text-(--content-body) font-medium">Applying filters...</span>
  </div>
</div>

<!-- Product Grid Loading Skeleton -->
<div
  id="product-grid-skeleton"
  class="hidden grid-cols-2 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-6 gap-1"
>
  {
    Array.from({ length: 12 }, (_, i) => (
      <ProductCardSkeleton priority={i < 8} />
    ))
  }
</div>

<!-- No Results State (for client-side mode only) -->
<div
  id="no-results"
  class="hidden flex-col justify-center items-center col-span-full py-16 text-center"
>
  <div class="text-center">
    <div class="text-6xl mb-4 opacity-20">üîç</div>
    <h2 class="text-2xl font-display font-bold text-(--content-heading) mb-2">
      No products found
    </h2>
    <p class="text-(--content-meta) mb-6 max-w-md mx-auto">
      Try adjusting your filters or browse all products.
    </p>
    <a
      href={categoryPath}
      class="font-sans font-semibold text-sm text-center lg:text-base py-2 px-3 lg:py-2 lg:px-4 border-2 rounded-[4px] text-(--ui-button-text) bg-(--ui-button-surface) border-(--ui-button-border) hover:bg-(--ui-button-surface)/75 outline-0 focus-visible:ring focus-visible:ring-offset-2 focus-visible:ring-(--ui-button-ring) transition-all ease-in-out duration-300"
    >
      Clear Filters
    </a>
  </div>
</div>

<script>
  // Handle filter state restoration
  document.addEventListener("astro:page-load", () => {
    const grid = document.getElementById("filterable-product-grid");
    const isFiltering = sessionStorage.getItem("filtering-in-progress");

    if (isFiltering && grid) {
      // Clear filtering state
      sessionStorage.removeItem("filtering-in-progress");
      
      // Ensure grid is visible
      grid.style.opacity = "1";
      grid.style.transition = "opacity 0.3s ease";
    }
    
    // CRITICAL FIX: Signal ProductGrid ready on Astro navigation
    console.log('[ProductGrid] üì° Emitting productGridReady on astro:page-load');
    document.dispatchEvent(new CustomEvent('productGridReady'));
  });

  // SOLUTION: Signal when ProductGrid is ready for filtering
  document.addEventListener("DOMContentLoaded", () => {
    const grid = document.getElementById("filterable-product-grid");
    if (grid && sessionStorage.getItem("filtering-in-progress")) {
      grid.style.opacity = "1";
      sessionStorage.removeItem("filtering-in-progress");
    }
    
    // Signal that ProductGrid is loaded and ready
    console.log('[ProductGrid] üì° Emitting productGridReady on DOMContentLoaded');
    document.dispatchEvent(new CustomEvent('productGridReady'));
  });
</script>
