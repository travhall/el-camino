---
// src/components/ProductGrid.astro - Enhanced with batch inventory optimization
import ProductCard from "./ProductCard.astro";
import ProductCardSkeleton from "./ProductCardSkeleton.astro";
import type { Product, ProductWithInventory } from "@/lib/square/types";
import { batchInventoryService } from "@/lib/square/batchInventory";

interface Props {
  products: Product[];
  paginationMode?: boolean;
  categoryPath?: string;
  skipInventoryCheck?: boolean;
}

const { products, paginationMode = false, categoryPath = "", skipInventoryCheck = false } = Astro.props;

console.log(`[ProductGrid] skipInventoryCheck: ${skipInventoryCheck}, products.length: ${products.length}`);

// Batch inventory check for all products
let productsWithInventory: ProductWithInventory[] = products;

if (!skipInventoryCheck && products.length > 0) {
  console.log(`[ProductGrid] Starting batch inventory check for ${products.length} products`);
  try {
    const catalogObjectIds = products.map(p => p.catalogObjectId).filter(Boolean);
    console.log(`[ProductGrid] Catalog object IDs: ${catalogObjectIds.length}`);
    const inventoryMap = await batchInventoryService.getBatchInventoryStatus(catalogObjectIds);
    
    productsWithInventory = products.map(product => ({
      ...product,
      inventoryStatus: inventoryMap.get(product.catalogObjectId) || {
        isOutOfStock: false,
        hasLimitedOptions: false,
        totalQuantity: 0,
      }
    }));
  } catch (error) {
    console.error('Batch inventory check failed:', error);
    // Fallback: all products assumed in stock
    productsWithInventory = products.map(product => ({
      ...product,
      inventoryStatus: {
        isOutOfStock: false,
        hasLimitedOptions: false,
        totalQuantity: 0,
      }
    }));
  }
}
---

<div
  id="filterable-product-grid"
  class="grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-6 gap-2 lg:gap-1 transition-all duration-300"
  data-products={JSON.stringify(productsWithInventory)}
  data-pagination-mode={paginationMode}
  data-category-path={categoryPath}
>
  {
    productsWithInventory.map((product, index) => (
      <div
        class="product-card-wrapper grid"
        data-product-id={product.id}
        data-brand={product.brand || ""}
      >
        <ProductCard 
          product={product} 
          priority={index < 8}
        />
      </div>
    ))
  }
</div>

<!-- Enhanced Loading Overlay -->
<div
  id="filter-loading-overlay"
  class="hidden fixed inset-0 bg-(--surface-primary)/60 backdrop-blur-sm z-40 flex items-center justify-center"
>
  <div
    class="bg-(--surface-secondary) rounded-lg p-6 shadow-lg flex items-center space-x-3"
  >
    <div
      class="animate-spin rounded-full h-5 w-5 border-2 border-ui-accent border-t-transparent"
    >
    </div>
    <span class="text-(--content-body) font-medium">Applying filters...</span>
  </div>
</div>

<!-- Product Grid Loading Skeleton -->
<div
  id="product-grid-skeleton"
  class="hidden grid-cols-2 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-6 gap-1"
>
  {
    Array.from({ length: 12 }, (_, i) => (
      <ProductCardSkeleton priority={i < 8} />
    ))
  }
</div>

<!-- No Results State (for client-side mode only) -->
<div
  id="no-results"
  class={`${paginationMode ? "hidden" : "flex flex-col"} justify-center items-center col-span-full py-16 text-center`}
>
  <div class="text-center">
    <div class="text-6xl mb-4 opacity-20">üîç</div>
    <h2 class="text-2xl font-display font-bold text-(--content-heading) mb-2">
      No products found
    </h2>
    <p class="text-(--content-meta) mb-6 max-w-md mx-auto">
      Try adjusting your filters or browse all products.
    </p>
    <a
      href={categoryPath}
      class="font-sans font-semibold text-sm text-center lg:text-base py-2 px-3 lg:py-2 lg:px-4 border-2 rounded-[4px] text-(--ui-button-text) bg-(--ui-button-surface) border-(--ui-button-border) hover:bg-(--ui-button-surface)/75 outline-0 focus-visible:ring focus-visible:ring-offset-2 focus-visible:ring-(--ui-button-ring) transition-all ease-in-out duration-300"
    >
      Clear Filters
    </a>
  </div>
</div>

<script>
  // Handle filter state restoration
  document.addEventListener("astro:page-load", () => {
    const grid = document.getElementById("filterable-product-grid");
    const isFiltering = sessionStorage.getItem("filtering-in-progress");

    if (isFiltering && grid) {
      // Clear filtering state
      sessionStorage.removeItem("filtering-in-progress");
      
      // Ensure grid is visible
      grid.style.opacity = "1";
      grid.style.transition = "opacity 0.3s ease";
    }
  });

  // Initialize loading states on page load
  document.addEventListener("DOMContentLoaded", () => {
    const grid = document.getElementById("filterable-product-grid");
    if (grid && sessionStorage.getItem("filtering-in-progress")) {
      grid.style.opacity = "1";
      sessionStorage.removeItem("filtering-in-progress");
    }
  });
</script>
