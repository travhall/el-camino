---
// src/components/ArticleCard.astro
import type {
  WordPressPost,
  ExtractedWordPressData,
  WordPressFallbackContent,
} from "@/lib/wordpress/types";
import { getDisplayCategory } from "@/lib/wordpress/types";
import { formatDate } from "@/utils/dates";
import { Image } from "astro:assets";
import Tag from "./Tag.astro";

interface Props {
  post: WordPressPost;
  featured?: boolean;
  priority?: boolean;
  embeddedData: ExtractedWordPressData;
  fallbackContent: WordPressFallbackContent;
}

const {
  post,
  featured = false,
  priority = false,
  embeddedData,
  fallbackContent,
} = Astro.props;

const imageUrl = embeddedData.featuredMedia?.source_url || "";

// Image dimensions based on card type
const imageWidth = featured ? 800 : 600;
const imageHeight = featured ? 533 : 400;

// Get the proper display category (non-Featured preferred, Featured as fallback)
const displayCategory = getDisplayCategory(post);

// Extract tags for display (limit to first 3 for space)
const displayTags = embeddedData.tags.slice(0, 3);
const remainingTagCount = embeddedData.tags.length - 3;
---

<!-- Entire card is now clickable -->
<a
  href={`/news/${post.slug}`}
  class:list={[
    "relative overflow-hidden bg-(--ui-card-surface) text-(--ui-card-text) border-(--ui-card-border) flex flex-col aspect-[3/4.5] md:aspect-auto col-span-full md:first-of-type:col-span-4 md:col-span-2 md:row-span-5 md:first-of-type:row-span-4 2xl:row-span-4 2xl:first-of-type:row-span-3 group",
    featured
      ? "banner-card contain-layout"
      : "article-card transition-all duration-300",
  ]}
  aria-label={`Read article: ${fallbackContent.title}`}
>
  <!-- Featured Image with Updated Hover Effects -->
  {
    imageUrl && (
      <Image
        src={imageUrl}
        alt={fallbackContent.imageAlt}
        width={imageWidth}
        height={imageHeight}
        format="avif"
        quality={85}
        class:list={[
          "object-cover w-full h-full transition-all duration-300",
          featured
            ? "opacity-90 lg:group-hover:scale-105"
            : "opacity-10 lg:group-hover:scale-105 lg:group-hover:opacity-95",
        ]}
        loading={priority ? "eager" : "lazy"}
        fetchpriority={priority ? "high" : "auto"}
        decoding={priority ? "sync" : "async"}
      />
    )
  }

  <!-- Content Overlay with Updated Hover Effects -->
  <div
    class:list={[
      "flex flex-col gap-2 px-6 py-12 xl:p-12 absolute bottom-0 m-1 bg-(--ui-card-surface)/00 backdrop-blur-0 lg:group-hover:bg-(--ui-card-surface)/80 lg:group-hover:backdrop-blur transition-all duration-300",
      featured &&
        "bg-(--ui-card-surface)/90 md:bg-(--ui-card-surface) first-of-type:m-0 md:border-t-4 md:border-l-4 md:border-(--ui-card-border) md:w-5/6 lg:w-2/3 right-0",
    ]}
  >
    <!-- Category Badge with Fixed Logic -->
    {
      displayCategory && (
        <span class="font-display font-semibold text-base tracking-wide uppercase text-(--ui-button-text) bg-(--ui-button-surface) px-2 py-0.5 rounded-xs mb-2 self-start">
          {displayCategory}
        </span>
      )
    }

    <!-- Article Title -->
    <h2
      class="font-display font-black text-6xl lg:text-5xl xl:text-6xl 2xl:text-7xl leading-[0.8] text-(--content-heading) mb-2"
      set:html={post.title.rendered}
    />

    <time datetime={post.date} class="text-xs">
      {formatDate(post.date)}
    </time>

    <!-- Article Excerpt -->
    <div
      class:list={[
        "text-sm md:text-base leading-snug text-(--content-body) mb-2",
        featured && "line-clamp-3 md:line-clamp-2",
        !featured && "line-clamp-3",
      ]}
      set:html={post.excerpt.rendered}
    />

    <!-- Article Tags with Independent Hover (using Tag component) -->
    {
      displayTags.length > 0 && (
        <div class="flex flex-wrap gap-2 mt-4 items-center">
          <h3 class="text-sm">Tagged:</h3>
          {displayTags.map((tag) => (
            <Tag tag={tag} variant="default" size="sm" clickable={false} />
          ))}
          {remainingTagCount > 0 && (
            <span class="inline-flex items-center px-3 py-1.5 rounded-full text-sm font-medium text-(--content-meta) bg-(--surface-secondary)">
              +{remainingTagCount} more
            </span>
          )}
        </div>
      )
    }
  </div>
</a>

<script>
  // Client-side fallback for failed images
  document.addEventListener("astro:page-load", () => {
    const images = document.querySelectorAll<HTMLImageElement>(
      "img[src*='wordpress'], img[src*='gravatar']"
    );

    images.forEach((img) => {
      img.addEventListener("error", () => {
        if (img.classList.contains("w-8")) {
          // Avatar image - hide it
          img.style.display = "none";
        } else {
          // Featured image - show placeholder
          img.style.opacity = "0.5";
          img.alt = "Article image not available";
        }
      });
    });
  });

  // Progressive enhancement for image loading (preserve existing functionality)
  document.addEventListener("astro:page-load", () => {
    const articleCards = document.querySelectorAll(
      "a.article-card, a.banner-card"
    );

    articleCards.forEach((card) => {
      const image = card.querySelector("img") as HTMLImageElement;

      if (image) {
        const handleImageLoad = () => {
          card.classList.add("loaded");
          image.removeEventListener("load", handleImageLoad);
        };

        const handleImageError = () => {
          card.setAttribute("data-error", "true");
          console.warn("Failed to load article image:", image.src);
          image.removeEventListener("error", handleImageError);
        };

        if (image.complete) {
          handleImageLoad();
        } else {
          image.addEventListener("load", handleImageLoad);
          image.addEventListener("error", handleImageError);
        }
      } else {
        card.classList.add("loaded");
      }
    });
  });

  // Intersection Observer for analytics (updated for link elements)
  document.addEventListener("astro:page-load", () => {
    if ("IntersectionObserver" in window) {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const card = entry.target as HTMLElement;
              const articleTitle = card
                .querySelector("h2")
                ?.textContent?.trim();

              if (
                articleTitle &&
                typeof window !== "undefined" &&
                (window as any).gtag
              ) {
                (window as any).gtag("event", "article_impression", {
                  article_title: articleTitle,
                  position: Array.from(
                    card.parentElement?.children || []
                  ).indexOf(card),
                });
              }

              observer.unobserve(card);
            }
          });
        },
        { threshold: 0.5, rootMargin: "0px 0px -100px 0px" }
      );

      document
        .querySelectorAll("a.article-card, a.banner-card")
        .forEach((card) => {
          observer.observe(card);
        });
    }
  });
</script>
