---
import { formatDate } from "@/utils/dates";
import type { Article } from "@/lib/types/content";
import Button from "./Button.astro";

interface Props {
  article: Article;
  featured?: boolean;
}

const { article, featured = false } = Astro.props;
const { title, description, slug, publishedAt, cover, author, category } =
  article;

function getImageUrl(path: string): string {
  const baseUrl = import.meta.env.STRAPI_URL;
  return path?.startsWith("http") ? path : `${baseUrl}${path}`;
}

const formattedDate = publishedAt ? formatDate(publishedAt) : null;
const articleUrl = `/article/${slug}`;
---

<article
  class:list={[
    "relative overflow-hidden bg-ui-card-surface text-ui-card-text border-ui-card-border hover:bg-ui-card-hover flex flex-col aspect-[3_/_4] md:aspect-auto col-span-full md:first-of-type:col-span-4 md:col-span-2 md:row-span-5 md:first-of-type:row-span-4 2xl:row-span-4 2xl:first-of-type:row-span-3 transition-all duration-300",
    featured ? "banner-card" : "article-card",
  ]}
  itemscope
  itemtype="http://schema.org/Article"
>
  <!-- Enhanced Schema.org metadata -->
  <meta itemprop="headline" content={title} />
  {description && <meta itemprop="description" content={description} />}
  {
    publishedAt && (
      <>
        <meta itemprop="datePublished" content={publishedAt} />
        <meta itemprop="dateModified" content={publishedAt} />
      </>
    )
  }
  {
    category && (
      <>
        <meta itemprop="articleSection" content={category.name} />
        <meta itemprop="keywords" content={category.name} />
      </>
    )
  }
  <meta itemprop="url" content={articleUrl} />

  <!-- Author metadata -->
  {
    author && (
      <div itemprop="author" itemscope itemtype="http://schema.org/Person">
        <meta itemprop="name" content={author.name} />
        {(author as any).email && (
          <meta itemprop="email" content={(author as any).email} />
        )}
        {author.avatar?.url && (
          <link itemprop="image" href={getImageUrl(author.avatar.url)} />
        )}
      </div>
    )
  }

  <!-- OpenGraph metadata -->
  <meta property="og:type" content="article" />
  <meta property="og:title" content={title} />
  <meta property="og:url" content={articleUrl} />
  {description && <meta property="og:description" content={description} />}
  {cover?.url && <meta property="og:image" content={getImageUrl(cover.url)} />}
  {
    publishedAt && (
      <meta property="article:published_time" content={publishedAt} />
    )
  }
  {category && <meta property="article:section" content={category.name} />}

  <!-- Twitter Card metadata -->
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content={title} />
  {description && <meta name="twitter:description" content={description} />}
  {cover?.url && <meta name="twitter:image" content={getImageUrl(cover.url)} />}

  <style>
    /* Enhanced fallback support */
    @supports not (selector(:has(*))) {
      .article-card button:hover ~ img {
        opacity: 0.5;
        transform: scale(1.05);
      }
    }

    /* Ensure transitions are disabled for users who prefer reduced motion */
    @media (prefers-reduced-motion: reduce) {
      .article-card img {
        transition: none !important;
      }
    }
  </style>

  {
    cover?.url && (
      <img
        src={getImageUrl(cover.url)}
        alt={cover.alternativeText || title}
        class:list={[
          "object-cover w-full h-full transition-all duration-300",
          featured
            ? ""
            : "opacity-10 [.article-card:has(button:hover)_&]:opacity-50 [.article-card:has(button:hover)_&]:scale-105",
        ]}
        loading="lazy"
        onload="this.classList.add('loaded')"
        onerror="this.style.display='none'"
        itemprop="image"
      />
    )
  }

  <div
    class:list={[
      "flex flex-col gap-4 lg:gap-6 px-6 py-12 xl:p-12 absolute bottom-0 w-full",
      featured &&
        "bg-ui-card-surface/90 md:bg-ui-card-surface md:border-t-4 md:border-l-4 md:border-ui-card-border md:w-2/3 right-0",
    ]}
  >
    {
      category && (
        <span class="font-display font-semibold text-base tracking-wide uppercase -mb-4 text-content-meta">
          {category.name}
        </span>
      )
    }

    <h2
      class="font-display font-black text-6xl md:text-5xl xl:text-6xl 3xl:text-7xl leading-[0.8] text-content-heading"
    >
      {title}
    </h2>

    {
      description && (
        <p class="text-sm md:text-base 2xl:text-lg leading-snug line-clamp-2 text-content-body">
          {description}
        </p>
      )
    }

    <div class="mt-auto flex flex-col gap-4">
      <a
        href={articleUrl}
        class="self-start focus:outline-none focus-visible:ring-2 focus-visible:ring-ui-button-ring"
        itemprop="url"
        aria-label={`Read full article: ${title}`}
      >
        <Button type="button" variant="primary" size="md">
          Read Article
        </Button>
      </a>
    </div>
  </div>
</article>
