---
// src/components/ArticleCard.astro - Minimal changes
import type {
  WordPressPost,
  ExtractedWordPressData,
  WordPressFallbackContent,
} from "@/lib/wordpress/types";
import Button from "./Button.astro";
import { formatDate } from "@/utils/dates";

interface Props {
  post: WordPressPost;
  featured?: boolean;
  priority?: boolean;
  // Minimal preprocessing - only the data extraction
  embeddedData: ExtractedWordPressData;
  fallbackContent: WordPressFallbackContent;
}

const {
  post,
  featured = false,
  priority = false,
  embeddedData,
  fallbackContent,
} = Astro.props;

// Use existing image URLs - no optimization to avoid 400 errors
const imageUrl = embeddedData.featuredMedia?.source_url || "";
const avatarUrl = embeddedData.author?.avatar_urls?.["96"] || "";

const linkText = `Read article: ${fallbackContent.title}`;
---

<!-- Keep ALL existing HTML and Tailwind classes unchanged -->
<article
  class:list={[
    "relative overflow-hidden bg-ui-card-surface text-ui-card-text border-ui-card-border flex flex-col aspect-[3/4.5] md:aspect-auto col-span-full md:first-of-type:col-span-4 md:col-span-2 md:row-span-5 md:first-of-type:row-span-4 2xl:row-span-4 2xl:first-of-type:row-span-3",
    featured
      ? "banner-card contain-layout"
      : "article-card transition-all duration-300",
  ]}
>
  <!-- Featured Image - using original URLs -->
  {
    imageUrl && (
      <img
        src={imageUrl}
        alt={fallbackContent.imageAlt}
        class:list={[
          "object-cover w-full h-full",
          featured
            ? ""
            : "transition-all duration-300 opacity-10 lg:[.article-card:has(button:hover)_&]:scale-105 lg:[.article-card:has(button:hover)_&]:opacity-95",
        ]}
        loading={priority ? "eager" : "lazy"}
        fetchpriority={priority ? "high" : "auto"}
        decoding={priority ? "sync" : "async"}
        width={featured ? 800 : 600}
        height={featured ? 533 : 400}
        onerror="this.style.opacity='0.5'"
      />
    )
  }

  <!-- Content Overlay -->
  <div
    class:list={[
      "flex flex-col gap-4 lg:gap-6 px-6 py-12 xl:p-12 absolute bottom-0 m-1 bg-ui-card-surface/00 backdrop-blur-0 lg:[.article-card:has(button:hover)_&]:bg-ui-card-surface/80 lg:[.article-card:has(button:hover)_&]:backdrop-blur transition-all duration-300",
      featured &&
        "bg-ui-card-surface/90 md:bg-ui-card-surface first-of-type:m-0 md:border-t-4 md:border-l-4 md:border-ui-card-border md:w-5/6 lg:w-2/3 right-0",
    ]}
  >
    <!-- Category Badge -->
    {
      embeddedData.category?.name && (
        <span class="font-display font-semibold text-base tracking-wide uppercase -mb-5 text-content-meta">
          {embeddedData.category.name}
        </span>
      )
    }

    <!-- Article Title -->
    <h2
      class="font-display font-black text-6xl md:text-4xl xl:text-6xl 3xl:text-7xl leading-[0.8] text-content-heading"
      set:html={post.title.rendered}
    />

    <!-- Article Excerpt -->
    <div
      class="text-sm md:text-base 2xl:text-lg leading-snug line-clamp-2 text-content-body"
      set:html={post.excerpt.rendered}
    />

    <!-- Author & Meta Information -->
    <div class="mt-auto flex flex-col gap-4">
      {
        embeddedData.author && (
          <div class="flex items-center text-content-meta">
            {avatarUrl && (
              <img
                src={avatarUrl}
                alt={`Profile photo of ${embeddedData.author.name}`}
                class="w-8 h-8 rounded-full mr-2 ring-2 ring-ui-card-border"
                loading="lazy"
                width="32"
                height="32"
                onerror="this.style.display='none'"
              />
            )}
            <span class="font-medium">{embeddedData.author.name}</span>
            <span class="mx-2">â€¢</span>
            <time datetime={post.date} class="text-sm">
              {formatDate(post.date)}
            </time>
          </div>
        )
      }

      <!-- Read More Button -->
      <a
        href={`/news/${post.slug}`}
        class="self-start focus:outline-none focus-visible:ring-2 focus-visible:ring-ui-button-ring"
        aria-label={linkText}
      >
        <Button type="button" variant="primary" size="md">
          Read More
          <span class="sr-only">: {fallbackContent.title}</span>
        </Button>
      </a>
    </div>
  </div>
</article>

<!-- Keep existing scripts unchanged -->
<script>
  // Progressive enhancement for image loading
  document.addEventListener("astro:page-load", () => {
    const articleCards = document.querySelectorAll("article");

    articleCards.forEach((card) => {
      const image = card.querySelector("img") as HTMLImageElement;

      if (image) {
        const handleImageLoad = () => {
          card.classList.add("loaded");
          image.removeEventListener("load", handleImageLoad);
        };

        const handleImageError = () => {
          card.setAttribute("data-error", "true");
          console.warn("Failed to load article image:", image.src);
          image.removeEventListener("error", handleImageError);
        };

        if (image.complete) {
          handleImageLoad();
        } else {
          image.addEventListener("load", handleImageLoad);
          image.addEventListener("error", handleImageError);
        }
      } else {
        card.classList.add("loaded");
      }
    });
  });

  // Intersection Observer for analytics (optional)
  document.addEventListener("astro:page-load", () => {
    if ("IntersectionObserver" in window) {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const card = entry.target as HTMLElement;
              const articleTitle = card
                .querySelector("h2")
                ?.textContent?.trim();

              if (
                articleTitle &&
                typeof window !== "undefined" &&
                (window as any).gtag
              ) {
                (window as any).gtag("event", "article_impression", {
                  article_title: articleTitle,
                  position: Array.from(
                    card.parentElement?.children || []
                  ).indexOf(card),
                });
              }

              observer.unobserve(card);
            }
          });
        },
        { threshold: 0.5, rootMargin: "0px 0px -100px 0px" }
      );

      document.querySelectorAll("article").forEach((card) => {
        observer.observe(card);
      });
    }
  });
</script>
