---
import { ClientRouter } from "astro:transitions";
import { SEOMetadata } from "astro-seo-metadata";
import { siteConfig, getStructuredData } from "@/lib/site-config";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import QuickView from "@/components/QuickView.astro";
import MiniCart from "@/components/MiniCart.astro";
import Modal from "@/components/Modal.astro";
import Notification from "@/components/Notification.astro";
import SpeculationRules from "@/components/SpeculationRules.astro";
import { detectDeviceFromUA } from "@/utils/device";
import "@/styles/global.css";
// import CartDebug from "@/components/CartDebug.astro";

interface Props {
  title: string;
  structuredData?: object;
  activeCategory?: string;
}

const { title, structuredData, activeCategory } = Astro.props;

// Device detection for conditional component loading
const userAgent = Astro.request.headers.get("user-agent") || "";
const deviceInfo = detectDeviceFromUA(userAgent);
const isDesktop = deviceInfo.isDesktop;

// Use site config for default SEO values
const seoData = {
  ...siteConfig.seo,
};

// Get structured data from site config
const orgSchema = getStructuredData();

// Get current path for context-aware prefetching
const currentPath = Astro.url.pathname;
const isHighTrafficPage = ["/", "/the-shop", "/news"].includes(currentPath);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>{title}</title>
    <script is:inline>
      (function () {
        const storedTheme = localStorage.getItem("theme");
        const systemPrefersDark = window.matchMedia(
          "(prefers-color-scheme: dark)"
        ).matches;
        const theme = storedTheme ?? (systemPrefersDark ? "dark" : "light");
        document.documentElement.classList.add(theme);
        document.documentElement.setAttribute("data-theme", theme);

        // ENHANCED: Font loading state management for View Transitions
        document.documentElement.classList.add("fonts-loading");

        // CRITICAL: Use localStorage instead of sessionStorage for View Transitions persistence
        const fontsLoaded = localStorage.getItem("fonts-loaded");
        const fontsCached =
          document.fonts.check("700 48px Alumni") &&
          document.fonts.check("400 16px Cabin");

        if (fontsLoaded === "true" || fontsCached) {
          // Fonts already loaded - prevent FOUT immediately
          document.documentElement.classList.remove("fonts-loading");
          document.documentElement.classList.add("fonts-loaded");
        } else {
          // Force preloaded fonts to load immediately (critical weights)
          Promise.all([
            document.fonts.load("700 48px Alumni"),
            document.fonts.load("600 24px Alumni"), // Navigation weight
            document.fonts.load("400 16px Cabin"),
            document.fonts.load("500 16px Cabin"), // Filter weights
          ])
            .then(() => {
              document.documentElement.classList.remove("fonts-loading");
              document.documentElement.classList.add("fonts-loaded");
              localStorage.setItem("fonts-loaded", "true");
            })
            .catch(() => {
              document.documentElement.classList.remove("fonts-loading");
              document.documentElement.classList.add("fonts-failed");
              // Still set loaded to prevent retries during View Transitions
              localStorage.setItem("fonts-loaded", "true");
            });
        }
      })();
    </script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <!-- Resource Hints for External Domains -->
    <!-- Square S3 Images -->
    <link
      rel="dns-prefetch"
      href="https://items-images-production.s3.us-west-2.amazonaws.com"
    />
    <link
      rel="preconnect"
      href="https://items-images-production.s3.us-west-2.amazonaws.com"
      crossorigin
    />

    <!-- WordPress Images -->
    <link rel="dns-prefetch" href="https://elcaminoskateshop.wordpress.com" />
    <link rel="preconnect" href="https://elcaminoskateshop.wordpress.com" />

    <!-- Square CDN -->
    <link rel="dns-prefetch" href="https://squarecdn.com" />
    <link rel="preconnect" href="https://web.squarecdn.com" crossorigin />

    <!-- OPTIMIZED: Font preloading for FOUT prevention during View Transitions -->
    <!-- Alumni Sans: Display font - high priority for headings/LCP -->
    <link
      rel="preload"
      href="/fonts/AlumniSans.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
      fetchpriority="high"
    />
    <!-- Cabin: Body font - standard priority -->
    <link
      rel="preload"
      href="/fonts/Cabin.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />

    <!-- Critical font styling to prevent FOUT on h1 elements cSpell:ignore Segoe -->
    <style>
      h1 {
        font-family:
          "Alumni",
          -apple-system,
          BlinkMacSystemFont,
          "Segoe UI",
          system-ui,
          sans-serif;
        font-synthesis: none;
        font-optical-sizing: auto;
      }

      /* Ensure proper font loading states */
      .fonts-loading h1 {
        visibility: hidden;
      }

      .fonts-loaded h1,
      .fonts-failed h1 {
        visibility: visible;
      }
    </style>

    <!-- OPTIMIZED: Resource hints for external domains -->
    <!-- High-priority: Early connection for critical resources -->
    <link
      rel="preconnect"
      href="https://items-images-production.s3.us-west-2.amazonaws.com"
      crossorigin
    />
    <link
      rel="preconnect"
      href="https://elcaminoskateshop.wordpress.com"
      crossorigin
    />
    <link rel="preconnect" href="https://connect.squareup.com" crossorigin />
    
    <!-- Medium-priority: DNS prefetch only -->
    <link rel="dns-prefetch" href="https://squarecdn.com" />

    <SEOMetadata
      siteName={siteConfig.name}
      title={seoData.defaultTitle}
      description={seoData.defaultDescription}
      image={seoData.defaultImage}
      favicon="/favicon.svg"
      author={siteConfig.name}
      copyright="ISC"
      astroSitemap={true}
      canonicalUrl={Astro.url.toString()}
      type="website"
      astroGenerator={true}
    />

    <!-- Speculation Rules for Advanced Prefetching -->
    <SpeculationRules currentPath={currentPath} eager={isHighTrafficPage} />

    <script
      is:inline
      type="application/ld+json"
      set:html={JSON.stringify(orgSchema)}
    />
    {
      structuredData && (
        <script
          is:inline
          type="application/ld+json"
          set:html={JSON.stringify(structuredData)}
        />
      )
    }

    <!-- Allow pages to inject custom head content -->
    <slot name="head" />

    <script is:inline>
      // Only load Square when needed (cart/product pages)
      if (
        window.location.pathname.includes("/cart") ||
        window.location.pathname.includes("/product") ||
        window.location.pathname.includes("/category") ||
        window.location.pathname.includes("/shop")
      ) {
        window.loadSquareScript = function () {
          if (!window.squareLoaded && !window.Square) {
            window.squareLoaded = true;
            const script = document.createElement("script");
            script.src = "https://sandbox.web.squarecdn.com/v1/square.js";
            script.async = true;
            document.head.appendChild(script);
            return new Promise((resolve) => {
              script.onload = resolve;
            });
          }
          return Promise.resolve();
        };
      }
    </script>

    <!-- Clean news parameters when outside news section -->
    <script is:inline>
      document.addEventListener("astro:page-load", function () {
        if (!window.location.pathname.startsWith("/news")) {
          const url = new URL(window.location);
          if (url.searchParams.has("view")) {
            url.searchParams.delete("view");
            const newUrl =
              url.pathname +
              (url.searchParams.toString()
                ? "?" + url.searchParams.toString()
                : "");
            if (newUrl !== window.location.pathname + window.location.search) {
              window.history.replaceState({}, "", newUrl);
            }
          }
        }
      });
    </script>

    <ClientRouter />
  </head>
  <body
    class="bg-(--surface-primary) text-(--content-body) grid grid-rows-[auto_1fr_auto] min-h-screen relative"
    data-active-category={activeCategory || ""}
  >
    <Header activeCategory={activeCategory} />
    <main
      class="bg-(--surface-primary) text-(--content-body) border-b-4 border-(--border-secondary) z-10 relative"
      id="main-content"
    >
      <slot />
    </main>
    <Footer />

    <!-- Desktop-only features -->
    {
      isDesktop && (
        <>
          <QuickView />
          <MiniCart />
        </>
      )
    }

    <Notification />
    <Modal />
    <!-- <CartDebug /> -->
    <div id="portal-root"></div>
    <!-- DISABLED: Redundant monitoring system - using PerformanceManager instead -->
    <!-- <script>
      import("@/utils/performanceMonitoring");
    </script> -->

    <!-- Global cleanup for news view parameters -->
    <script>
      document.addEventListener("astro:page-load", () => {
        // Clean view parameters from non-news forms
        const cleanNonNewsForms = () => {
          const forms = document.querySelectorAll("form");
          forms.forEach((form) => {
            const action = form.getAttribute("action") || "";
            const isNewsForm =
              !action ||
              action.startsWith("/news") ||
              window.location.pathname.startsWith("/news");

            if (!isNewsForm) {
              const viewInputs = form.querySelectorAll('input[name="view"]');
              viewInputs.forEach((input) => input.remove());
            }
          });
        };

        // Clean immediately and after any dynamic content loads
        cleanNonNewsForms();
        setTimeout(cleanNonNewsForms, 100);
      });

      // Clean view parameter from URLs when navigating away from news
      document.addEventListener("astro:before-swap", (e) => {
        if (
          window.location.pathname.startsWith("/news") &&
          e.to &&
          !e.to.pathname.startsWith("/news")
        ) {
          const currentParams = new URLSearchParams(window.location.search);
          if (currentParams.has("view")) {
            currentParams.delete("view");
            const cleanUrl =
              e.to.pathname +
              (currentParams.toString() ? "?" + currentParams.toString() : "");
            window.history.replaceState({}, "", cleanUrl);
          }
        }
      });
    </script>

    <!-- PHASE 1: Device Detection & Conditional Loading -->
    <script>
      // Initialize device-aware feature loading system
      import("../scripts/initDeviceDetection");
    </script>

    <!-- Performance Monitoring & PWA Initialization -->
    <script>
      // Initialize Performance Manager
      import("../lib/performance/PerformanceManager")
        .then(({ performanceManager }) => {
          // Set reporting endpoint if available
          if (import.meta.env.MONITORING_ENDPOINT) {
            performanceManager.setReportingEndpoint(
              import.meta.env.MONITORING_ENDPOINT
            );
          }

          if (import.meta.env.DEV) {
            // console.log("[Layout] Performance monitoring initialized");

            // Log initial metrics in development (reduced frequency)
            setTimeout(() => {
              const health = performanceManager.getHealthScore();
              // console.log(
              //   "[Performance] Health Score:",
              //   health.score,
              //   "Issues:",
              //   health.issues
              // );
            }, 10000); // Increased from 5 seconds to 10 seconds
          }

          // Simple performance metrics for dashboard
          setTimeout(() => {
            const metrics = performanceManager.getAllMetrics();

            // Store basic metrics for admin dashboard
            if (metrics.coreWebVitals.lcp) {
              localStorage.setItem(
                "webVitalsData",
                JSON.stringify({
                  timestamp: Date.now(),
                  lcp: metrics.coreWebVitals.lcp,
                  cls: metrics.coreWebVitals.cls,
                  inp: metrics.coreWebVitals.inp,
                  url: window.location.pathname,
                })
              );
            }
          }, 10000);
        })
        .catch((error) => {
          console.warn(
            "[Layout] Performance monitoring failed to load:",
            error
          );
        });

      // Critical performance optimizations for immediate execution
      (function () {
        if (
          "HTMLCanvasElement" in window &&
          !sessionStorage.getItem("imageFormatSupport")
        ) {
          import("../lib/image/enhanced-optimizer").then(
            ({ EnhancedImageOptimizer }) => {
              EnhancedImageOptimizer.detectFormatSupport();
            }
          );
        }

        if (window.innerWidth <= 1024) {
          import("../lib/performance/mobileOptimization").then(
            ({ initMobileOptimization }) => {
              initMobileOptimization();
            }
          );
        }

        if (import.meta.env.DEV) {
          // console.log(
          //   "[Layout] Performance optimizations active: Enhanced images, Mobile optimization"
          // );
        }
      })();
    </script>
  </body>
</html>
