---
import ClientRouter from "astro/components/ClientRouter.astro";
import { SEOMetadata } from "astro-seo-metadata";
import { siteConfig, getStructuredData } from "@/lib/site-config";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import QuickView from "@/components/QuickView.astro";
import MiniCart from "@/components/MiniCart.astro";
import Modal from "@/components/Modal.astro";
import Notification from "@/components/Notification.astro";
import SpeculationRules from "@/components/SpeculationRules.astro";
import ConnectionAwareExperience from "@/components/ConnectionAwareExperience.astro";
import ConnectionStatus from "@/components/ConnectionStatus.astro";
import { pwaInfo } from "virtual:pwa-info";
import "@/styles/global.css";
// import CartDebug from "@/components/CartDebug.astro";

interface Props {
  title: string;
  structuredData?: object;
}

const { title, structuredData } = Astro.props;

// Use site config for default SEO values
const seoData = {
  ...siteConfig.seo,
};

// Get structured data from site config
const orgSchema = getStructuredData();

// Get current path for context-aware prefetching
const currentPath = Astro.url.pathname;
const isHighTrafficPage = ["/", "/the-shop", "/news"].includes(currentPath);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>{title}</title>
    <script is:inline>
      (function () {
        const storedTheme = localStorage.getItem("theme");
        const systemPrefersDark = window.matchMedia(
          "(prefers-color-scheme: dark)"
        ).matches;
        const theme = storedTheme ?? (systemPrefersDark ? "dark" : "light");
        document.documentElement.classList.add(theme);
        document.documentElement.setAttribute("data-theme", theme);
      })();
    </script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <!-- PWA Meta Tags -->
    <meta name="theme-color" content="#1a1a1a" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <link rel="apple-touch-icon" href="/pwa-icon.svg" />
    <link rel="mask-icon" href="/pwa-icon.svg" color="#1a1a1a" />
    
    <!-- PWA Manifest -->
    {pwaInfo && <Fragment set:html={pwaInfo.webManifest.linkTag} />}

    <!-- Enhanced font preloading with fetchpriority -->
    <link
      rel="preload"
      href="/fonts/AlumniSans.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
      fetchpriority="high"
    />
    <link
      rel="preload"
      href="/fonts/Cabin.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
      fetchpriority="high"
    />

    <SEOMetadata
      siteName={siteConfig.name}
      title={seoData.defaultTitle}
      description={seoData.defaultDescription}
      image={seoData.defaultImage}
      favicon="/favicon.svg"
      author={siteConfig.name}
      copyright="ISC"
      astroSitemap={true}
      canonicalUrl={Astro.url.toString()}
      type="website"
      astroGenerator={true}
    />

    <!-- Enhanced preconnect strategy -->
    <link
      rel="preconnect"
      href="https://elcaminoskateshop.wordpress.com"
      crossorigin
    />
    <link rel="preconnect" href="https://connect.squareup.com" crossorigin />
    <link rel="dns-prefetch" href="https://elcaminoskateshop.wordpress.com" />
    <link rel="dns-prefetch" href="https://connect.squareup.com" />
    <link rel="dns-prefetch" href="https://fonts.googleapis.com" />

    <!-- Speculation Rules for Advanced Prefetching -->
    <SpeculationRules currentPath={currentPath} eager={isHighTrafficPage} />

    <script type="application/ld+json" set:html={JSON.stringify(orgSchema)} />
    {
      structuredData && (
        <script
          type="application/ld+json"
          set:html={JSON.stringify(structuredData)}
        />
      )
    }

    <script is:inline>
      // Only load Square when needed (cart/product pages)
      if (
        window.location.pathname.includes("/cart") ||
        window.location.pathname.includes("/product") ||
        window.location.pathname.includes("/category") ||
        window.location.pathname.includes("/shop")
      ) {
        window.loadSquareScript = function () {
          if (!window.squareLoaded && !window.Square) {
            window.squareLoaded = true;
            const script = document.createElement("script");
            script.src = "https://sandbox.web.squarecdn.com/v1/square.js";
            script.async = true;
            document.head.appendChild(script);
            return new Promise((resolve) => {
              script.onload = resolve;
            });
          }
          return Promise.resolve();
        };
      }
    </script>

    <!-- Clean news parameters when outside news section with NavigationManager coordination -->
    <script is:inline>
      document.addEventListener("astro:page-load", function () {
        if (!window.location.pathname.startsWith("/news")) {
          const url = new URL(window.location);
          if (url.searchParams.has("view")) {
            url.searchParams.delete("view");
            const newUrl =
              url.pathname +
              (url.searchParams.toString()
                ? "?" + url.searchParams.toString()
                : "");
            if (newUrl !== window.location.pathname + window.location.search) {
              window.history.replaceState({}, "", newUrl);
            }
          }
        }
      });
    </script>

    <!-- TEMPORARILY DISABLED VIEW TRANSITIONS FOR NAVIGATION TESTING -->
    <!-- <ClientRouter /> -->
  </head>
  <body
    class="bg-(--surface-primary) text-(--content-body) grid grid-rows-[auto_1fr_auto] min-h-screen relative"
  >
    <ConnectionAwareExperience>
      <Header />
      <main
        class="bg-(--surface-primary) text-(--content-body) border-b-4 border-(--border-secondary) z-10 relative"
        id="main-content"
      >
        <slot />
      </main>
      <Footer />
    </ConnectionAwareExperience>
    
    <ConnectionStatus position="top" />
    <QuickView />
    <MiniCart />
    <Notification />
    <Modal />
    <!-- <CartDebug /> -->
    <div id="portal-root"></div>
    <script>
      import("@/utils/performanceMonitoring");
    </script>

    <!-- Global cleanup for news view parameters -->
    <script>
      document.addEventListener("astro:page-load", () => {
        // Clean view parameters from non-news forms
        const cleanNonNewsForms = () => {
          const forms = document.querySelectorAll("form");
          forms.forEach((form) => {
            const action = form.getAttribute("action") || "";
            const isNewsForm =
              !action ||
              action.startsWith("/news") ||
              window.location.pathname.startsWith("/news");

            if (!isNewsForm) {
              const viewInputs = form.querySelectorAll('input[name="view"]');
              viewInputs.forEach((input) => input.remove());
            }
          });
        };

        // Clean immediately and after any dynamic content loads
        cleanNonNewsForms();
        setTimeout(cleanNonNewsForms, 100);
      });

      // Clean view parameter from URLs when navigating away from news with NavigationManager coordination
      document.addEventListener("astro:before-swap", (e) => {
        if (
          window.location.pathname.startsWith("/news") &&
          e.to &&
          !e.to.pathname.startsWith("/news")
        ) {
          const currentParams = new URLSearchParams(window.location.search);
          if (currentParams.has("view")) {
            currentParams.delete("view");
            const cleanUrl =
              e.to.pathname +
              (currentParams.toString() ? "?" + currentParams.toString() : "");
            window.history.replaceState({}, "", cleanUrl);
          }
        }
      });
    </script>

    <!-- Performance Monitoring & PWA Initialization -->
    <script>
      // Initialize Performance Manager
      import('../lib/performance/PerformanceManager').then(({ performanceManager }) => {
        // Set reporting endpoint if available
        if (import.meta.env.MONITORING_ENDPOINT) {
          performanceManager.setReportingEndpoint(import.meta.env.MONITORING_ENDPOINT);
        }
        
        if (import.meta.env.DEV) {
          console.log('[Layout] Performance monitoring initialized');
          
          // Log initial metrics in development
          setTimeout(() => {
            const health = performanceManager.getHealthScore();
            console.log('[Performance] Health Score:', health.score, 'Issues:', health.issues);
          }, 5000);
        }
      }).catch(error => {
        console.warn('[Layout] Performance monitoring failed to load:', error);
      });

      // Initialize PWA
      import('../pwa').then(({ pwaManager }) => {
        if (import.meta.env.DEV) {
          console.log('[Layout] PWA initialized, installed:', pwaManager.isInstalled());
        }
      }).catch(error => {
        console.warn('[Layout] PWA failed to load:', error);
      });

      // Critical performance optimizations for immediate execution
      (function() {
        // Early image format detection and caching
        if ('HTMLCanvasElement' in window && !sessionStorage.getItem('imageFormatSupport')) {
          import('../lib/image/enhanced-optimizer').then(({ EnhancedImageOptimizer }) => {
            EnhancedImageOptimizer.detectFormatSupport();
          });
        }

        // Initialize mobile optimization if needed
        if (window.innerWidth <= 1024) {
          import('../lib/performance/mobileOptimization').then(({ initMobileOptimization }) => {
            initMobileOptimization();
          });
        }
      })();
    </script>
  </body>
</html>
