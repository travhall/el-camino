---
import { ClientRouter } from "astro:transitions";
import { SEOMetadata } from "astro-seo-metadata";
import { siteConfig, getStructuredData } from "@/lib/site-config";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import QuickView from "@/components/QuickView.astro";
import MiniCart from "@/components/MiniCart.astro";
import Modal from "@/components/Modal.astro";
import Notification from "@/components/Notification.astro";
import SpeculationRules from "@/components/SpeculationRules.astro";
import "@/styles/global.css";
// import CartDebug from "@/components/CartDebug.astro";

interface Props {
  title: string;
  structuredData?: object;
}

const { title, structuredData } = Astro.props;

// Use site config for default SEO values
const seoData = {
  ...siteConfig.seo,
};

// Get structured data from site config
const orgSchema = getStructuredData();

// Get current path for context-aware prefetching
const currentPath = Astro.url.pathname;
const isHighTrafficPage = ["/", "/the-shop", "/news"].includes(currentPath);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>{title}</title>
    <script is:inline>
      (function () {
        const storedTheme = localStorage.getItem("theme");
        const systemPrefersDark = window.matchMedia(
          "(prefers-color-scheme: dark)"
        ).matches;
        const theme = storedTheme ?? (systemPrefersDark ? "dark" : "light");
        document.documentElement.classList.add(theme);
        document.documentElement.setAttribute("data-theme", theme);
        
        // Font loading state management
        document.documentElement.classList.add("fonts-loading");
        
        // Check if fonts are already cached
        if (sessionStorage.getItem("fonts-loaded")) {
          document.documentElement.classList.remove("fonts-loading");
          document.documentElement.classList.add("fonts-loaded");
        } else {
          // Load fonts and update state
          Promise.all([
            document.fonts.load("700 48px Alumni"),
            document.fonts.load("400 16px Cabin")
          ]).then(() => {
            document.documentElement.classList.remove("fonts-loading");
            document.documentElement.classList.add("fonts-loaded");
            sessionStorage.setItem("fonts-loaded", "true");
          }).catch(() => {
            document.documentElement.classList.remove("fonts-loading");
            document.documentElement.classList.add("fonts-failed");
          });
        }
      })();
    </script>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <!-- Enhanced font preloading with fetchpriority -->
    <link
      rel="preload"
      href="/fonts/AlumniSans.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
      fetchpriority="high"
    />
    <link
      rel="preload"
      href="/fonts/Cabin.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
      fetchpriority="high"
    />

    <!-- Critical font styling to prevent FOUT on h1 elements -->
    <style>
      /* Critical inline fonts for h1 elements - prevents FOUT */
      h1 {
        font-family: "Alumni", -apple-system, BlinkMacSystemFont, "Segoe UI", system-ui, sans-serif;
        font-synthesis: none;
        font-optical-sizing: auto;
      }
      
      /* Ensure proper font loading states */
      .fonts-loading h1 {
        visibility: hidden;
      }
      
      .fonts-loaded h1,
      .fonts-failed h1 {
        visibility: visible;
      }
    </style>

    <!-- Performance optimizations -->
    <link
      rel="preconnect"
      href="https://elcaminoskateshop.wordpress.com"
      crossorigin
    />
    <link rel="preconnect" href="https://connect.squareup.com" crossorigin />
    <link rel="preconnect" href="https://squarecdn.com" crossorigin />
    <link rel="dns-prefetch" href="https://elcaminoskateshop.wordpress.com" />
    <link rel="dns-prefetch" href="https://connect.squareup.com" />
    <link rel="dns-prefetch" href="https://squarecdn.com" />

    <SEOMetadata
      siteName={siteConfig.name}
      title={seoData.defaultTitle}
      description={seoData.defaultDescription}
      image={seoData.defaultImage}
      favicon="/favicon.svg"
      author={siteConfig.name}
      copyright="ISC"
      astroSitemap={true}
      canonicalUrl={Astro.url.toString()}
      type="website"
      astroGenerator={true}
    />

    <!-- Enhanced preconnect strategy -->
    <link
      rel="preconnect"
      href="https://elcaminoskateshop.wordpress.com"
      crossorigin
    />
    <link rel="preconnect" href="https://connect.squareup.com" crossorigin />
    <link rel="dns-prefetch" href="https://elcaminoskateshop.wordpress.com" />
    <link rel="dns-prefetch" href="https://connect.squareup.com" />
    <link rel="dns-prefetch" href="https://fonts.googleapis.com" />

    <!-- Speculation Rules for Advanced Prefetching -->
    <SpeculationRules currentPath={currentPath} eager={isHighTrafficPage} />

    <script
      is:inline
      type="application/ld+json"
      set:html={JSON.stringify(orgSchema)}
    />
    {
      structuredData && (
        <script
          is:inline
          type="application/ld+json"
          set:html={JSON.stringify(structuredData)}
        />
      )
    }

    <script is:inline>
      // Only load Square when needed (cart/product pages)
      if (
        window.location.pathname.includes("/cart") ||
        window.location.pathname.includes("/product") ||
        window.location.pathname.includes("/category") ||
        window.location.pathname.includes("/shop")
      ) {
        window.loadSquareScript = function () {
          if (!window.squareLoaded && !window.Square) {
            window.squareLoaded = true;
            const script = document.createElement("script");
            script.src = "https://sandbox.web.squarecdn.com/v1/square.js";
            script.async = true;
            document.head.appendChild(script);
            return new Promise((resolve) => {
              script.onload = resolve;
            });
          }
          return Promise.resolve();
        };
      }
    </script>

    <!-- Clean news parameters when outside news section -->
    <script is:inline>
      document.addEventListener("astro:page-load", function () {
        if (!window.location.pathname.startsWith("/news")) {
          const url = new URL(window.location);
          if (url.searchParams.has("view")) {
            url.searchParams.delete("view");
            const newUrl =
              url.pathname +
              (url.searchParams.toString()
                ? "?" + url.searchParams.toString()
                : "");
            if (newUrl !== window.location.pathname + window.location.search) {
              window.history.replaceState({}, "", newUrl);
            }
          }
        }
      });
    </script>

    <ClientRouter />
  </head>
  <body
    class="bg-(--surface-primary) text-(--content-body) grid grid-rows-[auto_1fr_auto] min-h-screen relative"
  >
    <Header />
    <main
      class="bg-(--surface-primary) text-(--content-body) border-b-4 border-(--border-secondary) z-10 relative"
      id="main-content"
    >
      <slot />
    </main>
    <Footer />

    <QuickView />
    <MiniCart />
    <Notification />
    <Modal />
    <!-- <CartDebug /> -->
    <div id="portal-root"></div>
    <!-- DISABLED: Redundant monitoring system - using PerformanceManager instead -->
    <!-- <script>
      import("@/utils/performanceMonitoring");
    </script> -->

    <!-- Global cleanup for news view parameters -->
    <script>
      document.addEventListener("astro:page-load", () => {
        // Clean view parameters from non-news forms
        const cleanNonNewsForms = () => {
          const forms = document.querySelectorAll("form");
          forms.forEach((form) => {
            const action = form.getAttribute("action") || "";
            const isNewsForm =
              !action ||
              action.startsWith("/news") ||
              window.location.pathname.startsWith("/news");

            if (!isNewsForm) {
              const viewInputs = form.querySelectorAll('input[name="view"]');
              viewInputs.forEach((input) => input.remove());
            }
          });
        };

        // Clean immediately and after any dynamic content loads
        cleanNonNewsForms();
        setTimeout(cleanNonNewsForms, 100);
      });

      // Clean view parameter from URLs when navigating away from news
      document.addEventListener("astro:before-swap", (e) => {
        if (
          window.location.pathname.startsWith("/news") &&
          e.to &&
          !e.to.pathname.startsWith("/news")
        ) {
          const currentParams = new URLSearchParams(window.location.search);
          if (currentParams.has("view")) {
            currentParams.delete("view");
            const cleanUrl =
              e.to.pathname +
              (currentParams.toString() ? "?" + currentParams.toString() : "");
            window.history.replaceState({}, "", cleanUrl);
          }
        }
      });
    </script>

    <!-- Performance Monitoring & PWA Initialization -->
    <script>
      // Initialize Performance Manager
      import("../lib/performance/PerformanceManager")
        .then(({ performanceManager }) => {
          // Set reporting endpoint if available
          if (import.meta.env.MONITORING_ENDPOINT) {
            performanceManager.setReportingEndpoint(
              import.meta.env.MONITORING_ENDPOINT
            );
          }

          if (import.meta.env.DEV) {
            console.log("[Layout] Performance monitoring initialized");

            // Log initial metrics in development (reduced frequency)
            setTimeout(() => {
              const health = performanceManager.getHealthScore();
              console.log(
                "[Performance] Health Score:",
                health.score,
                "Issues:",
                health.issues
              );
            }, 10000); // Increased from 5 seconds to 10 seconds
          }

          // PHASE 1: Baseline measurement collection (Week 1) - Non-blocking
          setTimeout(() => {
            const metrics = performanceManager.getAllMetrics();
            
            // Only log in dev mode to reduce overhead
            if (import.meta.env.DEV) {
              console.log('[Baseline] Core Web Vitals:', metrics.coreWebVitals);
            }
            
            // Send to analytics only if metrics are available and gtag exists
            if (metrics.coreWebVitals.lcp && metrics.coreWebVitals.cls && typeof gtag !== 'undefined') {
              gtag('event', 'performance_baseline', {
                lcp: metrics.coreWebVitals.lcp,
                cls: metrics.coreWebVitals.cls,
                page_path: window.location.pathname
              });
            }

            // Non-blocking storage with error handling
            requestIdleCallback(() => {
              try {
                const baselineKey = `baseline_${new Date().toISOString().split('T')[0]}`;
                localStorage.setItem(baselineKey, JSON.stringify({
                  timestamp: Date.now(),
                  metrics: metrics.coreWebVitals,
                  url: window.location.pathname
                }));
              } catch (e) {
                // Silently fail - don't block user experience
                console.warn('[Baseline] Storage failed:', e);
              }
            });
          }, 30000); // Increased to 30 seconds to avoid blocking initial load

          // PHASE 3: Real-time cache monitoring (Week 3) - Non-blocking
          requestIdleCallback(() => {
            import("../scripts/cache-monitor.ts")
              .then(() => {
                if (import.meta.env.DEV) {
                  console.log("[Layout] Phase 3 cache monitoring initialized");
                }
              })
              .catch((error) => {
                console.warn("[Layout] Cache monitoring failed to load:", error);
              });
          });
        })
        .catch((error) => {
          console.warn(
            "[Layout] Performance monitoring failed to load:",
            error
          );
        });

      // Critical performance optimizations for immediate execution
      (function () {
        if ('HTMLCanvasElement' in window && !sessionStorage.getItem('imageFormatSupport')) {
          import('../lib/image/enhanced-optimizer').then(({ EnhancedImageOptimizer }) => {
            EnhancedImageOptimizer.detectFormatSupport();
          });
        }

        if (window.innerWidth <= 1024) {
          import('../lib/performance/mobileOptimization').then(({ initMobileOptimization }) => {
            initMobileOptimization();
          });
        }

        // PHASE 1: Initialize cache analysis for optimization planning
        import('../lib/performance/cacheAnalysis').then(() => {
          console.log('[Phase 1] Cache analysis monitoring active');
        }).catch(error => {
          console.warn('[Phase 1] Cache analysis failed to load:', error);
        });

        // PHASE 4: Smart Cache Manager console tools (Week 4)
        import('../lib/square/client').then(({ smartCacheManager }) => {
          // Make smart cache manager globally available
          (window as any).smartCacheManager = smartCacheManager;
          
          // Add console commands for testing
          (window as any).smartCache = () => {
            const stats = smartCacheManager.getCacheStats();
            console.log('[SmartCache] Current Statistics:', stats);
            console.log('[SmartCache] Available commands:');
            console.log('  - smartCache() - View current cache statistics');
            console.log('  - invalidateCache() - Force cache invalidation');
            console.log('  - checkCacheHealth() - Check cache health status');
            return stats;
          };
          
          (window as any).invalidateCache = (reason = 'manual') => {
            console.log(`[SmartCache] Forcing cache invalidation: ${reason}`);
            return smartCacheManager.forceInvalidation(reason);
          };
          
          (window as any).checkCacheHealth = () => {
            const stats = smartCacheManager.getCacheStats();
            const health = {
              cacheVersion: stats.cacheVersion,
              timeSinceLastUpdate: stats.timeSinceLastUpdate,
              totalInvalidations: stats.invalidations,
              needsInvalidation: smartCacheManager.shouldInvalidateCache(stats.lastInventoryUpdate),
              status: stats.timeSinceLastUpdate < 300000 ? 'healthy' : 'stale'
            };
            console.log('[SmartCache] Health Status:', health);
            return health;
          };
          
          if (import.meta.env.DEV) {
            console.log('[Phase 4] Smart cache manager initialized');
            console.log('[Phase 4] Console commands: smartCache(), invalidateCache(), checkCacheHealth()');
          }
        }).catch(error => {
          console.warn('[Phase 4] Smart cache manager failed to load:', error);
        });

        if (import.meta.env.DEV) {
          console.log(
            "[Layout] Performance optimizations active: View transitions, Enhanced images, Mobile optimization, Cache analysis"
          );
        }
      })();
    </script>
  </body>
</html>
